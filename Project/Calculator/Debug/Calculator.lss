
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005abc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000152  00800060  00005abc  00005b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000063  008001b2  008001b2  00005ca2  2**0
                  ALLOC
  3 .stab         000052ec  00000000  00000000  00005ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001772  00000000  00000000  0000af90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000c702  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c842  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c9b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000e5fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000f4e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00010294  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000103f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00010681  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010e4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	fa e5       	ldi	r31, 0x5A	; 90
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 31       	cpi	r26, 0x15	; 21
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 77 13 	call	0x26ee	; 0x26ee <main>
      8a:	0c 94 5c 2d 	jmp	0x5ab8	; 0x5ab8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f4 2c 	jmp	0x59e8	; 0x59e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ea       	ldi	r26, 0xAA	; 170
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 10 2d 	jmp	0x5a20	; 0x5a20 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 00 2d 	jmp	0x5a00	; 0x5a00 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1c 2d 	jmp	0x5a38	; 0x5a38 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 00 2d 	jmp	0x5a00	; 0x5a00 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1c 2d 	jmp	0x5a38	; 0x5a38 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f4 2c 	jmp	0x59e8	; 0x59e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ea       	ldi	r24, 0xAA	; 170
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 10 2d 	jmp	0x5a20	; 0x5a20 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 00 2d 	jmp	0x5a00	; 0x5a00 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1c 2d 	jmp	0x5a38	; 0x5a38 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 00 2d 	jmp	0x5a00	; 0x5a00 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1c 2d 	jmp	0x5a38	; 0x5a38 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 00 2d 	jmp	0x5a00	; 0x5a00 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1c 2d 	jmp	0x5a38	; 0x5a38 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 20 2d 	jmp	0x5a40	; 0x5a40 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <KEYPAD_getPressedKey+0x6>
    11c8:	0f 92       	push	r0
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    11ce:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    11d0:	1b 82       	std	Y+3, r1	; 0x03
    11d2:	43 c0       	rjmp	.+134    	; 0x125a <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	98 2f       	mov	r25, r24
    11e0:	9c 5f       	subi	r25, 0xFC	; 252
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	69 2f       	mov	r22, r25
    11e6:	41 e0       	ldi	r20, 0x01	; 1
    11e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
				EX:
					(KEYPAD_FIRST_COLUMN_PIN_ID+col)= pin4
					1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col)= 0001 0000
					~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col))= 1110 1111
			*/
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9c 01       	movw	r18, r24
    11f4:	2c 5f       	subi	r18, 0xFC	; 252
    11f6:	3f 4f       	sbci	r19, 0xFF	; 255
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <KEYPAD_getPressedKey+0x40>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	2a 95       	dec	r18
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <KEYPAD_getPressedKey+0x3c>
    1206:	80 95       	com	r24
    1208:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	69 81       	ldd	r22, Y+1	; 0x01
    120e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1212:	1a 82       	std	Y+2, r1	; 0x02
    1214:	1c c0       	rjmp	.+56     	; 0x124e <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	6a 81       	ldd	r22, Y+2	; 0x02
    121a:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    121e:	88 23       	and	r24, r24
    1220:	99 f4       	brne	.+38     	; 0x1248 <KEYPAD_getPressedKey+0x86>
					==> (row*KEYPAD_NUM_COLS)+col+1
					*/
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	98 2f       	mov	r25, r24
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	89 0f       	add	r24, r25
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	0e 94 32 09 	call	0x1264	; 0x1264 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	8f 5f       	subi	r24, 0xFF	; 255
    124c:	8a 83       	std	Y+2, r24	; 0x02
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	08 f3       	brcs	.-62     	; 0x1216 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	8f 5f       	subi	r24, 0xFF	; 255
    1258:	8b 83       	std	Y+3, r24	; 0x03
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	08 f4       	brcc	.+2      	; 0x1262 <KEYPAD_getPressedKey+0xa0>
    1260:	b9 cf       	rjmp	.-142    	; 0x11d4 <KEYPAD_getPressedKey+0x12>
    1262:	b6 cf       	rjmp	.-148    	; 0x11d0 <KEYPAD_getPressedKey+0xe>

00001264 <KEYPAD_4x4_adjustKeyNumber>:
		4      5 6 *
		1      2 3 -
      	enter  0 = +
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <KEYPAD_4x4_adjustKeyNumber+0x6>
    126a:	00 d0       	rcall	.+0      	; 0x126c <KEYPAD_4x4_adjustKeyNumber+0x8>
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1272:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3c 83       	std	Y+4, r19	; 0x04
    127c:	2b 83       	std	Y+3, r18	; 0x03
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	88 30       	cpi	r24, 0x08	; 8
    1284:	91 05       	cpc	r25, r1
    1286:	09 f4       	brne	.+2      	; 0x128a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1288:	70 c0       	rjmp	.+224    	; 0x136a <KEYPAD_4x4_adjustKeyNumber+0x106>
    128a:	2b 81       	ldd	r18, Y+3	; 0x03
    128c:	3c 81       	ldd	r19, Y+4	; 0x04
    128e:	29 30       	cpi	r18, 0x09	; 9
    1290:	31 05       	cpc	r19, r1
    1292:	5c f5       	brge	.+86     	; 0x12ea <KEYPAD_4x4_adjustKeyNumber+0x86>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	84 30       	cpi	r24, 0x04	; 4
    129a:	91 05       	cpc	r25, r1
    129c:	09 f4       	brne	.+2      	; 0x12a0 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    129e:	59 c0       	rjmp	.+178    	; 0x1352 <KEYPAD_4x4_adjustKeyNumber+0xee>
    12a0:	2b 81       	ldd	r18, Y+3	; 0x03
    12a2:	3c 81       	ldd	r19, Y+4	; 0x04
    12a4:	25 30       	cpi	r18, 0x05	; 5
    12a6:	31 05       	cpc	r19, r1
    12a8:	9c f4       	brge	.+38     	; 0x12d0 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	82 30       	cpi	r24, 0x02	; 2
    12b0:	91 05       	cpc	r25, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    12b4:	48 c0       	rjmp	.+144    	; 0x1346 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    12b6:	2b 81       	ldd	r18, Y+3	; 0x03
    12b8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ba:	23 30       	cpi	r18, 0x03	; 3
    12bc:	31 05       	cpc	r19, r1
    12be:	0c f0       	brlt	.+2      	; 0x12c2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    12c0:	45 c0       	rjmp	.+138    	; 0x134c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <KEYPAD_4x4_adjustKeyNumber+0x6a>
    12cc:	39 c0       	rjmp	.+114    	; 0x1340 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    12ce:	67 c0       	rjmp	.+206    	; 0x139e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    12d0:	2b 81       	ldd	r18, Y+3	; 0x03
    12d2:	3c 81       	ldd	r19, Y+4	; 0x04
    12d4:	26 30       	cpi	r18, 0x06	; 6
    12d6:	31 05       	cpc	r19, r1
    12d8:	09 f4       	brne	.+2      	; 0x12dc <KEYPAD_4x4_adjustKeyNumber+0x78>
    12da:	41 c0       	rjmp	.+130    	; 0x135e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	87 30       	cpi	r24, 0x07	; 7
    12e2:	91 05       	cpc	r25, r1
    12e4:	0c f0       	brlt	.+2      	; 0x12e8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    12e6:	3e c0       	rjmp	.+124    	; 0x1364 <KEYPAD_4x4_adjustKeyNumber+0x100>
    12e8:	37 c0       	rjmp	.+110    	; 0x1358 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    12ea:	2b 81       	ldd	r18, Y+3	; 0x03
    12ec:	3c 81       	ldd	r19, Y+4	; 0x04
    12ee:	2c 30       	cpi	r18, 0x0C	; 12
    12f0:	31 05       	cpc	r19, r1
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    12f4:	46 c0       	rjmp	.+140    	; 0x1382 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	8d 30       	cpi	r24, 0x0D	; 13
    12fc:	91 05       	cpc	r25, r1
    12fe:	5c f4       	brge	.+22     	; 0x1316 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1300:	2b 81       	ldd	r18, Y+3	; 0x03
    1302:	3c 81       	ldd	r19, Y+4	; 0x04
    1304:	2a 30       	cpi	r18, 0x0A	; 10
    1306:	31 05       	cpc	r19, r1
    1308:	b1 f1       	breq	.+108    	; 0x1376 <KEYPAD_4x4_adjustKeyNumber+0x112>
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	8b 30       	cpi	r24, 0x0B	; 11
    1310:	91 05       	cpc	r25, r1
    1312:	a4 f5       	brge	.+104    	; 0x137c <KEYPAD_4x4_adjustKeyNumber+0x118>
    1314:	2d c0       	rjmp	.+90     	; 0x1370 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	2e 30       	cpi	r18, 0x0E	; 14
    131c:	31 05       	cpc	r19, r1
    131e:	b9 f1       	breq	.+110    	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	8e 30       	cpi	r24, 0x0E	; 14
    1326:	91 05       	cpc	r25, r1
    1328:	7c f1       	brlt	.+94     	; 0x1388 <KEYPAD_4x4_adjustKeyNumber+0x124>
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	3c 81       	ldd	r19, Y+4	; 0x04
    132e:	2f 30       	cpi	r18, 0x0F	; 15
    1330:	31 05       	cpc	r19, r1
    1332:	79 f1       	breq	.+94     	; 0x1392 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	80 31       	cpi	r24, 0x10	; 16
    133a:	91 05       	cpc	r25, r1
    133c:	69 f1       	breq	.+90     	; 0x1398 <KEYPAD_4x4_adjustKeyNumber+0x134>
    133e:	2f c0       	rjmp	.+94     	; 0x139e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1340:	87 e0       	ldi	r24, 0x07	; 7
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	2e c0       	rjmp	.+92     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1346:	88 e0       	ldi	r24, 0x08	; 8
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	2b c0       	rjmp	.+86     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    134c:	89 e0       	ldi	r24, 0x09	; 9
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	28 c0       	rjmp	.+80     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = 'E'; // ASCII Code of %
    1352:	85 e4       	ldi	r24, 0x45	; 69
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	25 c0       	rjmp	.+74     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1358:	84 e0       	ldi	r24, 0x04	; 4
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	22 c0       	rjmp	.+68     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    135e:	85 e0       	ldi	r24, 0x05	; 5
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	1f c0       	rjmp	.+62     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1364:	86 e0       	ldi	r24, 0x06	; 6
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	1c c0       	rjmp	.+56     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = 'D'; /* ASCII Code of '*' */
    136a:	84 e4       	ldi	r24, 0x44	; 68
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	19 c0       	rjmp	.+50     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	16 c0       	rjmp	.+44     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	13 c0       	rjmp	.+38     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    137c:	83 e0       	ldi	r24, 0x03	; 3
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	10 c0       	rjmp	.+32     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = 'C'; /* ASCII Code of '-' */
    1382:	83 e4       	ldi	r24, 0x43	; 67
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	0d c0       	rjmp	.+26     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 'A';  /* ASCII of Enter */
    1388:	81 e4       	ldi	r24, 0x41	; 65
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	0a c0       	rjmp	.+20     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    138e:	19 82       	std	Y+1, r1	; 0x01
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1392:	8d e3       	ldi	r24, 0x3D	; 61
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	05 c0       	rjmp	.+10     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = 'B'; /* ASCII Code of '+' */
    1398:	82 e4       	ldi	r24, 0x42	; 66
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
} 
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	2e 97       	sbiw	r28, 0x0e	; 14
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	41 e0       	ldi	r20, 0x01	; 1
    13cc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	61 e0       	ldi	r22, 0x01	; 1
    13d4:	41 e0       	ldi	r20, 0x01	; 1
    13d6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	a0 ea       	ldi	r26, 0xA0	; 160
    13e0:	b1 e4       	ldi	r27, 0x41	; 65
    13e2:	8b 87       	std	Y+11, r24	; 0x0b
    13e4:	9c 87       	std	Y+12, r25	; 0x0c
    13e6:	ad 87       	std	Y+13, r26	; 0x0d
    13e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	4a e7       	ldi	r20, 0x7A	; 122
    13f8:	53 e4       	ldi	r21, 0x43	; 67
    13fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	8f 83       	std	Y+7, r24	; 0x07
    1404:	98 87       	std	Y+8, r25	; 0x08
    1406:	a9 87       	std	Y+9, r26	; 0x09
    1408:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    140a:	6f 81       	ldd	r22, Y+7	; 0x07
    140c:	78 85       	ldd	r23, Y+8	; 0x08
    140e:	89 85       	ldd	r24, Y+9	; 0x09
    1410:	9a 85       	ldd	r25, Y+10	; 0x0a
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e8       	ldi	r20, 0x80	; 128
    1418:	5f e3       	ldi	r21, 0x3F	; 63
    141a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    141e:	88 23       	and	r24, r24
    1420:	2c f4       	brge	.+10     	; 0x142c <LCD_init+0x7a>
		__ticks = 1;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	9e 83       	std	Y+6, r25	; 0x06
    1428:	8d 83       	std	Y+5, r24	; 0x05
    142a:	3f c0       	rjmp	.+126    	; 0x14aa <LCD_init+0xf8>
	else if (__tmp > 65535)
    142c:	6f 81       	ldd	r22, Y+7	; 0x07
    142e:	78 85       	ldd	r23, Y+8	; 0x08
    1430:	89 85       	ldd	r24, Y+9	; 0x09
    1432:	9a 85       	ldd	r25, Y+10	; 0x0a
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	3f ef       	ldi	r19, 0xFF	; 255
    1438:	4f e7       	ldi	r20, 0x7F	; 127
    143a:	57 e4       	ldi	r21, 0x47	; 71
    143c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1440:	18 16       	cp	r1, r24
    1442:	4c f5       	brge	.+82     	; 0x1496 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1444:	6b 85       	ldd	r22, Y+11	; 0x0b
    1446:	7c 85       	ldd	r23, Y+12	; 0x0c
    1448:	8d 85       	ldd	r24, Y+13	; 0x0d
    144a:	9e 85       	ldd	r25, Y+14	; 0x0e
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e2       	ldi	r20, 0x20	; 32
    1452:	51 e4       	ldi	r21, 0x41	; 65
    1454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	bc 01       	movw	r22, r24
    145e:	cd 01       	movw	r24, r26
    1460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	9e 83       	std	Y+6, r25	; 0x06
    146a:	8d 83       	std	Y+5, r24	; 0x05
    146c:	0f c0       	rjmp	.+30     	; 0x148c <LCD_init+0xda>
    146e:	89 e1       	ldi	r24, 0x19	; 25
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	9c 83       	std	Y+4, r25	; 0x04
    1474:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	f1 f7       	brne	.-4      	; 0x147a <LCD_init+0xc8>
    147e:	9c 83       	std	Y+4, r25	; 0x04
    1480:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1482:	8d 81       	ldd	r24, Y+5	; 0x05
    1484:	9e 81       	ldd	r25, Y+6	; 0x06
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	9e 83       	std	Y+6, r25	; 0x06
    148a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	69 f7       	brne	.-38     	; 0x146e <LCD_init+0xbc>
    1494:	14 c0       	rjmp	.+40     	; 0x14be <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1496:	6f 81       	ldd	r22, Y+7	; 0x07
    1498:	78 85       	ldd	r23, Y+8	; 0x08
    149a:	89 85       	ldd	r24, Y+9	; 0x09
    149c:	9a 85       	ldd	r25, Y+10	; 0x0a
    149e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	9e 83       	std	Y+6, r25	; 0x06
    14a8:	8d 83       	std	Y+5, r24	; 0x05
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	9e 81       	ldd	r25, Y+6	; 0x06
    14ae:	9a 83       	std	Y+2, r25	; 0x02
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	f1 f7       	brne	.-4      	; 0x14b6 <LCD_init+0x104>
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	6f ef       	ldi	r22, 0xFF	; 255
    14c2:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    14c6:	88 e3       	ldi	r24, 0x38	; 56
    14c8:	0e 94 75 0a 	call	0x14ea	; 0x14ea <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    14cc:	8c e0       	ldi	r24, 0x0C	; 12
    14ce:	0e 94 75 0a 	call	0x14ea	; 0x14ea <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	0e 94 75 0a 	call	0x14ea	; 0x14ea <LCD_sendCommand>
}
    14d8:	2e 96       	adiw	r28, 0x0e	; 14
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	e9 97       	sbiw	r28, 0x39	; 57
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	40 e0       	ldi	r20, 0x00	; 0
    1506:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	a0 e8       	ldi	r26, 0x80	; 128
    1510:	bf e3       	ldi	r27, 0x3F	; 63
    1512:	8d ab       	std	Y+53, r24	; 0x35
    1514:	9e ab       	std	Y+54, r25	; 0x36
    1516:	af ab       	std	Y+55, r26	; 0x37
    1518:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151a:	6d a9       	ldd	r22, Y+53	; 0x35
    151c:	7e a9       	ldd	r23, Y+54	; 0x36
    151e:	8f a9       	ldd	r24, Y+55	; 0x37
    1520:	98 ad       	ldd	r25, Y+56	; 0x38
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	4a e7       	ldi	r20, 0x7A	; 122
    1528:	53 e4       	ldi	r21, 0x43	; 67
    152a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	89 ab       	std	Y+49, r24	; 0x31
    1534:	9a ab       	std	Y+50, r25	; 0x32
    1536:	ab ab       	std	Y+51, r26	; 0x33
    1538:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    153a:	69 a9       	ldd	r22, Y+49	; 0x31
    153c:	7a a9       	ldd	r23, Y+50	; 0x32
    153e:	8b a9       	ldd	r24, Y+51	; 0x33
    1540:	9c a9       	ldd	r25, Y+52	; 0x34
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e8       	ldi	r20, 0x80	; 128
    1548:	5f e3       	ldi	r21, 0x3F	; 63
    154a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    154e:	88 23       	and	r24, r24
    1550:	2c f4       	brge	.+10     	; 0x155c <LCD_sendCommand+0x72>
		__ticks = 1;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	98 ab       	std	Y+48, r25	; 0x30
    1558:	8f a7       	std	Y+47, r24	; 0x2f
    155a:	3f c0       	rjmp	.+126    	; 0x15da <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    155c:	69 a9       	ldd	r22, Y+49	; 0x31
    155e:	7a a9       	ldd	r23, Y+50	; 0x32
    1560:	8b a9       	ldd	r24, Y+51	; 0x33
    1562:	9c a9       	ldd	r25, Y+52	; 0x34
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	3f ef       	ldi	r19, 0xFF	; 255
    1568:	4f e7       	ldi	r20, 0x7F	; 127
    156a:	57 e4       	ldi	r21, 0x47	; 71
    156c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1570:	18 16       	cp	r1, r24
    1572:	4c f5       	brge	.+82     	; 0x15c6 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1574:	6d a9       	ldd	r22, Y+53	; 0x35
    1576:	7e a9       	ldd	r23, Y+54	; 0x36
    1578:	8f a9       	ldd	r24, Y+55	; 0x37
    157a:	98 ad       	ldd	r25, Y+56	; 0x38
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e2       	ldi	r20, 0x20	; 32
    1582:	51 e4       	ldi	r21, 0x41	; 65
    1584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	bc 01       	movw	r22, r24
    158e:	cd 01       	movw	r24, r26
    1590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	98 ab       	std	Y+48, r25	; 0x30
    159a:	8f a7       	std	Y+47, r24	; 0x2f
    159c:	0f c0       	rjmp	.+30     	; 0x15bc <LCD_sendCommand+0xd2>
    159e:	89 e1       	ldi	r24, 0x19	; 25
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	9e a7       	std	Y+46, r25	; 0x2e
    15a4:	8d a7       	std	Y+45, r24	; 0x2d
    15a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    15a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <LCD_sendCommand+0xc0>
    15ae:	9e a7       	std	Y+46, r25	; 0x2e
    15b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    15b4:	98 a9       	ldd	r25, Y+48	; 0x30
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	98 ab       	std	Y+48, r25	; 0x30
    15ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    15be:	98 a9       	ldd	r25, Y+48	; 0x30
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	69 f7       	brne	.-38     	; 0x159e <LCD_sendCommand+0xb4>
    15c4:	14 c0       	rjmp	.+40     	; 0x15ee <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c6:	69 a9       	ldd	r22, Y+49	; 0x31
    15c8:	7a a9       	ldd	r23, Y+50	; 0x32
    15ca:	8b a9       	ldd	r24, Y+51	; 0x33
    15cc:	9c a9       	ldd	r25, Y+52	; 0x34
    15ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	98 ab       	std	Y+48, r25	; 0x30
    15d8:	8f a7       	std	Y+47, r24	; 0x2f
    15da:	8f a5       	ldd	r24, Y+47	; 0x2f
    15dc:	98 a9       	ldd	r25, Y+48	; 0x30
    15de:	9c a7       	std	Y+44, r25	; 0x2c
    15e0:	8b a7       	std	Y+43, r24	; 0x2b
    15e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    15e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <LCD_sendCommand+0xfc>
    15ea:	9c a7       	std	Y+44, r25	; 0x2c
    15ec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	41 e0       	ldi	r20, 0x01	; 1
    15f4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	a0 e8       	ldi	r26, 0x80	; 128
    15fe:	bf e3       	ldi	r27, 0x3F	; 63
    1600:	8f a3       	std	Y+39, r24	; 0x27
    1602:	98 a7       	std	Y+40, r25	; 0x28
    1604:	a9 a7       	std	Y+41, r26	; 0x29
    1606:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1608:	6f a1       	ldd	r22, Y+39	; 0x27
    160a:	78 a5       	ldd	r23, Y+40	; 0x28
    160c:	89 a5       	ldd	r24, Y+41	; 0x29
    160e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	4a e7       	ldi	r20, 0x7A	; 122
    1616:	53 e4       	ldi	r21, 0x43	; 67
    1618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	8b a3       	std	Y+35, r24	; 0x23
    1622:	9c a3       	std	Y+36, r25	; 0x24
    1624:	ad a3       	std	Y+37, r26	; 0x25
    1626:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1628:	6b a1       	ldd	r22, Y+35	; 0x23
    162a:	7c a1       	ldd	r23, Y+36	; 0x24
    162c:	8d a1       	ldd	r24, Y+37	; 0x25
    162e:	9e a1       	ldd	r25, Y+38	; 0x26
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e8       	ldi	r20, 0x80	; 128
    1636:	5f e3       	ldi	r21, 0x3F	; 63
    1638:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    163c:	88 23       	and	r24, r24
    163e:	2c f4       	brge	.+10     	; 0x164a <LCD_sendCommand+0x160>
		__ticks = 1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	9a a3       	std	Y+34, r25	; 0x22
    1646:	89 a3       	std	Y+33, r24	; 0x21
    1648:	3f c0       	rjmp	.+126    	; 0x16c8 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    164a:	6b a1       	ldd	r22, Y+35	; 0x23
    164c:	7c a1       	ldd	r23, Y+36	; 0x24
    164e:	8d a1       	ldd	r24, Y+37	; 0x25
    1650:	9e a1       	ldd	r25, Y+38	; 0x26
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	3f ef       	ldi	r19, 0xFF	; 255
    1656:	4f e7       	ldi	r20, 0x7F	; 127
    1658:	57 e4       	ldi	r21, 0x47	; 71
    165a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    165e:	18 16       	cp	r1, r24
    1660:	4c f5       	brge	.+82     	; 0x16b4 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1662:	6f a1       	ldd	r22, Y+39	; 0x27
    1664:	78 a5       	ldd	r23, Y+40	; 0x28
    1666:	89 a5       	ldd	r24, Y+41	; 0x29
    1668:	9a a5       	ldd	r25, Y+42	; 0x2a
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e2       	ldi	r20, 0x20	; 32
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	bc 01       	movw	r22, r24
    167c:	cd 01       	movw	r24, r26
    167e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	9a a3       	std	Y+34, r25	; 0x22
    1688:	89 a3       	std	Y+33, r24	; 0x21
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <LCD_sendCommand+0x1c0>
    168c:	89 e1       	ldi	r24, 0x19	; 25
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	98 a3       	std	Y+32, r25	; 0x20
    1692:	8f 8f       	std	Y+31, r24	; 0x1f
    1694:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1696:	98 a1       	ldd	r25, Y+32	; 0x20
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <LCD_sendCommand+0x1ae>
    169c:	98 a3       	std	Y+32, r25	; 0x20
    169e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a0:	89 a1       	ldd	r24, Y+33	; 0x21
    16a2:	9a a1       	ldd	r25, Y+34	; 0x22
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	9a a3       	std	Y+34, r25	; 0x22
    16a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16aa:	89 a1       	ldd	r24, Y+33	; 0x21
    16ac:	9a a1       	ldd	r25, Y+34	; 0x22
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	69 f7       	brne	.-38     	; 0x168c <LCD_sendCommand+0x1a2>
    16b2:	14 c0       	rjmp	.+40     	; 0x16dc <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b4:	6b a1       	ldd	r22, Y+35	; 0x23
    16b6:	7c a1       	ldd	r23, Y+36	; 0x24
    16b8:	8d a1       	ldd	r24, Y+37	; 0x25
    16ba:	9e a1       	ldd	r25, Y+38	; 0x26
    16bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	9a a3       	std	Y+34, r25	; 0x22
    16c6:	89 a3       	std	Y+33, r24	; 0x21
    16c8:	89 a1       	ldd	r24, Y+33	; 0x21
    16ca:	9a a1       	ldd	r25, Y+34	; 0x22
    16cc:	9e 8f       	std	Y+30, r25	; 0x1e
    16ce:	8d 8f       	std	Y+29, r24	; 0x1d
    16d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <LCD_sendCommand+0x1ea>
    16d8:	9e 8f       	std	Y+30, r25	; 0x1e
    16da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	69 ad       	ldd	r22, Y+57	; 0x39
    16e0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a0 e8       	ldi	r26, 0x80	; 128
    16ea:	bf e3       	ldi	r27, 0x3F	; 63
    16ec:	89 8f       	std	Y+25, r24	; 0x19
    16ee:	9a 8f       	std	Y+26, r25	; 0x1a
    16f0:	ab 8f       	std	Y+27, r26	; 0x1b
    16f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f4:	69 8d       	ldd	r22, Y+25	; 0x19
    16f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	4a e7       	ldi	r20, 0x7A	; 122
    1702:	53 e4       	ldi	r21, 0x43	; 67
    1704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	8d 8b       	std	Y+21, r24	; 0x15
    170e:	9e 8b       	std	Y+22, r25	; 0x16
    1710:	af 8b       	std	Y+23, r26	; 0x17
    1712:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1714:	6d 89       	ldd	r22, Y+21	; 0x15
    1716:	7e 89       	ldd	r23, Y+22	; 0x16
    1718:	8f 89       	ldd	r24, Y+23	; 0x17
    171a:	98 8d       	ldd	r25, Y+24	; 0x18
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e8       	ldi	r20, 0x80	; 128
    1722:	5f e3       	ldi	r21, 0x3F	; 63
    1724:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1728:	88 23       	and	r24, r24
    172a:	2c f4       	brge	.+10     	; 0x1736 <LCD_sendCommand+0x24c>
		__ticks = 1;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	9c 8b       	std	Y+20, r25	; 0x14
    1732:	8b 8b       	std	Y+19, r24	; 0x13
    1734:	3f c0       	rjmp	.+126    	; 0x17b4 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1736:	6d 89       	ldd	r22, Y+21	; 0x15
    1738:	7e 89       	ldd	r23, Y+22	; 0x16
    173a:	8f 89       	ldd	r24, Y+23	; 0x17
    173c:	98 8d       	ldd	r25, Y+24	; 0x18
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	3f ef       	ldi	r19, 0xFF	; 255
    1742:	4f e7       	ldi	r20, 0x7F	; 127
    1744:	57 e4       	ldi	r21, 0x47	; 71
    1746:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    174a:	18 16       	cp	r1, r24
    174c:	4c f5       	brge	.+82     	; 0x17a0 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174e:	69 8d       	ldd	r22, Y+25	; 0x19
    1750:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1752:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1754:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e2       	ldi	r20, 0x20	; 32
    175c:	51 e4       	ldi	r21, 0x41	; 65
    175e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	9c 8b       	std	Y+20, r25	; 0x14
    1774:	8b 8b       	std	Y+19, r24	; 0x13
    1776:	0f c0       	rjmp	.+30     	; 0x1796 <LCD_sendCommand+0x2ac>
    1778:	89 e1       	ldi	r24, 0x19	; 25
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	9a 8b       	std	Y+18, r25	; 0x12
    177e:	89 8b       	std	Y+17, r24	; 0x11
    1780:	89 89       	ldd	r24, Y+17	; 0x11
    1782:	9a 89       	ldd	r25, Y+18	; 0x12
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <LCD_sendCommand+0x29a>
    1788:	9a 8b       	std	Y+18, r25	; 0x12
    178a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178c:	8b 89       	ldd	r24, Y+19	; 0x13
    178e:	9c 89       	ldd	r25, Y+20	; 0x14
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	9c 8b       	std	Y+20, r25	; 0x14
    1794:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1796:	8b 89       	ldd	r24, Y+19	; 0x13
    1798:	9c 89       	ldd	r25, Y+20	; 0x14
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	69 f7       	brne	.-38     	; 0x1778 <LCD_sendCommand+0x28e>
    179e:	14 c0       	rjmp	.+40     	; 0x17c8 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a0:	6d 89       	ldd	r22, Y+21	; 0x15
    17a2:	7e 89       	ldd	r23, Y+22	; 0x16
    17a4:	8f 89       	ldd	r24, Y+23	; 0x17
    17a6:	98 8d       	ldd	r25, Y+24	; 0x18
    17a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	9c 8b       	std	Y+20, r25	; 0x14
    17b2:	8b 8b       	std	Y+19, r24	; 0x13
    17b4:	8b 89       	ldd	r24, Y+19	; 0x13
    17b6:	9c 89       	ldd	r25, Y+20	; 0x14
    17b8:	98 8b       	std	Y+16, r25	; 0x10
    17ba:	8f 87       	std	Y+15, r24	; 0x0f
    17bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    17be:	98 89       	ldd	r25, Y+16	; 0x10
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <LCD_sendCommand+0x2d6>
    17c4:	98 8b       	std	Y+16, r25	; 0x10
    17c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	40 e0       	ldi	r20, 0x00	; 0
    17ce:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	a0 e8       	ldi	r26, 0x80	; 128
    17d8:	bf e3       	ldi	r27, 0x3F	; 63
    17da:	8b 87       	std	Y+11, r24	; 0x0b
    17dc:	9c 87       	std	Y+12, r25	; 0x0c
    17de:	ad 87       	std	Y+13, r26	; 0x0d
    17e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	4a e7       	ldi	r20, 0x7A	; 122
    17f0:	53 e4       	ldi	r21, 0x43	; 67
    17f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	8f 83       	std	Y+7, r24	; 0x07
    17fc:	98 87       	std	Y+8, r25	; 0x08
    17fe:	a9 87       	std	Y+9, r26	; 0x09
    1800:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1802:	6f 81       	ldd	r22, Y+7	; 0x07
    1804:	78 85       	ldd	r23, Y+8	; 0x08
    1806:	89 85       	ldd	r24, Y+9	; 0x09
    1808:	9a 85       	ldd	r25, Y+10	; 0x0a
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e8       	ldi	r20, 0x80	; 128
    1810:	5f e3       	ldi	r21, 0x3F	; 63
    1812:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1816:	88 23       	and	r24, r24
    1818:	2c f4       	brge	.+10     	; 0x1824 <LCD_sendCommand+0x33a>
		__ticks = 1;
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	3f c0       	rjmp	.+126    	; 0x18a2 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1824:	6f 81       	ldd	r22, Y+7	; 0x07
    1826:	78 85       	ldd	r23, Y+8	; 0x08
    1828:	89 85       	ldd	r24, Y+9	; 0x09
    182a:	9a 85       	ldd	r25, Y+10	; 0x0a
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	3f ef       	ldi	r19, 0xFF	; 255
    1830:	4f e7       	ldi	r20, 0x7F	; 127
    1832:	57 e4       	ldi	r21, 0x47	; 71
    1834:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1838:	18 16       	cp	r1, r24
    183a:	4c f5       	brge	.+82     	; 0x188e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183c:	6b 85       	ldd	r22, Y+11	; 0x0b
    183e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1840:	8d 85       	ldd	r24, Y+13	; 0x0d
    1842:	9e 85       	ldd	r25, Y+14	; 0x0e
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e2       	ldi	r20, 0x20	; 32
    184a:	51 e4       	ldi	r21, 0x41	; 65
    184c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	bc 01       	movw	r22, r24
    1856:	cd 01       	movw	r24, r26
    1858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	9e 83       	std	Y+6, r25	; 0x06
    1862:	8d 83       	std	Y+5, r24	; 0x05
    1864:	0f c0       	rjmp	.+30     	; 0x1884 <LCD_sendCommand+0x39a>
    1866:	89 e1       	ldi	r24, 0x19	; 25
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	9c 83       	std	Y+4, r25	; 0x04
    186c:	8b 83       	std	Y+3, r24	; 0x03
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	9c 81       	ldd	r25, Y+4	; 0x04
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <LCD_sendCommand+0x388>
    1876:	9c 83       	std	Y+4, r25	; 0x04
    1878:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	9e 81       	ldd	r25, Y+6	; 0x06
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	9e 81       	ldd	r25, Y+6	; 0x06
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	69 f7       	brne	.-38     	; 0x1866 <LCD_sendCommand+0x37c>
    188c:	14 c0       	rjmp	.+40     	; 0x18b6 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188e:	6f 81       	ldd	r22, Y+7	; 0x07
    1890:	78 85       	ldd	r23, Y+8	; 0x08
    1892:	89 85       	ldd	r24, Y+9	; 0x09
    1894:	9a 85       	ldd	r25, Y+10	; 0x0a
    1896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	9e 83       	std	Y+6, r25	; 0x06
    18a0:	8d 83       	std	Y+5, r24	; 0x05
    18a2:	8d 81       	ldd	r24, Y+5	; 0x05
    18a4:	9e 81       	ldd	r25, Y+6	; 0x06
    18a6:	9a 83       	std	Y+2, r25	; 0x02
    18a8:	89 83       	std	Y+1, r24	; 0x01
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	9a 81       	ldd	r25, Y+2	; 0x02
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <LCD_sendCommand+0x3c4>
    18b2:	9a 83       	std	Y+2, r25	; 0x02
    18b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    18b6:	e9 96       	adiw	r28, 0x39	; 57
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	e9 97       	sbiw	r28, 0x39	; 57
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
    18dc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a0 e8       	ldi	r26, 0x80	; 128
    18ee:	bf e3       	ldi	r27, 0x3F	; 63
    18f0:	8d ab       	std	Y+53, r24	; 0x35
    18f2:	9e ab       	std	Y+54, r25	; 0x36
    18f4:	af ab       	std	Y+55, r26	; 0x37
    18f6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f8:	6d a9       	ldd	r22, Y+53	; 0x35
    18fa:	7e a9       	ldd	r23, Y+54	; 0x36
    18fc:	8f a9       	ldd	r24, Y+55	; 0x37
    18fe:	98 ad       	ldd	r25, Y+56	; 0x38
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	4a e7       	ldi	r20, 0x7A	; 122
    1906:	53 e4       	ldi	r21, 0x43	; 67
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	89 ab       	std	Y+49, r24	; 0x31
    1912:	9a ab       	std	Y+50, r25	; 0x32
    1914:	ab ab       	std	Y+51, r26	; 0x33
    1916:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1918:	69 a9       	ldd	r22, Y+49	; 0x31
    191a:	7a a9       	ldd	r23, Y+50	; 0x32
    191c:	8b a9       	ldd	r24, Y+51	; 0x33
    191e:	9c a9       	ldd	r25, Y+52	; 0x34
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e8       	ldi	r20, 0x80	; 128
    1926:	5f e3       	ldi	r21, 0x3F	; 63
    1928:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    192c:	88 23       	and	r24, r24
    192e:	2c f4       	brge	.+10     	; 0x193a <LCD_displayCharacter+0x72>
		__ticks = 1;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	98 ab       	std	Y+48, r25	; 0x30
    1936:	8f a7       	std	Y+47, r24	; 0x2f
    1938:	3f c0       	rjmp	.+126    	; 0x19b8 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    193a:	69 a9       	ldd	r22, Y+49	; 0x31
    193c:	7a a9       	ldd	r23, Y+50	; 0x32
    193e:	8b a9       	ldd	r24, Y+51	; 0x33
    1940:	9c a9       	ldd	r25, Y+52	; 0x34
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	3f ef       	ldi	r19, 0xFF	; 255
    1946:	4f e7       	ldi	r20, 0x7F	; 127
    1948:	57 e4       	ldi	r21, 0x47	; 71
    194a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    194e:	18 16       	cp	r1, r24
    1950:	4c f5       	brge	.+82     	; 0x19a4 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1952:	6d a9       	ldd	r22, Y+53	; 0x35
    1954:	7e a9       	ldd	r23, Y+54	; 0x36
    1956:	8f a9       	ldd	r24, Y+55	; 0x37
    1958:	98 ad       	ldd	r25, Y+56	; 0x38
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e2       	ldi	r20, 0x20	; 32
    1960:	51 e4       	ldi	r21, 0x41	; 65
    1962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	bc 01       	movw	r22, r24
    196c:	cd 01       	movw	r24, r26
    196e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	98 ab       	std	Y+48, r25	; 0x30
    1978:	8f a7       	std	Y+47, r24	; 0x2f
    197a:	0f c0       	rjmp	.+30     	; 0x199a <LCD_displayCharacter+0xd2>
    197c:	89 e1       	ldi	r24, 0x19	; 25
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	9e a7       	std	Y+46, r25	; 0x2e
    1982:	8d a7       	std	Y+45, r24	; 0x2d
    1984:	8d a5       	ldd	r24, Y+45	; 0x2d
    1986:	9e a5       	ldd	r25, Y+46	; 0x2e
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <LCD_displayCharacter+0xc0>
    198c:	9e a7       	std	Y+46, r25	; 0x2e
    198e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	8f a5       	ldd	r24, Y+47	; 0x2f
    1992:	98 a9       	ldd	r25, Y+48	; 0x30
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	98 ab       	std	Y+48, r25	; 0x30
    1998:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199a:	8f a5       	ldd	r24, Y+47	; 0x2f
    199c:	98 a9       	ldd	r25, Y+48	; 0x30
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	69 f7       	brne	.-38     	; 0x197c <LCD_displayCharacter+0xb4>
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a4:	69 a9       	ldd	r22, Y+49	; 0x31
    19a6:	7a a9       	ldd	r23, Y+50	; 0x32
    19a8:	8b a9       	ldd	r24, Y+51	; 0x33
    19aa:	9c a9       	ldd	r25, Y+52	; 0x34
    19ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	98 ab       	std	Y+48, r25	; 0x30
    19b6:	8f a7       	std	Y+47, r24	; 0x2f
    19b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ba:	98 a9       	ldd	r25, Y+48	; 0x30
    19bc:	9c a7       	std	Y+44, r25	; 0x2c
    19be:	8b a7       	std	Y+43, r24	; 0x2b
    19c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    19c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <LCD_displayCharacter+0xfc>
    19c8:	9c a7       	std	Y+44, r25	; 0x2c
    19ca:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	61 e0       	ldi	r22, 0x01	; 1
    19d0:	41 e0       	ldi	r20, 0x01	; 1
    19d2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a0 e8       	ldi	r26, 0x80	; 128
    19dc:	bf e3       	ldi	r27, 0x3F	; 63
    19de:	8f a3       	std	Y+39, r24	; 0x27
    19e0:	98 a7       	std	Y+40, r25	; 0x28
    19e2:	a9 a7       	std	Y+41, r26	; 0x29
    19e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e6:	6f a1       	ldd	r22, Y+39	; 0x27
    19e8:	78 a5       	ldd	r23, Y+40	; 0x28
    19ea:	89 a5       	ldd	r24, Y+41	; 0x29
    19ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	4a e7       	ldi	r20, 0x7A	; 122
    19f4:	53 e4       	ldi	r21, 0x43	; 67
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	8b a3       	std	Y+35, r24	; 0x23
    1a00:	9c a3       	std	Y+36, r25	; 0x24
    1a02:	ad a3       	std	Y+37, r26	; 0x25
    1a04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a06:	6b a1       	ldd	r22, Y+35	; 0x23
    1a08:	7c a1       	ldd	r23, Y+36	; 0x24
    1a0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e8       	ldi	r20, 0x80	; 128
    1a14:	5f e3       	ldi	r21, 0x3F	; 63
    1a16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a1a:	88 23       	and	r24, r24
    1a1c:	2c f4       	brge	.+10     	; 0x1a28 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	9a a3       	std	Y+34, r25	; 0x22
    1a24:	89 a3       	std	Y+33, r24	; 0x21
    1a26:	3f c0       	rjmp	.+126    	; 0x1aa6 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1a28:	6b a1       	ldd	r22, Y+35	; 0x23
    1a2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	3f ef       	ldi	r19, 0xFF	; 255
    1a34:	4f e7       	ldi	r20, 0x7F	; 127
    1a36:	57 e4       	ldi	r21, 0x47	; 71
    1a38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a3c:	18 16       	cp	r1, r24
    1a3e:	4c f5       	brge	.+82     	; 0x1a92 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a40:	6f a1       	ldd	r22, Y+39	; 0x27
    1a42:	78 a5       	ldd	r23, Y+40	; 0x28
    1a44:	89 a5       	ldd	r24, Y+41	; 0x29
    1a46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e2       	ldi	r20, 0x20	; 32
    1a4e:	51 e4       	ldi	r21, 0x41	; 65
    1a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	9a a3       	std	Y+34, r25	; 0x22
    1a66:	89 a3       	std	Y+33, r24	; 0x21
    1a68:	0f c0       	rjmp	.+30     	; 0x1a88 <LCD_displayCharacter+0x1c0>
    1a6a:	89 e1       	ldi	r24, 0x19	; 25
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	98 a3       	std	Y+32, r25	; 0x20
    1a70:	8f 8f       	std	Y+31, r24	; 0x1f
    1a72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a74:	98 a1       	ldd	r25, Y+32	; 0x20
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <LCD_displayCharacter+0x1ae>
    1a7a:	98 a3       	std	Y+32, r25	; 0x20
    1a7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a80:	9a a1       	ldd	r25, Y+34	; 0x22
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	9a a3       	std	Y+34, r25	; 0x22
    1a86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a88:	89 a1       	ldd	r24, Y+33	; 0x21
    1a8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	69 f7       	brne	.-38     	; 0x1a6a <LCD_displayCharacter+0x1a2>
    1a90:	14 c0       	rjmp	.+40     	; 0x1aba <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a92:	6b a1       	ldd	r22, Y+35	; 0x23
    1a94:	7c a1       	ldd	r23, Y+36	; 0x24
    1a96:	8d a1       	ldd	r24, Y+37	; 0x25
    1a98:	9e a1       	ldd	r25, Y+38	; 0x26
    1a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	9a a3       	std	Y+34, r25	; 0x22
    1aa4:	89 a3       	std	Y+33, r24	; 0x21
    1aa6:	89 a1       	ldd	r24, Y+33	; 0x21
    1aa8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aaa:	9e 8f       	std	Y+30, r25	; 0x1e
    1aac:	8d 8f       	std	Y+29, r24	; 0x1d
    1aae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ab0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <LCD_displayCharacter+0x1ea>
    1ab6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ab8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	69 ad       	ldd	r22, Y+57	; 0x39
    1abe:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	a0 e8       	ldi	r26, 0x80	; 128
    1ac8:	bf e3       	ldi	r27, 0x3F	; 63
    1aca:	89 8f       	std	Y+25, r24	; 0x19
    1acc:	9a 8f       	std	Y+26, r25	; 0x1a
    1ace:	ab 8f       	std	Y+27, r26	; 0x1b
    1ad0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ad4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ad6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	4a e7       	ldi	r20, 0x7A	; 122
    1ae0:	53 e4       	ldi	r21, 0x43	; 67
    1ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	8d 8b       	std	Y+21, r24	; 0x15
    1aec:	9e 8b       	std	Y+22, r25	; 0x16
    1aee:	af 8b       	std	Y+23, r26	; 0x17
    1af0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1af2:	6d 89       	ldd	r22, Y+21	; 0x15
    1af4:	7e 89       	ldd	r23, Y+22	; 0x16
    1af6:	8f 89       	ldd	r24, Y+23	; 0x17
    1af8:	98 8d       	ldd	r25, Y+24	; 0x18
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e8       	ldi	r20, 0x80	; 128
    1b00:	5f e3       	ldi	r21, 0x3F	; 63
    1b02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b06:	88 23       	and	r24, r24
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9c 8b       	std	Y+20, r25	; 0x14
    1b10:	8b 8b       	std	Y+19, r24	; 0x13
    1b12:	3f c0       	rjmp	.+126    	; 0x1b92 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1b14:	6d 89       	ldd	r22, Y+21	; 0x15
    1b16:	7e 89       	ldd	r23, Y+22	; 0x16
    1b18:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	3f ef       	ldi	r19, 0xFF	; 255
    1b20:	4f e7       	ldi	r20, 0x7F	; 127
    1b22:	57 e4       	ldi	r21, 0x47	; 71
    1b24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b28:	18 16       	cp	r1, r24
    1b2a:	4c f5       	brge	.+82     	; 0x1b7e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e2       	ldi	r20, 0x20	; 32
    1b3a:	51 e4       	ldi	r21, 0x41	; 65
    1b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	9c 8b       	std	Y+20, r25	; 0x14
    1b52:	8b 8b       	std	Y+19, r24	; 0x13
    1b54:	0f c0       	rjmp	.+30     	; 0x1b74 <LCD_displayCharacter+0x2ac>
    1b56:	89 e1       	ldi	r24, 0x19	; 25
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9a 8b       	std	Y+18, r25	; 0x12
    1b5c:	89 8b       	std	Y+17, r24	; 0x11
    1b5e:	89 89       	ldd	r24, Y+17	; 0x11
    1b60:	9a 89       	ldd	r25, Y+18	; 0x12
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <LCD_displayCharacter+0x29a>
    1b66:	9a 8b       	std	Y+18, r25	; 0x12
    1b68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	9c 8b       	std	Y+20, r25	; 0x14
    1b72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b74:	8b 89       	ldd	r24, Y+19	; 0x13
    1b76:	9c 89       	ldd	r25, Y+20	; 0x14
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	69 f7       	brne	.-38     	; 0x1b56 <LCD_displayCharacter+0x28e>
    1b7c:	14 c0       	rjmp	.+40     	; 0x1ba6 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b80:	7e 89       	ldd	r23, Y+22	; 0x16
    1b82:	8f 89       	ldd	r24, Y+23	; 0x17
    1b84:	98 8d       	ldd	r25, Y+24	; 0x18
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	9c 8b       	std	Y+20, r25	; 0x14
    1b90:	8b 8b       	std	Y+19, r24	; 0x13
    1b92:	8b 89       	ldd	r24, Y+19	; 0x13
    1b94:	9c 89       	ldd	r25, Y+20	; 0x14
    1b96:	98 8b       	std	Y+16, r25	; 0x10
    1b98:	8f 87       	std	Y+15, r24	; 0x0f
    1b9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b9c:	98 89       	ldd	r25, Y+16	; 0x10
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <LCD_displayCharacter+0x2d6>
    1ba2:	98 8b       	std	Y+16, r25	; 0x10
    1ba4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	61 e0       	ldi	r22, 0x01	; 1
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	a0 e8       	ldi	r26, 0x80	; 128
    1bb6:	bf e3       	ldi	r27, 0x3F	; 63
    1bb8:	8b 87       	std	Y+11, r24	; 0x0b
    1bba:	9c 87       	std	Y+12, r25	; 0x0c
    1bbc:	ad 87       	std	Y+13, r26	; 0x0d
    1bbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	4a e7       	ldi	r20, 0x7A	; 122
    1bce:	53 e4       	ldi	r21, 0x43	; 67
    1bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	8f 83       	std	Y+7, r24	; 0x07
    1bda:	98 87       	std	Y+8, r25	; 0x08
    1bdc:	a9 87       	std	Y+9, r26	; 0x09
    1bde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1be0:	6f 81       	ldd	r22, Y+7	; 0x07
    1be2:	78 85       	ldd	r23, Y+8	; 0x08
    1be4:	89 85       	ldd	r24, Y+9	; 0x09
    1be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e8       	ldi	r20, 0x80	; 128
    1bee:	5f e3       	ldi	r21, 0x3F	; 63
    1bf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf4:	88 23       	and	r24, r24
    1bf6:	2c f4       	brge	.+10     	; 0x1c02 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
    1c00:	3f c0       	rjmp	.+126    	; 0x1c80 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1c02:	6f 81       	ldd	r22, Y+7	; 0x07
    1c04:	78 85       	ldd	r23, Y+8	; 0x08
    1c06:	89 85       	ldd	r24, Y+9	; 0x09
    1c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	3f ef       	ldi	r19, 0xFF	; 255
    1c0e:	4f e7       	ldi	r20, 0x7F	; 127
    1c10:	57 e4       	ldi	r21, 0x47	; 71
    1c12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c16:	18 16       	cp	r1, r24
    1c18:	4c f5       	brge	.+82     	; 0x1c6c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e2       	ldi	r20, 0x20	; 32
    1c28:	51 e4       	ldi	r21, 0x41	; 65
    1c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	bc 01       	movw	r22, r24
    1c34:	cd 01       	movw	r24, r26
    1c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	9e 83       	std	Y+6, r25	; 0x06
    1c40:	8d 83       	std	Y+5, r24	; 0x05
    1c42:	0f c0       	rjmp	.+30     	; 0x1c62 <LCD_displayCharacter+0x39a>
    1c44:	89 e1       	ldi	r24, 0x19	; 25
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	9c 83       	std	Y+4, r25	; 0x04
    1c4a:	8b 83       	std	Y+3, r24	; 0x03
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	f1 f7       	brne	.-4      	; 0x1c50 <LCD_displayCharacter+0x388>
    1c54:	9c 83       	std	Y+4, r25	; 0x04
    1c56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c58:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	9e 81       	ldd	r25, Y+6	; 0x06
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	69 f7       	brne	.-38     	; 0x1c44 <LCD_displayCharacter+0x37c>
    1c6a:	14 c0       	rjmp	.+40     	; 0x1c94 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6e:	78 85       	ldd	r23, Y+8	; 0x08
    1c70:	89 85       	ldd	r24, Y+9	; 0x09
    1c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
    1c80:	8d 81       	ldd	r24, Y+5	; 0x05
    1c82:	9e 81       	ldd	r25, Y+6	; 0x06
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <LCD_displayCharacter+0x3c4>
    1c90:	9a 83       	std	Y+2, r25	; 0x02
    1c92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1c94:	e9 96       	adiw	r28, 0x39	; 57
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <LCD_displayString+0x6>
    1cac:	0f 92       	push	r0
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	9b 83       	std	Y+3, r25	; 0x03
    1cb4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1cb6:	19 82       	std	Y+1, r1	; 0x01
    1cb8:	0e c0       	rjmp	.+28     	; 0x1cd6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	e2 0f       	add	r30, r18
    1cc8:	f3 1f       	adc	r31, r19
    1cca:	80 81       	ld	r24, Z
    1ccc:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <LCD_displayCharacter>
		i++;
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	8f 5f       	subi	r24, 0xFF	; 255
    1cd4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	e2 0f       	add	r30, r18
    1ce4:	f3 1f       	adc	r31, r19
    1ce6:	80 81       	ld	r24, Z
    1ce8:	88 23       	and	r24, r24
    1cea:	39 f7       	brne	.-50     	; 0x1cba <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <LCD_moveCursor+0x6>
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <LCD_moveCursor+0x8>
    1d00:	0f 92       	push	r0
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	8a 83       	std	Y+2, r24	; 0x02
    1d08:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	3d 83       	std	Y+5, r19	; 0x05
    1d12:	2c 83       	std	Y+4, r18	; 0x04
    1d14:	8c 81       	ldd	r24, Y+4	; 0x04
    1d16:	9d 81       	ldd	r25, Y+5	; 0x05
    1d18:	81 30       	cpi	r24, 0x01	; 1
    1d1a:	91 05       	cpc	r25, r1
    1d1c:	c1 f0       	breq	.+48     	; 0x1d4e <LCD_moveCursor+0x56>
    1d1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d20:	3d 81       	ldd	r19, Y+5	; 0x05
    1d22:	22 30       	cpi	r18, 0x02	; 2
    1d24:	31 05       	cpc	r19, r1
    1d26:	2c f4       	brge	.+10     	; 0x1d32 <LCD_moveCursor+0x3a>
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	61 f0       	breq	.+24     	; 0x1d48 <LCD_moveCursor+0x50>
    1d30:	19 c0       	rjmp	.+50     	; 0x1d64 <LCD_moveCursor+0x6c>
    1d32:	2c 81       	ldd	r18, Y+4	; 0x04
    1d34:	3d 81       	ldd	r19, Y+5	; 0x05
    1d36:	22 30       	cpi	r18, 0x02	; 2
    1d38:	31 05       	cpc	r19, r1
    1d3a:	69 f0       	breq	.+26     	; 0x1d56 <LCD_moveCursor+0x5e>
    1d3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d40:	83 30       	cpi	r24, 0x03	; 3
    1d42:	91 05       	cpc	r25, r1
    1d44:	61 f0       	breq	.+24     	; 0x1d5e <LCD_moveCursor+0x66>
    1d46:	0e c0       	rjmp	.+28     	; 0x1d64 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	0b c0       	rjmp	.+22     	; 0x1d64 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	80 5c       	subi	r24, 0xC0	; 192
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	07 c0       	rjmp	.+14     	; 0x1d64 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	80 5f       	subi	r24, 0xF0	; 240
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	03 c0       	rjmp	.+6      	; 0x1d64 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	80 5b       	subi	r24, 0xB0	; 176
    1d62:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	80 68       	ori	r24, 0x80	; 128
    1d68:	0e 94 75 0a 	call	0x14ea	; 0x14ea <LCD_sendCommand>
}
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <LCD_displayStringRowColumn+0x6>
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <LCD_displayStringRowColumn+0x8>
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	6a 83       	std	Y+2, r22	; 0x02
    1d8c:	5c 83       	std	Y+4, r21	; 0x04
    1d8e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	6a 81       	ldd	r22, Y+2	; 0x02
    1d94:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>
}
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	62 97       	sbiw	r28, 0x12	; 18
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	9a 8b       	std	Y+18, r25	; 0x12
    1dc4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1dc6:	89 89       	ldd	r24, Y+17	; 0x11
    1dc8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dca:	9e 01       	movw	r18, r28
    1dcc:	2f 5f       	subi	r18, 0xFF	; 255
    1dce:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd0:	b9 01       	movw	r22, r18
    1dd2:	4a e0       	ldi	r20, 0x0A	; 10
    1dd4:	50 e0       	ldi	r21, 0x00	; 0
    1dd6:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <itoa>
   LCD_displayString(buff); /* Display the string */
    1dda:	ce 01       	movw	r24, r28
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>
}
    1de2:	62 96       	adiw	r28, 0x12	; 18
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	de bf       	out	0x3e, r29	; 62
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	cd bf       	out	0x3d, r28	; 61
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	0e 94 75 0a 	call	0x14ea	; 0x14ea <LCD_sendCommand>
}
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <Bin_to_dec>:

#include "Bin_to_dec.h"


uint16 Bin_to_dec(uint16 num)
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	28 97       	sbiw	r28, 0x08	; 8
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	98 87       	std	Y+8, r25	; 0x08
    1e1e:	8f 83       	std	Y+7, r24	; 0x07
	  int decimal_num = 0, base = 1, rem;
    1e20:	1e 82       	std	Y+6, r1	; 0x06
    1e22:	1d 82       	std	Y+5, r1	; 0x05
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	9c 83       	std	Y+4, r25	; 0x04
    1e2a:	8b 83       	std	Y+3, r24	; 0x03
    1e2c:	2b c0       	rjmp	.+86     	; 0x1e84 <Bin_to_dec+0x7c>

	    while ( num > 0)
	    {
	        rem = num % 10; /* divide the binary number by 10 and store the remainder in rem variable. */
    1e2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e30:	98 85       	ldd	r25, Y+8	; 0x08
    1e32:	2a e0       	ldi	r18, 0x0A	; 10
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	b9 01       	movw	r22, r18
    1e38:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <__udivmodhi4>
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
	        decimal_num = decimal_num + rem * base;
    1e40:	29 81       	ldd	r18, Y+1	; 0x01
    1e42:	3a 81       	ldd	r19, Y+2	; 0x02
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	a9 01       	movw	r20, r18
    1e4a:	48 9f       	mul	r20, r24
    1e4c:	90 01       	movw	r18, r0
    1e4e:	49 9f       	mul	r20, r25
    1e50:	30 0d       	add	r19, r0
    1e52:	58 9f       	mul	r21, r24
    1e54:	30 0d       	add	r19, r0
    1e56:	11 24       	eor	r1, r1
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	82 0f       	add	r24, r18
    1e5e:	93 1f       	adc	r25, r19
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	8d 83       	std	Y+5, r24	; 0x05
	        num = num / 10; // divide the number with quotient
    1e64:	8f 81       	ldd	r24, Y+7	; 0x07
    1e66:	98 85       	ldd	r25, Y+8	; 0x08
    1e68:	2a e0       	ldi	r18, 0x0A	; 10
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	b9 01       	movw	r22, r18
    1e6e:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <__udivmodhi4>
    1e72:	cb 01       	movw	r24, r22
    1e74:	98 87       	std	Y+8, r25	; 0x08
    1e76:	8f 83       	std	Y+7, r24	; 0x07
	        base = base * 2;
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	9c 83       	std	Y+4, r25	; 0x04
    1e82:	8b 83       	std	Y+3, r24	; 0x03

uint16 Bin_to_dec(uint16 num)
{
	  int decimal_num = 0, base = 1, rem;

	    while ( num > 0)
    1e84:	8f 81       	ldd	r24, Y+7	; 0x07
    1e86:	98 85       	ldd	r25, Y+8	; 0x08
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	89 f6       	brne	.-94     	; 0x1e2e <Bin_to_dec+0x26>
	        decimal_num = decimal_num + rem * base;
	        num = num / 10; // divide the number with quotient
	        base = base * 2;
	    }

	    return decimal_num;
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06

}
    1e90:	28 96       	adiw	r28, 0x08	; 8
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <Bin_to_hex>:
 *******************************************************************************/

#include "Bin_to_hex.h"

void Bin_to_hex(uint16 binnum)
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	29 97       	sbiw	r28, 0x09	; 9
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	de bf       	out	0x3e, r29	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	cd bf       	out	0x3d, r28	; 61
    1eb6:	99 87       	std	Y+9, r25	; 0x09
    1eb8:	88 87       	std	Y+8, r24	; 0x08

	 uint16 mul=1, count=1, rem;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9f 83       	std	Y+7, r25	; 0x07
    1ec0:	8e 83       	std	Y+6, r24	; 0x06
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9d 83       	std	Y+5, r25	; 0x05
    1ec8:	8c 83       	std	Y+4, r24	; 0x04
	 index_of_hex_number=0;
    1eca:	10 92 b2 01 	sts	0x01B2, r1
    1ece:	67 c0       	rjmp	.+206    	; 0x1f9e <Bin_to_hex+0xfc>
	    char hexnum;

	    while(binnum!=0)
	    {
	        rem = binnum%10;
    1ed0:	88 85       	ldd	r24, Y+8	; 0x08
    1ed2:	99 85       	ldd	r25, Y+9	; 0x09
    1ed4:	2a e0       	ldi	r18, 0x0A	; 10
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	b9 01       	movw	r22, r18
    1eda:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <__udivmodhi4>
    1ede:	9b 83       	std	Y+3, r25	; 0x03
    1ee0:	8a 83       	std	Y+2, r24	; 0x02
	        hexnum = hexnum + (rem*mul);
    1ee2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ee4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ee6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eea:	ac 01       	movw	r20, r24
    1eec:	24 9f       	mul	r18, r20
    1eee:	c0 01       	movw	r24, r0
    1ef0:	25 9f       	mul	r18, r21
    1ef2:	90 0d       	add	r25, r0
    1ef4:	34 9f       	mul	r19, r20
    1ef6:	90 0d       	add	r25, r0
    1ef8:	11 24       	eor	r1, r1
    1efa:	98 2f       	mov	r25, r24
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	89 0f       	add	r24, r25
    1f00:	89 83       	std	Y+1, r24	; 0x01
	        if(count%4==0)
    1f02:	8c 81       	ldd	r24, Y+4	; 0x04
    1f04:	9d 81       	ldd	r25, Y+5	; 0x05
    1f06:	83 70       	andi	r24, 0x03	; 3
    1f08:	90 70       	andi	r25, 0x00	; 0
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	99 f5       	brne	.+102    	; 0x1f74 <Bin_to_hex+0xd2>
	        {
	            if(hexnum<10)
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	8a 30       	cpi	r24, 0x0A	; 10
    1f12:	80 f4       	brcc	.+32     	; 0x1f34 <Bin_to_hex+0x92>
	                hex[index_of_hex_number] = hexnum;
    1f14:	80 91 b2 01 	lds	r24, 0x01B2
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	48 2f       	mov	r20, r24
    1f20:	50 e0       	ldi	r21, 0x00	; 0
    1f22:	c9 01       	movw	r24, r18
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	fc 01       	movw	r30, r24
    1f2a:	ed 54       	subi	r30, 0x4D	; 77
    1f2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f2e:	51 83       	std	Z+1, r21	; 0x01
    1f30:	40 83       	st	Z, r20
    1f32:	11 c0       	rjmp	.+34     	; 0x1f56 <Bin_to_hex+0xb4>
	            else
	                hex[index_of_hex_number] = hexnum+55;
    1f34:	80 91 b2 01 	lds	r24, 0x01B2
    1f38:	48 2f       	mov	r20, r24
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	88 2f       	mov	r24, r24
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	c7 96       	adiw	r24, 0x37	; 55
    1f44:	9c 01       	movw	r18, r24
    1f46:	ca 01       	movw	r24, r20
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	ed 54       	subi	r30, 0x4D	; 77
    1f50:	fe 4f       	sbci	r31, 0xFE	; 254
    1f52:	31 83       	std	Z+1, r19	; 0x01
    1f54:	20 83       	st	Z, r18
	            mul = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9f 83       	std	Y+7, r25	; 0x07
    1f5c:	8e 83       	std	Y+6, r24	; 0x06
	            hexnum = 0;
    1f5e:	19 82       	std	Y+1, r1	; 0x01
	            count = 1;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9d 83       	std	Y+5, r25	; 0x05
    1f66:	8c 83       	std	Y+4, r24	; 0x04
	            index_of_hex_number++;
    1f68:	80 91 b2 01 	lds	r24, 0x01B2
    1f6c:	8f 5f       	subi	r24, 0xFF	; 255
    1f6e:	80 93 b2 01 	sts	0x01B2, r24
    1f72:	0b c0       	rjmp	.+22     	; 0x1f8a <Bin_to_hex+0xe8>
	        }
	        else
	        {
	            mul = mul*2;
    1f74:	8e 81       	ldd	r24, Y+6	; 0x06
    1f76:	9f 81       	ldd	r25, Y+7	; 0x07
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	9f 83       	std	Y+7, r25	; 0x07
    1f7e:	8e 83       	std	Y+6, r24	; 0x06
	            count++;
    1f80:	8c 81       	ldd	r24, Y+4	; 0x04
    1f82:	9d 81       	ldd	r25, Y+5	; 0x05
    1f84:	01 96       	adiw	r24, 0x01	; 1
    1f86:	9d 83       	std	Y+5, r25	; 0x05
    1f88:	8c 83       	std	Y+4, r24	; 0x04
	        }
	        binnum = binnum/10;
    1f8a:	88 85       	ldd	r24, Y+8	; 0x08
    1f8c:	99 85       	ldd	r25, Y+9	; 0x09
    1f8e:	2a e0       	ldi	r18, 0x0A	; 10
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	b9 01       	movw	r22, r18
    1f94:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <__udivmodhi4>
    1f98:	cb 01       	movw	r24, r22
    1f9a:	99 87       	std	Y+9, r25	; 0x09
    1f9c:	88 87       	std	Y+8, r24	; 0x08

	 uint16 mul=1, count=1, rem;
	 index_of_hex_number=0;
	    char hexnum;

	    while(binnum!=0)
    1f9e:	88 85       	ldd	r24, Y+8	; 0x08
    1fa0:	99 85       	ldd	r25, Y+9	; 0x09
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <Bin_to_hex+0x106>
    1fa6:	94 cf       	rjmp	.-216    	; 0x1ed0 <Bin_to_hex+0x2e>
	            mul = mul*2;
	            count++;
	        }
	        binnum = binnum/10;
	    }
	    if(count!=1){
    1fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1faa:	9d 81       	ldd	r25, Y+5	; 0x05
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	91 05       	cpc	r25, r1
    1fb0:	79 f0       	breq	.+30     	; 0x1fd0 <Bin_to_hex+0x12e>
	        hex[index_of_hex_number] = hexnum;
    1fb2:	80 91 b2 01 	lds	r24, 0x01B2
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	48 2f       	mov	r20, r24
    1fbe:	50 e0       	ldi	r21, 0x00	; 0
    1fc0:	c9 01       	movw	r24, r18
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	ed 54       	subi	r30, 0x4D	; 77
    1fca:	fe 4f       	sbci	r31, 0xFE	; 254
    1fcc:	51 83       	std	Z+1, r21	; 0x01
    1fce:	40 83       	st	Z, r20
	    }
	    if(count==1){
    1fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	29 f4       	brne	.+10     	; 0x1fe4 <Bin_to_hex+0x142>
	        index_of_hex_number--;
    1fda:	80 91 b2 01 	lds	r24, 0x01B2
    1fde:	81 50       	subi	r24, 0x01	; 1
    1fe0:	80 93 b2 01 	sts	0x01B2, r24
	    }

}
    1fe4:	29 96       	adiw	r28, 0x09	; 9
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <Bin_to_oct>:
 *******************************************************************************/

#include "Bin_to_oct.h"

uint16 Bin_to_oct(uint16 binaryNumber)
{
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	28 97       	sbiw	r28, 0x08	; 8
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	98 87       	std	Y+8, r25	; 0x08
    200c:	8f 83       	std	Y+7, r24	; 0x07
	uint16 octalNumber = 0;
    200e:	1e 82       	std	Y+6, r1	; 0x06
    2010:	1d 82       	std	Y+5, r1	; 0x05
	uint16 i = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	9c 83       	std	Y+4, r25	; 0x04
    2018:	8b 83       	std	Y+3, r24	; 0x03
	uint16 rem = 0;
    201a:	1a 82       	std	Y+2, r1	; 0x02
    201c:	19 82       	std	Y+1, r1	; 0x01
    201e:	2b c0       	rjmp	.+86     	; 0x2076 <Bin_to_oct+0x80>



    while (binaryNumber != 0) {
        rem = binaryNumber % 10;
    2020:	8f 81       	ldd	r24, Y+7	; 0x07
    2022:	98 85       	ldd	r25, Y+8	; 0x08
    2024:	2a e0       	ldi	r18, 0x0A	; 10
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	b9 01       	movw	r22, r18
    202a:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <__udivmodhi4>
    202e:	9a 83       	std	Y+2, r25	; 0x02
    2030:	89 83       	std	Y+1, r24	; 0x01
        octalNumber = octalNumber + rem * i;
    2032:	29 81       	ldd	r18, Y+1	; 0x01
    2034:	3a 81       	ldd	r19, Y+2	; 0x02
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	a9 01       	movw	r20, r18
    203c:	48 9f       	mul	r20, r24
    203e:	90 01       	movw	r18, r0
    2040:	49 9f       	mul	r20, r25
    2042:	30 0d       	add	r19, r0
    2044:	58 9f       	mul	r21, r24
    2046:	30 0d       	add	r19, r0
    2048:	11 24       	eor	r1, r1
    204a:	8d 81       	ldd	r24, Y+5	; 0x05
    204c:	9e 81       	ldd	r25, Y+6	; 0x06
    204e:	82 0f       	add	r24, r18
    2050:	93 1f       	adc	r25, r19
    2052:	9e 83       	std	Y+6, r25	; 0x06
    2054:	8d 83       	std	Y+5, r24	; 0x05

        i = i * 2;
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	9c 81       	ldd	r25, Y+4	; 0x04
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	9c 83       	std	Y+4, r25	; 0x04
    2060:	8b 83       	std	Y+3, r24	; 0x03
        binaryNumber = binaryNumber / 10;
    2062:	8f 81       	ldd	r24, Y+7	; 0x07
    2064:	98 85       	ldd	r25, Y+8	; 0x08
    2066:	2a e0       	ldi	r18, 0x0A	; 10
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	b9 01       	movw	r22, r18
    206c:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <__udivmodhi4>
    2070:	cb 01       	movw	r24, r22
    2072:	98 87       	std	Y+8, r25	; 0x08
    2074:	8f 83       	std	Y+7, r24	; 0x07
	uint16 i = 1;
	uint16 rem = 0;



    while (binaryNumber != 0) {
    2076:	8f 81       	ldd	r24, Y+7	; 0x07
    2078:	98 85       	ldd	r25, Y+8	; 0x08
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	89 f6       	brne	.-94     	; 0x2020 <Bin_to_oct+0x2a>

        i = i * 2;
        binaryNumber = binaryNumber / 10;
    }

    return octalNumber;
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	9e 81       	ldd	r25, Y+6	; 0x06
}
    2082:	28 96       	adiw	r28, 0x08	; 8
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <Dec_to_Hex>:
 *******************************************************************************/

#include "Dec_to_Hex.h"

void Dec_to_Hex(uint16 number)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	00 d0       	rcall	.+0      	; 0x209a <Dec_to_Hex+0x6>
    209a:	00 d0       	rcall	.+0      	; 0x209c <Dec_to_Hex+0x8>
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
	 index_of_hex_number=0;
    20a4:	10 92 b2 01 	sts	0x01B2, r1
    20a8:	a5 c0       	rjmp	.+330    	; 0x21f4 <Dec_to_Hex+0x160>
//    uint8 j=0;
//    uint16 hex[no_of_bits]; /*bcoz it contains characters A to F*/
//    uint16 hex_reversed[no_of_bits];

    while (number > 0) {
        switch (number % 16) {
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	9a 81       	ldd	r25, Y+2	; 0x02
    20ae:	9c 01       	movw	r18, r24
    20b0:	2f 70       	andi	r18, 0x0F	; 15
    20b2:	30 70       	andi	r19, 0x00	; 0
    20b4:	3c 83       	std	Y+4, r19	; 0x04
    20b6:	2b 83       	std	Y+3, r18	; 0x03
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	9c 81       	ldd	r25, Y+4	; 0x04
    20bc:	8c 30       	cpi	r24, 0x0C	; 12
    20be:	91 05       	cpc	r25, r1
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <Dec_to_Hex+0x30>
    20c2:	3e c0       	rjmp	.+124    	; 0x2140 <Dec_to_Hex+0xac>
    20c4:	2b 81       	ldd	r18, Y+3	; 0x03
    20c6:	3c 81       	ldd	r19, Y+4	; 0x04
    20c8:	2d 30       	cpi	r18, 0x0D	; 13
    20ca:	31 05       	cpc	r19, r1
    20cc:	58 f4       	brcc	.+22     	; 0x20e4 <Dec_to_Hex+0x50>
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	8a 30       	cpi	r24, 0x0A	; 10
    20d4:	91 05       	cpc	r25, r1
    20d6:	c1 f0       	breq	.+48     	; 0x2108 <Dec_to_Hex+0x74>
    20d8:	2b 81       	ldd	r18, Y+3	; 0x03
    20da:	3c 81       	ldd	r19, Y+4	; 0x04
    20dc:	2b 30       	cpi	r18, 0x0B	; 11
    20de:	31 05       	cpc	r19, r1
    20e0:	09 f1       	breq	.+66     	; 0x2124 <Dec_to_Hex+0x90>
    20e2:	66 c0       	rjmp	.+204    	; 0x21b0 <Dec_to_Hex+0x11c>
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	8e 30       	cpi	r24, 0x0E	; 14
    20ea:	91 05       	cpc	r25, r1
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <Dec_to_Hex+0x5c>
    20ee:	44 c0       	rjmp	.+136    	; 0x2178 <Dec_to_Hex+0xe4>
    20f0:	2b 81       	ldd	r18, Y+3	; 0x03
    20f2:	3c 81       	ldd	r19, Y+4	; 0x04
    20f4:	2e 30       	cpi	r18, 0x0E	; 14
    20f6:	31 05       	cpc	r19, r1
    20f8:	88 f1       	brcs	.+98     	; 0x215c <Dec_to_Hex+0xc8>
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	8f 30       	cpi	r24, 0x0F	; 15
    2100:	91 05       	cpc	r25, r1
    2102:	09 f4       	brne	.+2      	; 0x2106 <Dec_to_Hex+0x72>
    2104:	47 c0       	rjmp	.+142    	; 0x2194 <Dec_to_Hex+0x100>
    2106:	54 c0       	rjmp	.+168    	; 0x21b0 <Dec_to_Hex+0x11c>
        case 10:
            hex[index_of_hex_number] = 'A';
    2108:	80 91 b2 01 	lds	r24, 0x01B2
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	fc 01       	movw	r30, r24
    2116:	ed 54       	subi	r30, 0x4D	; 77
    2118:	fe 4f       	sbci	r31, 0xFE	; 254
    211a:	81 e4       	ldi	r24, 0x41	; 65
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	91 83       	std	Z+1, r25	; 0x01
    2120:	80 83       	st	Z, r24
    2122:	59 c0       	rjmp	.+178    	; 0x21d6 <Dec_to_Hex+0x142>
            break;
        case 11:
            hex[index_of_hex_number] = 'B';
    2124:	80 91 b2 01 	lds	r24, 0x01B2
    2128:	88 2f       	mov	r24, r24
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	fc 01       	movw	r30, r24
    2132:	ed 54       	subi	r30, 0x4D	; 77
    2134:	fe 4f       	sbci	r31, 0xFE	; 254
    2136:	82 e4       	ldi	r24, 0x42	; 66
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	80 83       	st	Z, r24
    213e:	4b c0       	rjmp	.+150    	; 0x21d6 <Dec_to_Hex+0x142>
            break;
        case 12:
            hex[index_of_hex_number] = 'C';
    2140:	80 91 b2 01 	lds	r24, 0x01B2
    2144:	88 2f       	mov	r24, r24
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	fc 01       	movw	r30, r24
    214e:	ed 54       	subi	r30, 0x4D	; 77
    2150:	fe 4f       	sbci	r31, 0xFE	; 254
    2152:	83 e4       	ldi	r24, 0x43	; 67
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	80 83       	st	Z, r24
    215a:	3d c0       	rjmp	.+122    	; 0x21d6 <Dec_to_Hex+0x142>
            break;
        case 13:
            hex[index_of_hex_number] = 'D';
    215c:	80 91 b2 01 	lds	r24, 0x01B2
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	fc 01       	movw	r30, r24
    216a:	ed 54       	subi	r30, 0x4D	; 77
    216c:	fe 4f       	sbci	r31, 0xFE	; 254
    216e:	84 e4       	ldi	r24, 0x44	; 68
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	80 83       	st	Z, r24
    2176:	2f c0       	rjmp	.+94     	; 0x21d6 <Dec_to_Hex+0x142>
            break;
        case 14:
            hex[index_of_hex_number] = 'E';
    2178:	80 91 b2 01 	lds	r24, 0x01B2
    217c:	88 2f       	mov	r24, r24
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	fc 01       	movw	r30, r24
    2186:	ed 54       	subi	r30, 0x4D	; 77
    2188:	fe 4f       	sbci	r31, 0xFE	; 254
    218a:	85 e4       	ldi	r24, 0x45	; 69
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	80 83       	st	Z, r24
    2192:	21 c0       	rjmp	.+66     	; 0x21d6 <Dec_to_Hex+0x142>
            break;
        case 15:
            hex[index_of_hex_number] = 'F';
    2194:	80 91 b2 01 	lds	r24, 0x01B2
    2198:	88 2f       	mov	r24, r24
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	fc 01       	movw	r30, r24
    21a2:	ed 54       	subi	r30, 0x4D	; 77
    21a4:	fe 4f       	sbci	r31, 0xFE	; 254
    21a6:	86 e4       	ldi	r24, 0x46	; 70
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	91 83       	std	Z+1, r25	; 0x01
    21ac:	80 83       	st	Z, r24
    21ae:	13 c0       	rjmp	.+38     	; 0x21d6 <Dec_to_Hex+0x142>
            break;
        default:
            hex[index_of_hex_number] = (number % 16) + 0x30; /*converted into char value*/
    21b0:	80 91 b2 01 	lds	r24, 0x01B2
    21b4:	48 2f       	mov	r20, r24
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	9a 81       	ldd	r25, Y+2	; 0x02
    21bc:	8f 70       	andi	r24, 0x0F	; 15
    21be:	90 70       	andi	r25, 0x00	; 0
    21c0:	9c 01       	movw	r18, r24
    21c2:	20 5d       	subi	r18, 0xD0	; 208
    21c4:	3f 4f       	sbci	r19, 0xFF	; 255
    21c6:	ca 01       	movw	r24, r20
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	fc 01       	movw	r30, r24
    21ce:	ed 54       	subi	r30, 0x4D	; 77
    21d0:	fe 4f       	sbci	r31, 0xFE	; 254
    21d2:	31 83       	std	Z+1, r19	; 0x01
    21d4:	20 83       	st	Z, r18
        }
        number = number / 16;
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	92 95       	swap	r25
    21dc:	82 95       	swap	r24
    21de:	8f 70       	andi	r24, 0x0F	; 15
    21e0:	89 27       	eor	r24, r25
    21e2:	9f 70       	andi	r25, 0x0F	; 15
    21e4:	89 27       	eor	r24, r25
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
        index_of_hex_number++;
    21ea:	80 91 b2 01 	lds	r24, 0x01B2
    21ee:	8f 5f       	subi	r24, 0xFF	; 255
    21f0:	80 93 b2 01 	sts	0x01B2, r24
	 index_of_hex_number=0;
//    uint8 j=0;
//    uint16 hex[no_of_bits]; /*bcoz it contains characters A to F*/
//    uint16 hex_reversed[no_of_bits];

    while (number > 0) {
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	9a 81       	ldd	r25, Y+2	; 0x02
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	09 f0       	breq	.+2      	; 0x21fe <Dec_to_Hex+0x16a>
    21fc:	56 cf       	rjmp	.-340    	; 0x20aa <Dec_to_Hex+0x16>
//    {
//    	hex_reversed[j] = hex[i];
//    	j++;
//    }
//    return (uint16)hex_reversed;
}
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <Dec_to_bin>:
 *******************************************************************************/

#include"Dec_to_bin.h"

void Dec_to_bin(uint16 number)
{
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	00 d0       	rcall	.+0      	; 0x2212 <Dec_to_bin+0x6>
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	9a 83       	std	Y+2, r25	; 0x02
    2218:	89 83       	std	Y+1, r24	; 0x01
	index_of_binary_num=0;
    221a:	10 92 f3 01 	sts	0x01F3, r1
    221e:	1c c0       	rjmp	.+56     	; 0x2258 <Dec_to_bin+0x4c>


	while(number>0)
	{
		bin[index_of_binary_num]=number%2;
    2220:	80 91 f3 01 	lds	r24, 0x01F3
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	9a 81       	ldd	r25, Y+2	; 0x02
    222c:	ac 01       	movw	r20, r24
    222e:	41 70       	andi	r20, 0x01	; 1
    2230:	50 70       	andi	r21, 0x00	; 0
    2232:	c9 01       	movw	r24, r18
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	fc 01       	movw	r30, r24
    223a:	ed 52       	subi	r30, 0x2D	; 45
    223c:	fe 4f       	sbci	r31, 0xFE	; 254
    223e:	51 83       	std	Z+1, r21	; 0x01
    2240:	40 83       	st	Z, r20
		number=number/2;
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	96 95       	lsr	r25
    2248:	87 95       	ror	r24
    224a:	9a 83       	std	Y+2, r25	; 0x02
    224c:	89 83       	std	Y+1, r24	; 0x01
		index_of_binary_num++;
    224e:	80 91 f3 01 	lds	r24, 0x01F3
    2252:	8f 5f       	subi	r24, 0xFF	; 255
    2254:	80 93 f3 01 	sts	0x01F3, r24
void Dec_to_bin(uint16 number)
{
	index_of_binary_num=0;


	while(number>0)
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	9a 81       	ldd	r25, Y+2	; 0x02
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	01 f7       	brne	.-64     	; 0x2220 <Dec_to_bin+0x14>
		bin[index_of_binary_num]=number%2;
		number=number/2;
		index_of_binary_num++;
	}

}
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <Dec_to_oct>:
 *******************************************************************************/

#include "Dec_to_oct.h"

void Dec_to_oct(uint16 number)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	00 d0       	rcall	.+0      	; 0x2270 <Dec_to_oct+0x6>
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	9a 83       	std	Y+2, r25	; 0x02
    2276:	89 83       	std	Y+1, r24	; 0x01
	index_of_octal_number=0;
    2278:	10 92 14 02 	sts	0x0214, r1
    227c:	20 c0       	rjmp	.+64     	; 0x22be <Dec_to_oct+0x54>

    while (number > 0) {
    	Octal_number[index_of_octal_number] = number % 8;
    227e:	80 91 14 02 	lds	r24, 0x0214
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	9a 81       	ldd	r25, Y+2	; 0x02
    228a:	ac 01       	movw	r20, r24
    228c:	47 70       	andi	r20, 0x07	; 7
    228e:	50 70       	andi	r21, 0x00	; 0
    2290:	c9 01       	movw	r24, r18
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	fc 01       	movw	r30, r24
    2298:	ec 50       	subi	r30, 0x0C	; 12
    229a:	fe 4f       	sbci	r31, 0xFE	; 254
    229c:	51 83       	std	Z+1, r21	; 0x01
    229e:	40 83       	st	Z, r20
        number = number / 8;
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	9a 81       	ldd	r25, Y+2	; 0x02
    22a4:	96 95       	lsr	r25
    22a6:	87 95       	ror	r24
    22a8:	96 95       	lsr	r25
    22aa:	87 95       	ror	r24
    22ac:	96 95       	lsr	r25
    22ae:	87 95       	ror	r24
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
        index_of_octal_number++;
    22b4:	80 91 14 02 	lds	r24, 0x0214
    22b8:	8f 5f       	subi	r24, 0xFF	; 255
    22ba:	80 93 14 02 	sts	0x0214, r24

void Dec_to_oct(uint16 number)
{
	index_of_octal_number=0;

    while (number > 0) {
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	9a 81       	ldd	r25, Y+2	; 0x02
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	e1 f6       	brne	.-72     	; 0x227e <Dec_to_oct+0x14>
        number = number / 8;
        index_of_octal_number++;
    }


}
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <HEX_TO_DEC_Trial>:
 *
 *******************************************************************************/

#include "Hex_To_Dec_Trial.h"

uint16 HEX_TO_DEC_Trial(void){
    22d0:	ef 92       	push	r14
    22d2:	ff 92       	push	r15
    22d4:	0f 93       	push	r16
    22d6:	1f 93       	push	r17
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	e9 97       	sbiw	r28, 0x39	; 57
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61

	    uint16 i = 0, val, len;
    22ec:	1e 86       	std	Y+14, r1	; 0x0e
    22ee:	1d 86       	std	Y+13, r1	; 0x0d

	   long long decimal = 0;
    22f0:	19 82       	std	Y+1, r1	; 0x01
    22f2:	1a 82       	std	Y+2, r1	; 0x02
    22f4:	1b 82       	std	Y+3, r1	; 0x03
    22f6:	1c 82       	std	Y+4, r1	; 0x04
    22f8:	1d 82       	std	Y+5, r1	; 0x05
    22fa:	1e 82       	std	Y+6, r1	; 0x06
    22fc:	1f 82       	std	Y+7, r1	; 0x07
    22fe:	18 86       	std	Y+8, r1	; 0x08

	    // Find the length of total number of hex digit
	    // finding the length of hexa decimal number
	    len = index_of_hex_number;
    2300:	80 91 b2 01 	lds	r24, 0x01B2
    2304:	88 2f       	mov	r24, r24
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9a 87       	std	Y+10, r25	; 0x0a
    230a:	89 87       	std	Y+9, r24	; 0x09
	    len--;
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	9a 87       	std	Y+10, r25	; 0x0a
    2314:	89 87       	std	Y+9, r24	; 0x09

	    // for loop iterates the hexa decimal number digits
	    for (i = 0; hex[i] != '='; i++) {
    2316:	1e 86       	std	Y+14, r1	; 0x0e
    2318:	1d 86       	std	Y+13, r1	; 0x0d
    231a:	69 c1       	rjmp	.+722    	; 0x25ee <HEX_TO_DEC_Trial+0x31e>

	        // finding the equivalent decimal digit for each
	        // hexa decimal digit
	        if (hex[i] >= 0
    231c:	8d 85       	ldd	r24, Y+13	; 0x0d
    231e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	fc 01       	movw	r30, r24
    2326:	ed 54       	subi	r30, 0x4D	; 77
    2328:	fe 4f       	sbci	r31, 0xFE	; 254
    232a:	80 81       	ld	r24, Z
    232c:	91 81       	ldd	r25, Z+1	; 0x01
    232e:	8a 30       	cpi	r24, 0x0A	; 10
    2330:	91 05       	cpc	r25, r1
    2332:	60 f4       	brcc	.+24     	; 0x234c <HEX_TO_DEC_Trial+0x7c>
	            && hex[i] <= 9) {
	            val = hex[i];
    2334:	8d 85       	ldd	r24, Y+13	; 0x0d
    2336:	9e 85       	ldd	r25, Y+14	; 0x0e
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	fc 01       	movw	r30, r24
    233e:	ed 54       	subi	r30, 0x4D	; 77
    2340:	fe 4f       	sbci	r31, 0xFE	; 254
    2342:	80 81       	ld	r24, Z
    2344:	91 81       	ldd	r25, Z+1	; 0x01
    2346:	9c 87       	std	Y+12, r25	; 0x0c
    2348:	8b 87       	std	Y+11, r24	; 0x0b
    234a:	4a c0       	rjmp	.+148    	; 0x23e0 <HEX_TO_DEC_Trial+0x110>
	        }
	        else if (hex[i] >= 'a'
    234c:	8d 85       	ldd	r24, Y+13	; 0x0d
    234e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	fc 01       	movw	r30, r24
    2356:	ed 54       	subi	r30, 0x4D	; 77
    2358:	fe 4f       	sbci	r31, 0xFE	; 254
    235a:	80 81       	ld	r24, Z
    235c:	91 81       	ldd	r25, Z+1	; 0x01
    235e:	81 36       	cpi	r24, 0x61	; 97
    2360:	91 05       	cpc	r25, r1
    2362:	d0 f0       	brcs	.+52     	; 0x2398 <HEX_TO_DEC_Trial+0xc8>
    2364:	8d 85       	ldd	r24, Y+13	; 0x0d
    2366:	9e 85       	ldd	r25, Y+14	; 0x0e
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	fc 01       	movw	r30, r24
    236e:	ed 54       	subi	r30, 0x4D	; 77
    2370:	fe 4f       	sbci	r31, 0xFE	; 254
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	87 36       	cpi	r24, 0x67	; 103
    2378:	91 05       	cpc	r25, r1
    237a:	70 f4       	brcc	.+28     	; 0x2398 <HEX_TO_DEC_Trial+0xc8>
	                 && hex[i] <= 'f') {
	            val = hex[i] - 97 + 10;
    237c:	8d 85       	ldd	r24, Y+13	; 0x0d
    237e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	fc 01       	movw	r30, r24
    2386:	ed 54       	subi	r30, 0x4D	; 77
    2388:	fe 4f       	sbci	r31, 0xFE	; 254
    238a:	80 81       	ld	r24, Z
    238c:	91 81       	ldd	r25, Z+1	; 0x01
    238e:	87 55       	subi	r24, 0x57	; 87
    2390:	90 40       	sbci	r25, 0x00	; 0
    2392:	9c 87       	std	Y+12, r25	; 0x0c
    2394:	8b 87       	std	Y+11, r24	; 0x0b
    2396:	24 c0       	rjmp	.+72     	; 0x23e0 <HEX_TO_DEC_Trial+0x110>
	        }
	        else if (hex[i] >= 'A'
    2398:	8d 85       	ldd	r24, Y+13	; 0x0d
    239a:	9e 85       	ldd	r25, Y+14	; 0x0e
    239c:	88 0f       	add	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	fc 01       	movw	r30, r24
    23a2:	ed 54       	subi	r30, 0x4D	; 77
    23a4:	fe 4f       	sbci	r31, 0xFE	; 254
    23a6:	80 81       	ld	r24, Z
    23a8:	91 81       	ldd	r25, Z+1	; 0x01
    23aa:	81 34       	cpi	r24, 0x41	; 65
    23ac:	91 05       	cpc	r25, r1
    23ae:	c0 f0       	brcs	.+48     	; 0x23e0 <HEX_TO_DEC_Trial+0x110>
    23b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	fc 01       	movw	r30, r24
    23ba:	ed 54       	subi	r30, 0x4D	; 77
    23bc:	fe 4f       	sbci	r31, 0xFE	; 254
    23be:	80 81       	ld	r24, Z
    23c0:	91 81       	ldd	r25, Z+1	; 0x01
    23c2:	87 34       	cpi	r24, 0x47	; 71
    23c4:	91 05       	cpc	r25, r1
    23c6:	60 f4       	brcc	.+24     	; 0x23e0 <HEX_TO_DEC_Trial+0x110>
	                 && hex[i] <= 'F') {
	            val = hex[i] - 65 + 10;
    23c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	fc 01       	movw	r30, r24
    23d2:	ed 54       	subi	r30, 0x4D	; 77
    23d4:	fe 4f       	sbci	r31, 0xFE	; 254
    23d6:	80 81       	ld	r24, Z
    23d8:	91 81       	ldd	r25, Z+1	; 0x01
    23da:	c7 97       	sbiw	r24, 0x37	; 55
    23dc:	9c 87       	std	Y+12, r25	; 0x0c
    23de:	8b 87       	std	Y+11, r24	; 0x0b
	        }

	        decimal += val * Pow(16, len);
    23e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    23e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    23e4:	7c 01       	movw	r14, r24
    23e6:	00 e0       	ldi	r16, 0x00	; 0
    23e8:	10 e0       	ldi	r17, 0x00	; 0
    23ea:	29 85       	ldd	r18, Y+9	; 0x09
    23ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    23ee:	80 e1       	ldi	r24, 0x10	; 16
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	b9 01       	movw	r22, r18
    23f4:	0e 94 37 13 	call	0x266e	; 0x266e <Pow>
    23f8:	9b 01       	movw	r18, r22
    23fa:	ac 01       	movw	r20, r24
    23fc:	c8 01       	movw	r24, r16
    23fe:	b7 01       	movw	r22, r14
    2400:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__mulsi3>
    2404:	9b 01       	movw	r18, r22
    2406:	ac 01       	movw	r20, r24
    2408:	da 01       	movw	r26, r20
    240a:	c9 01       	movw	r24, r18
    240c:	bb 0f       	add	r27, r27
    240e:	88 0b       	sbc	r24, r24
    2410:	98 2f       	mov	r25, r24
    2412:	dc 01       	movw	r26, r24
    2414:	2f 87       	std	Y+15, r18	; 0x0f
    2416:	38 8b       	std	Y+16, r19	; 0x10
    2418:	49 8b       	std	Y+17, r20	; 0x11
    241a:	5a 8b       	std	Y+18, r21	; 0x12
    241c:	8b 8b       	std	Y+19, r24	; 0x13
    241e:	8c 8b       	std	Y+20, r24	; 0x14
    2420:	8d 8b       	std	Y+21, r24	; 0x15
    2422:	8e 8b       	std	Y+22, r24	; 0x16
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	8f 8b       	std	Y+23, r24	; 0x17
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	98 8f       	std	Y+24, r25	; 0x18
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	89 8f       	std	Y+25, r24	; 0x19
    2430:	9c 81       	ldd	r25, Y+4	; 0x04
    2432:	9a 8f       	std	Y+26, r25	; 0x1a
    2434:	8d 81       	ldd	r24, Y+5	; 0x05
    2436:	8b 8f       	std	Y+27, r24	; 0x1b
    2438:	9e 81       	ldd	r25, Y+6	; 0x06
    243a:	9c 8f       	std	Y+28, r25	; 0x1c
    243c:	8f 81       	ldd	r24, Y+7	; 0x07
    243e:	8d 8f       	std	Y+29, r24	; 0x1d
    2440:	98 85       	ldd	r25, Y+8	; 0x08
    2442:	9e 8f       	std	Y+30, r25	; 0x1e
    2444:	8f 89       	ldd	r24, Y+23	; 0x17
    2446:	9f 85       	ldd	r25, Y+15	; 0x0f
    2448:	89 0f       	add	r24, r25
    244a:	8f 8f       	std	Y+31, r24	; 0x1f
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	8f a3       	std	Y+39, r24	; 0x27
    2450:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2452:	8f 89       	ldd	r24, Y+23	; 0x17
    2454:	98 17       	cp	r25, r24
    2456:	08 f0       	brcs	.+2      	; 0x245a <HEX_TO_DEC_Trial+0x18a>
    2458:	1f a2       	std	Y+39, r1	; 0x27
    245a:	98 8d       	ldd	r25, Y+24	; 0x18
    245c:	88 89       	ldd	r24, Y+16	; 0x10
    245e:	98 0f       	add	r25, r24
    2460:	98 a3       	std	Y+32, r25	; 0x20
    2462:	91 e0       	ldi	r25, 0x01	; 1
    2464:	98 a7       	std	Y+40, r25	; 0x28
    2466:	88 a1       	ldd	r24, Y+32	; 0x20
    2468:	98 8d       	ldd	r25, Y+24	; 0x18
    246a:	89 17       	cp	r24, r25
    246c:	08 f0       	brcs	.+2      	; 0x2470 <HEX_TO_DEC_Trial+0x1a0>
    246e:	18 a6       	std	Y+40, r1	; 0x28
    2470:	8f a1       	ldd	r24, Y+39	; 0x27
    2472:	98 a1       	ldd	r25, Y+32	; 0x20
    2474:	89 0f       	add	r24, r25
    2476:	89 a7       	std	Y+41, r24	; 0x29
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	8a a7       	std	Y+42, r24	; 0x2a
    247c:	99 a5       	ldd	r25, Y+41	; 0x29
    247e:	88 a1       	ldd	r24, Y+32	; 0x20
    2480:	98 17       	cp	r25, r24
    2482:	08 f0       	brcs	.+2      	; 0x2486 <HEX_TO_DEC_Trial+0x1b6>
    2484:	1a a6       	std	Y+42, r1	; 0x2a
    2486:	98 a5       	ldd	r25, Y+40	; 0x28
    2488:	8a a5       	ldd	r24, Y+42	; 0x2a
    248a:	98 2b       	or	r25, r24
    248c:	98 a7       	std	Y+40, r25	; 0x28
    248e:	99 a5       	ldd	r25, Y+41	; 0x29
    2490:	98 a3       	std	Y+32, r25	; 0x20
    2492:	89 8d       	ldd	r24, Y+25	; 0x19
    2494:	99 89       	ldd	r25, Y+17	; 0x11
    2496:	89 0f       	add	r24, r25
    2498:	89 a3       	std	Y+33, r24	; 0x21
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	8b a7       	std	Y+43, r24	; 0x2b
    249e:	99 a1       	ldd	r25, Y+33	; 0x21
    24a0:	89 8d       	ldd	r24, Y+25	; 0x19
    24a2:	98 17       	cp	r25, r24
    24a4:	08 f0       	brcs	.+2      	; 0x24a8 <HEX_TO_DEC_Trial+0x1d8>
    24a6:	1b a6       	std	Y+43, r1	; 0x2b
    24a8:	98 a5       	ldd	r25, Y+40	; 0x28
    24aa:	89 a1       	ldd	r24, Y+33	; 0x21
    24ac:	98 0f       	add	r25, r24
    24ae:	9c a7       	std	Y+44, r25	; 0x2c
    24b0:	91 e0       	ldi	r25, 0x01	; 1
    24b2:	9d a7       	std	Y+45, r25	; 0x2d
    24b4:	8c a5       	ldd	r24, Y+44	; 0x2c
    24b6:	99 a1       	ldd	r25, Y+33	; 0x21
    24b8:	89 17       	cp	r24, r25
    24ba:	08 f0       	brcs	.+2      	; 0x24be <HEX_TO_DEC_Trial+0x1ee>
    24bc:	1d a6       	std	Y+45, r1	; 0x2d
    24be:	8b a5       	ldd	r24, Y+43	; 0x2b
    24c0:	9d a5       	ldd	r25, Y+45	; 0x2d
    24c2:	89 2b       	or	r24, r25
    24c4:	8b a7       	std	Y+43, r24	; 0x2b
    24c6:	8c a5       	ldd	r24, Y+44	; 0x2c
    24c8:	89 a3       	std	Y+33, r24	; 0x21
    24ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    24cc:	8a 89       	ldd	r24, Y+18	; 0x12
    24ce:	98 0f       	add	r25, r24
    24d0:	9a a3       	std	Y+34, r25	; 0x22
    24d2:	91 e0       	ldi	r25, 0x01	; 1
    24d4:	9e a7       	std	Y+46, r25	; 0x2e
    24d6:	8a a1       	ldd	r24, Y+34	; 0x22
    24d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    24da:	89 17       	cp	r24, r25
    24dc:	08 f0       	brcs	.+2      	; 0x24e0 <HEX_TO_DEC_Trial+0x210>
    24de:	1e a6       	std	Y+46, r1	; 0x2e
    24e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    24e2:	9a a1       	ldd	r25, Y+34	; 0x22
    24e4:	89 0f       	add	r24, r25
    24e6:	8f a7       	std	Y+47, r24	; 0x2f
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	88 ab       	std	Y+48, r24	; 0x30
    24ec:	9f a5       	ldd	r25, Y+47	; 0x2f
    24ee:	8a a1       	ldd	r24, Y+34	; 0x22
    24f0:	98 17       	cp	r25, r24
    24f2:	08 f0       	brcs	.+2      	; 0x24f6 <HEX_TO_DEC_Trial+0x226>
    24f4:	18 aa       	std	Y+48, r1	; 0x30
    24f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    24f8:	88 a9       	ldd	r24, Y+48	; 0x30
    24fa:	98 2b       	or	r25, r24
    24fc:	9e a7       	std	Y+46, r25	; 0x2e
    24fe:	9f a5       	ldd	r25, Y+47	; 0x2f
    2500:	9a a3       	std	Y+34, r25	; 0x22
    2502:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2504:	9b 89       	ldd	r25, Y+19	; 0x13
    2506:	89 0f       	add	r24, r25
    2508:	8b a3       	std	Y+35, r24	; 0x23
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	89 ab       	std	Y+49, r24	; 0x31
    250e:	9b a1       	ldd	r25, Y+35	; 0x23
    2510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2512:	98 17       	cp	r25, r24
    2514:	08 f0       	brcs	.+2      	; 0x2518 <HEX_TO_DEC_Trial+0x248>
    2516:	19 aa       	std	Y+49, r1	; 0x31
    2518:	9e a5       	ldd	r25, Y+46	; 0x2e
    251a:	8b a1       	ldd	r24, Y+35	; 0x23
    251c:	98 0f       	add	r25, r24
    251e:	9a ab       	std	Y+50, r25	; 0x32
    2520:	91 e0       	ldi	r25, 0x01	; 1
    2522:	9b ab       	std	Y+51, r25	; 0x33
    2524:	8a a9       	ldd	r24, Y+50	; 0x32
    2526:	9b a1       	ldd	r25, Y+35	; 0x23
    2528:	89 17       	cp	r24, r25
    252a:	08 f0       	brcs	.+2      	; 0x252e <HEX_TO_DEC_Trial+0x25e>
    252c:	1b aa       	std	Y+51, r1	; 0x33
    252e:	89 a9       	ldd	r24, Y+49	; 0x31
    2530:	9b a9       	ldd	r25, Y+51	; 0x33
    2532:	89 2b       	or	r24, r25
    2534:	89 ab       	std	Y+49, r24	; 0x31
    2536:	8a a9       	ldd	r24, Y+50	; 0x32
    2538:	8b a3       	std	Y+35, r24	; 0x23
    253a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    253c:	8c 89       	ldd	r24, Y+20	; 0x14
    253e:	98 0f       	add	r25, r24
    2540:	9c a3       	std	Y+36, r25	; 0x24
    2542:	91 e0       	ldi	r25, 0x01	; 1
    2544:	9c ab       	std	Y+52, r25	; 0x34
    2546:	8c a1       	ldd	r24, Y+36	; 0x24
    2548:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254a:	89 17       	cp	r24, r25
    254c:	08 f0       	brcs	.+2      	; 0x2550 <HEX_TO_DEC_Trial+0x280>
    254e:	1c aa       	std	Y+52, r1	; 0x34
    2550:	89 a9       	ldd	r24, Y+49	; 0x31
    2552:	9c a1       	ldd	r25, Y+36	; 0x24
    2554:	89 0f       	add	r24, r25
    2556:	8d ab       	std	Y+53, r24	; 0x35
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	8e ab       	std	Y+54, r24	; 0x36
    255c:	9d a9       	ldd	r25, Y+53	; 0x35
    255e:	8c a1       	ldd	r24, Y+36	; 0x24
    2560:	98 17       	cp	r25, r24
    2562:	08 f0       	brcs	.+2      	; 0x2566 <HEX_TO_DEC_Trial+0x296>
    2564:	1e aa       	std	Y+54, r1	; 0x36
    2566:	9c a9       	ldd	r25, Y+52	; 0x34
    2568:	8e a9       	ldd	r24, Y+54	; 0x36
    256a:	98 2b       	or	r25, r24
    256c:	9c ab       	std	Y+52, r25	; 0x34
    256e:	9d a9       	ldd	r25, Y+53	; 0x35
    2570:	9c a3       	std	Y+36, r25	; 0x24
    2572:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2574:	9d 89       	ldd	r25, Y+21	; 0x15
    2576:	89 0f       	add	r24, r25
    2578:	8d a3       	std	Y+37, r24	; 0x25
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	8f ab       	std	Y+55, r24	; 0x37
    257e:	9d a1       	ldd	r25, Y+37	; 0x25
    2580:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2582:	98 17       	cp	r25, r24
    2584:	08 f0       	brcs	.+2      	; 0x2588 <HEX_TO_DEC_Trial+0x2b8>
    2586:	1f aa       	std	Y+55, r1	; 0x37
    2588:	9c a9       	ldd	r25, Y+52	; 0x34
    258a:	8d a1       	ldd	r24, Y+37	; 0x25
    258c:	98 0f       	add	r25, r24
    258e:	98 af       	std	Y+56, r25	; 0x38
    2590:	91 e0       	ldi	r25, 0x01	; 1
    2592:	99 af       	std	Y+57, r25	; 0x39
    2594:	88 ad       	ldd	r24, Y+56	; 0x38
    2596:	9d a1       	ldd	r25, Y+37	; 0x25
    2598:	89 17       	cp	r24, r25
    259a:	08 f0       	brcs	.+2      	; 0x259e <HEX_TO_DEC_Trial+0x2ce>
    259c:	19 ae       	std	Y+57, r1	; 0x39
    259e:	8f a9       	ldd	r24, Y+55	; 0x37
    25a0:	99 ad       	ldd	r25, Y+57	; 0x39
    25a2:	89 2b       	or	r24, r25
    25a4:	8f ab       	std	Y+55, r24	; 0x37
    25a6:	88 ad       	ldd	r24, Y+56	; 0x38
    25a8:	8d a3       	std	Y+37, r24	; 0x25
    25aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ac:	8e 89       	ldd	r24, Y+22	; 0x16
    25ae:	98 0f       	add	r25, r24
    25b0:	9e a3       	std	Y+38, r25	; 0x26
    25b2:	8f a9       	ldd	r24, Y+55	; 0x37
    25b4:	9e a1       	ldd	r25, Y+38	; 0x26
    25b6:	89 0f       	add	r24, r25
    25b8:	8e a3       	std	Y+38, r24	; 0x26
    25ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	98 a1       	ldd	r25, Y+32	; 0x20
    25c0:	9a 83       	std	Y+2, r25	; 0x02
    25c2:	89 a1       	ldd	r24, Y+33	; 0x21
    25c4:	8b 83       	std	Y+3, r24	; 0x03
    25c6:	9a a1       	ldd	r25, Y+34	; 0x22
    25c8:	9c 83       	std	Y+4, r25	; 0x04
    25ca:	8b a1       	ldd	r24, Y+35	; 0x23
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	9c a1       	ldd	r25, Y+36	; 0x24
    25d0:	9e 83       	std	Y+6, r25	; 0x06
    25d2:	8d a1       	ldd	r24, Y+37	; 0x25
    25d4:	8f 83       	std	Y+7, r24	; 0x07
    25d6:	9e a1       	ldd	r25, Y+38	; 0x26
    25d8:	98 87       	std	Y+8, r25	; 0x08
	        len--;
    25da:	89 85       	ldd	r24, Y+9	; 0x09
    25dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	9a 87       	std	Y+10, r25	; 0x0a
    25e2:	89 87       	std	Y+9, r24	; 0x09
	    // finding the length of hexa decimal number
	    len = index_of_hex_number;
	    len--;

	    // for loop iterates the hexa decimal number digits
	    for (i = 0; hex[i] != '='; i++) {
    25e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e8:	01 96       	adiw	r24, 0x01	; 1
    25ea:	9e 87       	std	Y+14, r25	; 0x0e
    25ec:	8d 87       	std	Y+13, r24	; 0x0d
    25ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f2:	88 0f       	add	r24, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	fc 01       	movw	r30, r24
    25f8:	ed 54       	subi	r30, 0x4D	; 77
    25fa:	fe 4f       	sbci	r31, 0xFE	; 254
    25fc:	80 81       	ld	r24, Z
    25fe:	91 81       	ldd	r25, Z+1	; 0x01
    2600:	8d 33       	cpi	r24, 0x3D	; 61
    2602:	91 05       	cpc	r25, r1
    2604:	09 f0       	breq	.+2      	; 0x2608 <HEX_TO_DEC_Trial+0x338>
    2606:	8a ce       	rjmp	.-748    	; 0x231c <HEX_TO_DEC_Trial+0x4c>
	        }

	        decimal += val * Pow(16, len);
	        len--;
	    }
	    return decimal;
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02

}
    260c:	e9 96       	adiw	r28, 0x39	; 57
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	08 95       	ret

00002626 <Hex_to_bin>:
#include "Hex_to_bin.h"



void Hex_to_bin()
{
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	00 d0       	rcall	.+0      	; 0x262c <Hex_to_bin+0x6>
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
	uint16 decimal_number;

	decimal_number=HEX_TO_DEC_Trial();
    2630:	0e 94 68 11 	call	0x22d0	; 0x22d0 <HEX_TO_DEC_Trial>
    2634:	9a 83       	std	Y+2, r25	; 0x02
    2636:	89 83       	std	Y+1, r24	; 0x01
	Dec_to_bin(decimal_number);
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	9a 81       	ldd	r25, Y+2	; 0x02
    263c:	0e 94 06 11 	call	0x220c	; 0x220c <Dec_to_bin>


}
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <hex_to_oct>:
 *
 *******************************************************************************/
#include "Hex_to_oct.h"

void hex_to_oct(void)
{
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	00 d0       	rcall	.+0      	; 0x2650 <hex_to_oct+0x6>
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
	uint16 decimal_number;

	decimal_number = HEX_TO_DEC_Trial();
    2654:	0e 94 68 11 	call	0x22d0	; 0x22d0 <HEX_TO_DEC_Trial>
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
	Dec_to_oct(decimal_number);
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	9a 81       	ldd	r25, Y+2	; 0x02
    2660:	0e 94 35 11 	call	0x226a	; 0x226a <Dec_to_oct>


}
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <Pow>:
 *      Author: 01116
 */
#include"MATH.h"

long int Pow (int x,int n)
{
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	28 97       	sbiw	r28, 0x08	; 8
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
    2682:	9e 83       	std	Y+6, r25	; 0x06
    2684:	8d 83       	std	Y+5, r24	; 0x05
    2686:	78 87       	std	Y+8, r23	; 0x08
    2688:	6f 83       	std	Y+7, r22	; 0x07
    int i; /* Variable used in loop counter */
    int number = 1;
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	9a 83       	std	Y+2, r25	; 0x02
    2690:	89 83       	std	Y+1, r24	; 0x01

    for (i = 0; i < n; ++i){
    2692:	1c 82       	std	Y+4, r1	; 0x04
    2694:	1b 82       	std	Y+3, r1	; 0x03
    2696:	13 c0       	rjmp	.+38     	; 0x26be <Pow+0x50>
        number *= x;
    2698:	29 81       	ldd	r18, Y+1	; 0x01
    269a:	3a 81       	ldd	r19, Y+2	; 0x02
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	9e 81       	ldd	r25, Y+6	; 0x06
    26a0:	ac 01       	movw	r20, r24
    26a2:	24 9f       	mul	r18, r20
    26a4:	c0 01       	movw	r24, r0
    26a6:	25 9f       	mul	r18, r21
    26a8:	90 0d       	add	r25, r0
    26aa:	34 9f       	mul	r19, r20
    26ac:	90 0d       	add	r25, r0
    26ae:	11 24       	eor	r1, r1
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
long int Pow (int x,int n)
{
    int i; /* Variable used in loop counter */
    int number = 1;

    for (i = 0; i < n; ++i){
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	9c 81       	ldd	r25, Y+4	; 0x04
    26b8:	01 96       	adiw	r24, 0x01	; 1
    26ba:	9c 83       	std	Y+4, r25	; 0x04
    26bc:	8b 83       	std	Y+3, r24	; 0x03
    26be:	2b 81       	ldd	r18, Y+3	; 0x03
    26c0:	3c 81       	ldd	r19, Y+4	; 0x04
    26c2:	8f 81       	ldd	r24, Y+7	; 0x07
    26c4:	98 85       	ldd	r25, Y+8	; 0x08
    26c6:	28 17       	cp	r18, r24
    26c8:	39 07       	cpc	r19, r25
    26ca:	34 f3       	brlt	.-52     	; 0x2698 <Pow+0x2a>
        number *= x;
    }

    return(number);
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	aa 27       	eor	r26, r26
    26d2:	97 fd       	sbrc	r25, 7
    26d4:	a0 95       	com	r26
    26d6:	ba 2f       	mov	r27, r26
}
    26d8:	bc 01       	movw	r22, r24
    26da:	cd 01       	movw	r24, r26
    26dc:	28 96       	adiw	r28, 0x08	; 8
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <main>:

#include "MainApplication.h"


void main(void)
{
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	c1 55       	subi	r28, 0x51	; 81
    26fc:	d0 40       	sbci	r29, 0x00	; 0
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
	uint8 key,keypressed,bit_shift;
	uint16 deci_no=0;
    2708:	fe 01       	movw	r30, r28
    270a:	e7 5b       	subi	r30, 0xB7	; 183
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	11 82       	std	Z+1, r1	; 0x01
    2710:	10 82       	st	Z, r1
	LCD_init();
    2712:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_init>

	while(1)
	{
		LCD_displayStringRowColumn(0, 0, "1-dec shift L-R");
    2716:	20 e6       	ldi	r18, 0x60	; 96
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	60 e0       	ldi	r22, 0x00	; 0
    271e:	a9 01       	movw	r20, r18
    2720:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "2-Base calc.");
    2724:	20 e7       	ldi	r18, 0x70	; 112
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	60 e0       	ldi	r22, 0x00	; 0
    272c:	a9 01       	movw	r20, r18
    272e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
		key = KEYPAD_getPressedKey();
    2732:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    2736:	fe 01       	movw	r30, r28
    2738:	e3 5b       	subi	r30, 0xB3	; 179
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 83       	st	Z, r24
    273e:	fe 01       	movw	r30, r28
    2740:	ed 5b       	subi	r30, 0xBD	; 189
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	af ea       	ldi	r26, 0xAF	; 175
    274a:	b3 e4       	ldi	r27, 0x43	; 67
    274c:	80 83       	st	Z, r24
    274e:	91 83       	std	Z+1, r25	; 0x01
    2750:	a2 83       	std	Z+2, r26	; 0x02
    2752:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2754:	8e 01       	movw	r16, r28
    2756:	01 5c       	subi	r16, 0xC1	; 193
    2758:	1f 4f       	sbci	r17, 0xFF	; 255
    275a:	fe 01       	movw	r30, r28
    275c:	ed 5b       	subi	r30, 0xBD	; 189
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	60 81       	ld	r22, Z
    2762:	71 81       	ldd	r23, Z+1	; 0x01
    2764:	82 81       	ldd	r24, Z+2	; 0x02
    2766:	93 81       	ldd	r25, Z+3	; 0x03
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	4a e7       	ldi	r20, 0x7A	; 122
    276e:	53 e4       	ldi	r21, 0x43	; 67
    2770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	f8 01       	movw	r30, r16
    277a:	80 83       	st	Z, r24
    277c:	91 83       	std	Z+1, r25	; 0x01
    277e:	a2 83       	std	Z+2, r26	; 0x02
    2780:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2782:	fe 01       	movw	r30, r28
    2784:	ff 96       	adiw	r30, 0x3f	; 63
    2786:	60 81       	ld	r22, Z
    2788:	71 81       	ldd	r23, Z+1	; 0x01
    278a:	82 81       	ldd	r24, Z+2	; 0x02
    278c:	93 81       	ldd	r25, Z+3	; 0x03
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e8       	ldi	r20, 0x80	; 128
    2794:	5f e3       	ldi	r21, 0x3F	; 63
    2796:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    279a:	88 23       	and	r24, r24
    279c:	2c f4       	brge	.+10     	; 0x27a8 <main+0xba>
		__ticks = 1;
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	9e af       	std	Y+62, r25	; 0x3e
    27a4:	8d af       	std	Y+61, r24	; 0x3d
    27a6:	46 c0       	rjmp	.+140    	; 0x2834 <main+0x146>
	else if (__tmp > 65535)
    27a8:	fe 01       	movw	r30, r28
    27aa:	ff 96       	adiw	r30, 0x3f	; 63
    27ac:	60 81       	ld	r22, Z
    27ae:	71 81       	ldd	r23, Z+1	; 0x01
    27b0:	82 81       	ldd	r24, Z+2	; 0x02
    27b2:	93 81       	ldd	r25, Z+3	; 0x03
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	3f ef       	ldi	r19, 0xFF	; 255
    27b8:	4f e7       	ldi	r20, 0x7F	; 127
    27ba:	57 e4       	ldi	r21, 0x47	; 71
    27bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c0:	18 16       	cp	r1, r24
    27c2:	64 f5       	brge	.+88     	; 0x281c <main+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c4:	fe 01       	movw	r30, r28
    27c6:	ed 5b       	subi	r30, 0xBD	; 189
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	60 81       	ld	r22, Z
    27cc:	71 81       	ldd	r23, Z+1	; 0x01
    27ce:	82 81       	ldd	r24, Z+2	; 0x02
    27d0:	93 81       	ldd	r25, Z+3	; 0x03
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e2       	ldi	r20, 0x20	; 32
    27d8:	51 e4       	ldi	r21, 0x41	; 65
    27da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	9e af       	std	Y+62, r25	; 0x3e
    27f0:	8d af       	std	Y+61, r24	; 0x3d
    27f2:	0f c0       	rjmp	.+30     	; 0x2812 <main+0x124>
    27f4:	89 e1       	ldi	r24, 0x19	; 25
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	9c af       	std	Y+60, r25	; 0x3c
    27fa:	8b af       	std	Y+59, r24	; 0x3b
    27fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    27fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <main+0x112>
    2804:	9c af       	std	Y+60, r25	; 0x3c
    2806:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2808:	8d ad       	ldd	r24, Y+61	; 0x3d
    280a:	9e ad       	ldd	r25, Y+62	; 0x3e
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	9e af       	std	Y+62, r25	; 0x3e
    2810:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2812:	8d ad       	ldd	r24, Y+61	; 0x3d
    2814:	9e ad       	ldd	r25, Y+62	; 0x3e
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	69 f7       	brne	.-38     	; 0x27f4 <main+0x106>
    281a:	16 c0       	rjmp	.+44     	; 0x2848 <main+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281c:	fe 01       	movw	r30, r28
    281e:	ff 96       	adiw	r30, 0x3f	; 63
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	9e af       	std	Y+62, r25	; 0x3e
    2832:	8d af       	std	Y+61, r24	; 0x3d
    2834:	8d ad       	ldd	r24, Y+61	; 0x3d
    2836:	9e ad       	ldd	r25, Y+62	; 0x3e
    2838:	9a af       	std	Y+58, r25	; 0x3a
    283a:	89 af       	std	Y+57, r24	; 0x39
    283c:	89 ad       	ldd	r24, Y+57	; 0x39
    283e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <main+0x152>
    2844:	9a af       	std	Y+58, r25	; 0x3a
    2846:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(KEYPAD_PRESSED_TIME);

		switch(key){
    2848:	fe 01       	movw	r30, r28
    284a:	e3 5b       	subi	r30, 0xB3	; 179
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 81       	ld	r24, Z
    2850:	28 2f       	mov	r18, r24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	62 96       	adiw	r28, 0x12	; 18
    2856:	3f af       	std	Y+63, r19	; 0x3f
    2858:	2e af       	std	Y+62, r18	; 0x3e
    285a:	62 97       	sbiw	r28, 0x12	; 18
    285c:	62 96       	adiw	r28, 0x12	; 18
    285e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2860:	9f ad       	ldd	r25, Y+63	; 0x3f
    2862:	62 97       	sbiw	r28, 0x12	; 18
    2864:	81 30       	cpi	r24, 0x01	; 1
    2866:	91 05       	cpc	r25, r1
    2868:	49 f0       	breq	.+18     	; 0x287c <main+0x18e>
    286a:	62 96       	adiw	r28, 0x12	; 18
    286c:	ee ad       	ldd	r30, Y+62	; 0x3e
    286e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2870:	62 97       	sbiw	r28, 0x12	; 18
    2872:	e2 30       	cpi	r30, 0x02	; 2
    2874:	f1 05       	cpc	r31, r1
    2876:	09 f4       	brne	.+2      	; 0x287a <main+0x18c>
    2878:	2a c2       	rjmp	.+1108   	; 0x2cce <main+0x5e0>
    287a:	36 c2       	rjmp	.+1132   	; 0x2ce8 <main+0x5fa>
		case 1 :

			deci_no=get_the_decimal_number();
    287c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <get_the_decimal_number>
    2880:	fe 01       	movw	r30, r28
    2882:	e7 5b       	subi	r30, 0xB7	; 183
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	91 83       	std	Z+1, r25	; 0x01
    2888:	80 83       	st	Z, r24


			LCD_clearScreen();
    288a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "1-shift Left");
    288e:	2d e7       	ldi	r18, 0x7D	; 125
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	60 e0       	ldi	r22, 0x00	; 0
    2896:	a9 01       	movw	r20, r18
    2898:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "2-shift Right");
    289c:	2a e8       	ldi	r18, 0x8A	; 138
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	a9 01       	movw	r20, r18
    28a6:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
			keypressed = KEYPAD_getPressedKey();
    28aa:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    28ae:	fe 01       	movw	r30, r28
    28b0:	e4 5b       	subi	r30, 0xB4	; 180
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 83       	st	Z, r24

			LCD_clearScreen();
    28b6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "how many shift?");
    28ba:	28 e9       	ldi	r18, 0x98	; 152
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	60 e0       	ldi	r22, 0x00	; 0
    28c2:	a9 01       	movw	r20, r18
    28c4:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
			bit_shift = KEYPAD_getPressedKey();
    28c8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    28cc:	fe 01       	movw	r30, r28
    28ce:	e5 5b       	subi	r30, 0xB5	; 181
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 83       	st	Z, r24

			switch (keypressed)
    28d4:	fe 01       	movw	r30, r28
    28d6:	e4 5b       	subi	r30, 0xB4	; 180
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	80 81       	ld	r24, Z
    28dc:	28 2f       	mov	r18, r24
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	60 96       	adiw	r28, 0x10	; 16
    28e2:	3f af       	std	Y+63, r19	; 0x3f
    28e4:	2e af       	std	Y+62, r18	; 0x3e
    28e6:	60 97       	sbiw	r28, 0x10	; 16
    28e8:	60 96       	adiw	r28, 0x10	; 16
    28ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    28ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    28ee:	60 97       	sbiw	r28, 0x10	; 16
    28f0:	81 30       	cpi	r24, 0x01	; 1
    28f2:	91 05       	cpc	r25, r1
    28f4:	41 f0       	breq	.+16     	; 0x2906 <main+0x218>
    28f6:	60 96       	adiw	r28, 0x10	; 16
    28f8:	ee ad       	ldd	r30, Y+62	; 0x3e
    28fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    28fc:	60 97       	sbiw	r28, 0x10	; 16
    28fe:	e2 30       	cpi	r30, 0x02	; 2
    2900:	f1 05       	cpc	r31, r1
    2902:	c9 f0       	breq	.+50     	; 0x2936 <main+0x248>
    2904:	30 c0       	rjmp	.+96     	; 0x2966 <main+0x278>
			{
			case 1:
				deci_no = deci_no << bit_shift;
    2906:	fe 01       	movw	r30, r28
    2908:	e5 5b       	subi	r30, 0xB5	; 181
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	80 81       	ld	r24, Z
    290e:	28 2f       	mov	r18, r24
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	de 01       	movw	r26, r28
    2914:	a7 5b       	subi	r26, 0xB7	; 183
    2916:	bf 4f       	sbci	r27, 0xFF	; 255
    2918:	fe 01       	movw	r30, r28
    291a:	e7 5b       	subi	r30, 0xB7	; 183
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	02 2e       	mov	r0, r18
    2924:	02 c0       	rjmp	.+4      	; 0x292a <main+0x23c>
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	0a 94       	dec	r0
    292c:	e2 f7       	brpl	.-8      	; 0x2926 <main+0x238>
    292e:	11 96       	adiw	r26, 0x01	; 1
    2930:	9c 93       	st	X, r25
    2932:	8e 93       	st	-X, r24
    2934:	93 c0       	rjmp	.+294    	; 0x2a5c <main+0x36e>
				break;
			case 2:
				deci_no = deci_no >> bit_shift;
    2936:	fe 01       	movw	r30, r28
    2938:	e5 5b       	subi	r30, 0xB5	; 181
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	80 81       	ld	r24, Z
    293e:	28 2f       	mov	r18, r24
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	de 01       	movw	r26, r28
    2944:	a7 5b       	subi	r26, 0xB7	; 183
    2946:	bf 4f       	sbci	r27, 0xFF	; 255
    2948:	fe 01       	movw	r30, r28
    294a:	e7 5b       	subi	r30, 0xB7	; 183
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	80 81       	ld	r24, Z
    2950:	91 81       	ldd	r25, Z+1	; 0x01
    2952:	02 2e       	mov	r0, r18
    2954:	02 c0       	rjmp	.+4      	; 0x295a <main+0x26c>
    2956:	96 95       	lsr	r25
    2958:	87 95       	ror	r24
    295a:	0a 94       	dec	r0
    295c:	e2 f7       	brpl	.-8      	; 0x2956 <main+0x268>
    295e:	11 96       	adiw	r26, 0x01	; 1
    2960:	9c 93       	st	X, r25
    2962:	8e 93       	st	-X, r24
    2964:	7b c0       	rjmp	.+246    	; 0x2a5c <main+0x36e>
				break;
			default:
				LCD_clearScreen();
    2966:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "Error!!");
    296a:	28 ea       	ldi	r18, 0xA8	; 168
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	60 e0       	ldi	r22, 0x00	; 0
    2972:	a9 01       	movw	r20, r18
    2974:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	aa e7       	ldi	r26, 0x7A	; 122
    297e:	b4 e4       	ldi	r27, 0x44	; 68
    2980:	8d ab       	std	Y+53, r24	; 0x35
    2982:	9e ab       	std	Y+54, r25	; 0x36
    2984:	af ab       	std	Y+55, r26	; 0x37
    2986:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2988:	6d a9       	ldd	r22, Y+53	; 0x35
    298a:	7e a9       	ldd	r23, Y+54	; 0x36
    298c:	8f a9       	ldd	r24, Y+55	; 0x37
    298e:	98 ad       	ldd	r25, Y+56	; 0x38
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	4a e7       	ldi	r20, 0x7A	; 122
    2996:	53 e4       	ldi	r21, 0x43	; 67
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	89 ab       	std	Y+49, r24	; 0x31
    29a2:	9a ab       	std	Y+50, r25	; 0x32
    29a4:	ab ab       	std	Y+51, r26	; 0x33
    29a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29a8:	69 a9       	ldd	r22, Y+49	; 0x31
    29aa:	7a a9       	ldd	r23, Y+50	; 0x32
    29ac:	8b a9       	ldd	r24, Y+51	; 0x33
    29ae:	9c a9       	ldd	r25, Y+52	; 0x34
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29bc:	88 23       	and	r24, r24
    29be:	2c f4       	brge	.+10     	; 0x29ca <main+0x2dc>
		__ticks = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	98 ab       	std	Y+48, r25	; 0x30
    29c6:	8f a7       	std	Y+47, r24	; 0x2f
    29c8:	3f c0       	rjmp	.+126    	; 0x2a48 <main+0x35a>
	else if (__tmp > 65535)
    29ca:	69 a9       	ldd	r22, Y+49	; 0x31
    29cc:	7a a9       	ldd	r23, Y+50	; 0x32
    29ce:	8b a9       	ldd	r24, Y+51	; 0x33
    29d0:	9c a9       	ldd	r25, Y+52	; 0x34
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	3f ef       	ldi	r19, 0xFF	; 255
    29d6:	4f e7       	ldi	r20, 0x7F	; 127
    29d8:	57 e4       	ldi	r21, 0x47	; 71
    29da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29de:	18 16       	cp	r1, r24
    29e0:	4c f5       	brge	.+82     	; 0x2a34 <main+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e2:	6d a9       	ldd	r22, Y+53	; 0x35
    29e4:	7e a9       	ldd	r23, Y+54	; 0x36
    29e6:	8f a9       	ldd	r24, Y+55	; 0x37
    29e8:	98 ad       	ldd	r25, Y+56	; 0x38
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e2       	ldi	r20, 0x20	; 32
    29f0:	51 e4       	ldi	r21, 0x41	; 65
    29f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	bc 01       	movw	r22, r24
    29fc:	cd 01       	movw	r24, r26
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	98 ab       	std	Y+48, r25	; 0x30
    2a08:	8f a7       	std	Y+47, r24	; 0x2f
    2a0a:	0f c0       	rjmp	.+30     	; 0x2a2a <main+0x33c>
    2a0c:	89 e1       	ldi	r24, 0x19	; 25
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	9e a7       	std	Y+46, r25	; 0x2e
    2a12:	8d a7       	std	Y+45, r24	; 0x2d
    2a14:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a16:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <main+0x32a>
    2a1c:	9e a7       	std	Y+46, r25	; 0x2e
    2a1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a20:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a22:	98 a9       	ldd	r25, Y+48	; 0x30
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	98 ab       	std	Y+48, r25	; 0x30
    2a28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	69 f7       	brne	.-38     	; 0x2a0c <main+0x31e>
    2a32:	14 c0       	rjmp	.+40     	; 0x2a5c <main+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a34:	69 a9       	ldd	r22, Y+49	; 0x31
    2a36:	7a a9       	ldd	r23, Y+50	; 0x32
    2a38:	8b a9       	ldd	r24, Y+51	; 0x33
    2a3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	98 ab       	std	Y+48, r25	; 0x30
    2a46:	8f a7       	std	Y+47, r24	; 0x2f
    2a48:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a4a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a4c:	9c a7       	std	Y+44, r25	; 0x2c
    2a4e:	8b a7       	std	Y+43, r24	; 0x2b
    2a50:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a52:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <main+0x366>
    2a58:	9c a7       	std	Y+44, r25	; 0x2c
    2a5a:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				break;
			}

			LCD_clearScreen();
    2a5c:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Shifted: ");
    2a60:	20 eb       	ldi	r18, 0xB0	; 176
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	60 e0       	ldi	r22, 0x00	; 0
    2a68:	a9 01       	movw	r20, r18
    2a6a:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
			LCD_moveCursor(0,8);
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	68 e0       	ldi	r22, 0x08	; 8
    2a72:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_moveCursor>
			LCD_intgerToString(deci_no);
    2a76:	fe 01       	movw	r30, r28
    2a78:	e7 5b       	subi	r30, 0xB7	; 183
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	80 81       	ld	r24, Z
    2a7e:	91 81       	ldd	r25, Z+1	; 0x01
    2a80:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	aa ef       	ldi	r26, 0xFA	; 250
    2a8a:	b3 e4       	ldi	r27, 0x43	; 67
    2a8c:	8f a3       	std	Y+39, r24	; 0x27
    2a8e:	98 a7       	std	Y+40, r25	; 0x28
    2a90:	a9 a7       	std	Y+41, r26	; 0x29
    2a92:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a94:	6f a1       	ldd	r22, Y+39	; 0x27
    2a96:	78 a5       	ldd	r23, Y+40	; 0x28
    2a98:	89 a5       	ldd	r24, Y+41	; 0x29
    2a9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	4a e7       	ldi	r20, 0x7A	; 122
    2aa2:	53 e4       	ldi	r21, 0x43	; 67
    2aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	8b a3       	std	Y+35, r24	; 0x23
    2aae:	9c a3       	std	Y+36, r25	; 0x24
    2ab0:	ad a3       	std	Y+37, r26	; 0x25
    2ab2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ab4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ab6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ab8:	8d a1       	ldd	r24, Y+37	; 0x25
    2aba:	9e a1       	ldd	r25, Y+38	; 0x26
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e8       	ldi	r20, 0x80	; 128
    2ac2:	5f e3       	ldi	r21, 0x3F	; 63
    2ac4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ac8:	88 23       	and	r24, r24
    2aca:	2c f4       	brge	.+10     	; 0x2ad6 <main+0x3e8>
		__ticks = 1;
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	9a a3       	std	Y+34, r25	; 0x22
    2ad2:	89 a3       	std	Y+33, r24	; 0x21
    2ad4:	3f c0       	rjmp	.+126    	; 0x2b54 <main+0x466>
	else if (__tmp > 65535)
    2ad6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ad8:	7c a1       	ldd	r23, Y+36	; 0x24
    2ada:	8d a1       	ldd	r24, Y+37	; 0x25
    2adc:	9e a1       	ldd	r25, Y+38	; 0x26
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	3f ef       	ldi	r19, 0xFF	; 255
    2ae2:	4f e7       	ldi	r20, 0x7F	; 127
    2ae4:	57 e4       	ldi	r21, 0x47	; 71
    2ae6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aea:	18 16       	cp	r1, r24
    2aec:	4c f5       	brge	.+82     	; 0x2b40 <main+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aee:	6f a1       	ldd	r22, Y+39	; 0x27
    2af0:	78 a5       	ldd	r23, Y+40	; 0x28
    2af2:	89 a5       	ldd	r24, Y+41	; 0x29
    2af4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e2       	ldi	r20, 0x20	; 32
    2afc:	51 e4       	ldi	r21, 0x41	; 65
    2afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	bc 01       	movw	r22, r24
    2b08:	cd 01       	movw	r24, r26
    2b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	9a a3       	std	Y+34, r25	; 0x22
    2b14:	89 a3       	std	Y+33, r24	; 0x21
    2b16:	0f c0       	rjmp	.+30     	; 0x2b36 <main+0x448>
    2b18:	89 e1       	ldi	r24, 0x19	; 25
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	98 a3       	std	Y+32, r25	; 0x20
    2b1e:	8f 8f       	std	Y+31, r24	; 0x1f
    2b20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b22:	98 a1       	ldd	r25, Y+32	; 0x20
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	f1 f7       	brne	.-4      	; 0x2b24 <main+0x436>
    2b28:	98 a3       	std	Y+32, r25	; 0x20
    2b2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b30:	01 97       	sbiw	r24, 0x01	; 1
    2b32:	9a a3       	std	Y+34, r25	; 0x22
    2b34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b36:	89 a1       	ldd	r24, Y+33	; 0x21
    2b38:	9a a1       	ldd	r25, Y+34	; 0x22
    2b3a:	00 97       	sbiw	r24, 0x00	; 0
    2b3c:	69 f7       	brne	.-38     	; 0x2b18 <main+0x42a>
    2b3e:	14 c0       	rjmp	.+40     	; 0x2b68 <main+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b40:	6b a1       	ldd	r22, Y+35	; 0x23
    2b42:	7c a1       	ldd	r23, Y+36	; 0x24
    2b44:	8d a1       	ldd	r24, Y+37	; 0x25
    2b46:	9e a1       	ldd	r25, Y+38	; 0x26
    2b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	9a a3       	std	Y+34, r25	; 0x22
    2b52:	89 a3       	std	Y+33, r24	; 0x21
    2b54:	89 a1       	ldd	r24, Y+33	; 0x21
    2b56:	9a a1       	ldd	r25, Y+34	; 0x22
    2b58:	9e 8f       	std	Y+30, r25	; 0x1e
    2b5a:	8d 8f       	std	Y+29, r24	; 0x1d
    2b5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	f1 f7       	brne	.-4      	; 0x2b60 <main+0x472>
    2b64:	9e 8f       	std	Y+30, r25	; 0x1e
    2b66:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(show_time);

			LCD_displayStringRowColumn(1, 0, "Bin:");
    2b68:	2a eb       	ldi	r18, 0xBA	; 186
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	a9 01       	movw	r20, r18
    2b72:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>

			Dec_to_bin(deci_no);
    2b76:	fe 01       	movw	r30, r28
    2b78:	e7 5b       	subi	r30, 0xB7	; 183
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	80 81       	ld	r24, Z
    2b7e:	91 81       	ldd	r25, Z+1	; 0x01
    2b80:	0e 94 06 11 	call	0x220c	; 0x220c <Dec_to_bin>
			LCD_moveCursor(1,5);
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	65 e0       	ldi	r22, 0x05	; 5
    2b88:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_moveCursor>
			for(int i =index_of_binary_num-1; i>=0;i--){
    2b8c:	80 91 f3 01 	lds	r24, 0x01F3
    2b90:	88 2f       	mov	r24, r24
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	fe 01       	movw	r30, r28
    2b96:	e9 5b       	subi	r30, 0xB9	; 185
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	80 83       	st	Z, r24
    2ba0:	1a c0       	rjmp	.+52     	; 0x2bd6 <main+0x4e8>

				LCD_intgerToString(bin[i]);
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e9 5b       	subi	r30, 0xB9	; 185
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	80 81       	ld	r24, Z
    2baa:	91 81       	ldd	r25, Z+1	; 0x01
    2bac:	88 0f       	add	r24, r24
    2bae:	99 1f       	adc	r25, r25
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	ed 52       	subi	r30, 0x2D	; 45
    2bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb6:	80 81       	ld	r24, Z
    2bb8:	91 81       	ldd	r25, Z+1	; 0x01
    2bba:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>

			LCD_displayStringRowColumn(1, 0, "Bin:");

			Dec_to_bin(deci_no);
			LCD_moveCursor(1,5);
			for(int i =index_of_binary_num-1; i>=0;i--){
    2bbe:	de 01       	movw	r26, r28
    2bc0:	a9 5b       	subi	r26, 0xB9	; 185
    2bc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	e9 5b       	subi	r30, 0xB9	; 185
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	11 96       	adiw	r26, 0x01	; 1
    2bd2:	9c 93       	st	X, r25
    2bd4:	8e 93       	st	-X, r24
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	e9 5b       	subi	r30, 0xB9	; 185
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 81       	ld	r24, Z
    2bde:	91 81       	ldd	r25, Z+1	; 0x01
    2be0:	99 23       	and	r25, r25
    2be2:	fc f6       	brge	.-66     	; 0x2ba2 <main+0x4b4>
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	aa ef       	ldi	r26, 0xFA	; 250
    2bea:	b3 e4       	ldi	r27, 0x43	; 67
    2bec:	89 8f       	std	Y+25, r24	; 0x19
    2bee:	9a 8f       	std	Y+26, r25	; 0x1a
    2bf0:	ab 8f       	std	Y+27, r26	; 0x1b
    2bf2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf4:	69 8d       	ldd	r22, Y+25	; 0x19
    2bf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	4a e7       	ldi	r20, 0x7A	; 122
    2c02:	53 e4       	ldi	r21, 0x43	; 67
    2c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	8d 8b       	std	Y+21, r24	; 0x15
    2c0e:	9e 8b       	std	Y+22, r25	; 0x16
    2c10:	af 8b       	std	Y+23, r26	; 0x17
    2c12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c14:	6d 89       	ldd	r22, Y+21	; 0x15
    2c16:	7e 89       	ldd	r23, Y+22	; 0x16
    2c18:	8f 89       	ldd	r24, Y+23	; 0x17
    2c1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e8       	ldi	r20, 0x80	; 128
    2c22:	5f e3       	ldi	r21, 0x3F	; 63
    2c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c28:	88 23       	and	r24, r24
    2c2a:	2c f4       	brge	.+10     	; 0x2c36 <main+0x548>
		__ticks = 1;
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	9c 8b       	std	Y+20, r25	; 0x14
    2c32:	8b 8b       	std	Y+19, r24	; 0x13
    2c34:	3f c0       	rjmp	.+126    	; 0x2cb4 <main+0x5c6>
	else if (__tmp > 65535)
    2c36:	6d 89       	ldd	r22, Y+21	; 0x15
    2c38:	7e 89       	ldd	r23, Y+22	; 0x16
    2c3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	3f ef       	ldi	r19, 0xFF	; 255
    2c42:	4f e7       	ldi	r20, 0x7F	; 127
    2c44:	57 e4       	ldi	r21, 0x47	; 71
    2c46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c4a:	18 16       	cp	r1, r24
    2c4c:	4c f5       	brge	.+82     	; 0x2ca0 <main+0x5b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e2       	ldi	r20, 0x20	; 32
    2c5c:	51 e4       	ldi	r21, 0x41	; 65
    2c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	bc 01       	movw	r22, r24
    2c68:	cd 01       	movw	r24, r26
    2c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	9c 8b       	std	Y+20, r25	; 0x14
    2c74:	8b 8b       	std	Y+19, r24	; 0x13
    2c76:	0f c0       	rjmp	.+30     	; 0x2c96 <main+0x5a8>
    2c78:	89 e1       	ldi	r24, 0x19	; 25
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	9a 8b       	std	Y+18, r25	; 0x12
    2c7e:	89 8b       	std	Y+17, r24	; 0x11
    2c80:	89 89       	ldd	r24, Y+17	; 0x11
    2c82:	9a 89       	ldd	r25, Y+18	; 0x12
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <main+0x596>
    2c88:	9a 8b       	std	Y+18, r25	; 0x12
    2c8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	9c 8b       	std	Y+20, r25	; 0x14
    2c94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c96:	8b 89       	ldd	r24, Y+19	; 0x13
    2c98:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	69 f7       	brne	.-38     	; 0x2c78 <main+0x58a>
    2c9e:	14 c0       	rjmp	.+40     	; 0x2cc8 <main+0x5da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ca2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ca4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ca6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	9c 8b       	std	Y+20, r25	; 0x14
    2cb2:	8b 8b       	std	Y+19, r24	; 0x13
    2cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2cb8:	98 8b       	std	Y+16, r25	; 0x10
    2cba:	8f 87       	std	Y+15, r24	; 0x0f
    2cbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cbe:	98 89       	ldd	r25, Y+16	; 0x10
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	f1 f7       	brne	.-4      	; 0x2cc0 <main+0x5d2>
    2cc4:	98 8b       	std	Y+16, r25	; 0x10
    2cc6:	8f 87       	std	Y+15, r24	; 0x0f

				LCD_intgerToString(bin[i]);
			}
			_delay_ms(show_time);
			LCD_clearScreen();
    2cc8:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
    2ccc:	24 cd       	rjmp	.-1464   	; 0x2716 <main+0x28>

			break;
			case 2 :

				key = Converter_main_menu();
    2cce:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <Converter_main_menu>
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e3 5b       	subi	r30, 0xB3	; 179
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	80 83       	st	Z, r24
				Converter(key);
    2cda:	fe 01       	movw	r30, r28
    2cdc:	e3 5b       	subi	r30, 0xB3	; 179
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	80 81       	ld	r24, Z
    2ce2:	0e 94 46 18 	call	0x308c	; 0x308c <Converter>
    2ce6:	17 cd       	rjmp	.-1490   	; 0x2716 <main+0x28>

				break;
			default:

				LCD_clearScreen();
    2ce8:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>

				LCD_displayStringRowColumn(0, 0, "Error!!");
    2cec:	28 ea       	ldi	r18, 0xA8	; 168
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	60 e0       	ldi	r22, 0x00	; 0
    2cf4:	a9 01       	movw	r20, r18
    2cf6:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	aa ef       	ldi	r26, 0xFA	; 250
    2d00:	b4 e4       	ldi	r27, 0x44	; 68
    2d02:	8b 87       	std	Y+11, r24	; 0x0b
    2d04:	9c 87       	std	Y+12, r25	; 0x0c
    2d06:	ad 87       	std	Y+13, r26	; 0x0d
    2d08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	4a e7       	ldi	r20, 0x7A	; 122
    2d18:	53 e4       	ldi	r21, 0x43	; 67
    2d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	8f 83       	std	Y+7, r24	; 0x07
    2d24:	98 87       	std	Y+8, r25	; 0x08
    2d26:	a9 87       	std	Y+9, r26	; 0x09
    2d28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2c:	78 85       	ldd	r23, Y+8	; 0x08
    2d2e:	89 85       	ldd	r24, Y+9	; 0x09
    2d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e8       	ldi	r20, 0x80	; 128
    2d38:	5f e3       	ldi	r21, 0x3F	; 63
    2d3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d3e:	88 23       	and	r24, r24
    2d40:	2c f4       	brge	.+10     	; 0x2d4c <main+0x65e>
		__ticks = 1;
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	9e 83       	std	Y+6, r25	; 0x06
    2d48:	8d 83       	std	Y+5, r24	; 0x05
    2d4a:	3f c0       	rjmp	.+126    	; 0x2dca <main+0x6dc>
	else if (__tmp > 65535)
    2d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4e:	78 85       	ldd	r23, Y+8	; 0x08
    2d50:	89 85       	ldd	r24, Y+9	; 0x09
    2d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	3f ef       	ldi	r19, 0xFF	; 255
    2d58:	4f e7       	ldi	r20, 0x7F	; 127
    2d5a:	57 e4       	ldi	r21, 0x47	; 71
    2d5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d60:	18 16       	cp	r1, r24
    2d62:	4c f5       	brge	.+82     	; 0x2db6 <main+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	40 e2       	ldi	r20, 0x20	; 32
    2d72:	51 e4       	ldi	r21, 0x41	; 65
    2d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	bc 01       	movw	r22, r24
    2d7e:	cd 01       	movw	r24, r26
    2d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	9e 83       	std	Y+6, r25	; 0x06
    2d8a:	8d 83       	std	Y+5, r24	; 0x05
    2d8c:	0f c0       	rjmp	.+30     	; 0x2dac <main+0x6be>
    2d8e:	89 e1       	ldi	r24, 0x19	; 25
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	9c 83       	std	Y+4, r25	; 0x04
    2d94:	8b 83       	std	Y+3, r24	; 0x03
    2d96:	8b 81       	ldd	r24, Y+3	; 0x03
    2d98:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	f1 f7       	brne	.-4      	; 0x2d9a <main+0x6ac>
    2d9e:	9c 83       	std	Y+4, r25	; 0x04
    2da0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da2:	8d 81       	ldd	r24, Y+5	; 0x05
    2da4:	9e 81       	ldd	r25, Y+6	; 0x06
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	9e 83       	std	Y+6, r25	; 0x06
    2daa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dac:	8d 81       	ldd	r24, Y+5	; 0x05
    2dae:	9e 81       	ldd	r25, Y+6	; 0x06
    2db0:	00 97       	sbiw	r24, 0x00	; 0
    2db2:	69 f7       	brne	.-38     	; 0x2d8e <main+0x6a0>
    2db4:	b0 cc       	rjmp	.-1696   	; 0x2716 <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db6:	6f 81       	ldd	r22, Y+7	; 0x07
    2db8:	78 85       	ldd	r23, Y+8	; 0x08
    2dba:	89 85       	ldd	r24, Y+9	; 0x09
    2dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	9e 83       	std	Y+6, r25	; 0x06
    2dc8:	8d 83       	std	Y+5, r24	; 0x05
    2dca:	8d 81       	ldd	r24, Y+5	; 0x05
    2dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dce:	9a 83       	std	Y+2, r25	; 0x02
    2dd0:	89 83       	std	Y+1, r24	; 0x01
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <main+0x6e8>
    2dda:	9a 83       	std	Y+2, r25	; 0x02
    2ddc:	89 83       	std	Y+1, r24	; 0x01
    2dde:	9b cc       	rjmp	.-1738   	; 0x2716 <main+0x28>

00002de0 <Converter_main_menu>:
		}
	}
}

uint8 Converter_main_menu(void)
{
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	0f 92       	push	r0
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
	uint8 key_pressed=0;
    2dea:	19 82       	std	Y+1, r1	; 0x01

	LCD_clearScreen();
    2dec:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"1-Deci  2-Bin");
    2df0:	2f eb       	ldi	r18, 0xBF	; 191
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	a9 01       	movw	r20, r18
    2dfa:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"3-Hexa  4-Octal");
    2dfe:	2d ec       	ldi	r18, 0xCD	; 205
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	60 e0       	ldi	r22, 0x00	; 0
    2e06:	a9 01       	movw	r20, r18
    2e08:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
	key_pressed = KEYPAD_getPressedKey();
    2e0c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    2e10:	89 83       	std	Y+1, r24	; 0x01
	return key_pressed;
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e14:	0f 90       	pop	r0
    2e16:	cf 91       	pop	r28
    2e18:	df 91       	pop	r29
    2e1a:	08 95       	ret

00002e1c <get_the_decimal_number>:


uint16 get_the_decimal_number(void){
    2e1c:	0f 93       	push	r16
    2e1e:	1f 93       	push	r17
    2e20:	df 93       	push	r29
    2e22:	cf 93       	push	r28
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
    2e28:	e4 97       	sbiw	r28, 0x34	; 52
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
	uint16 number[16],decimal_number;
	uint8 i=0,j,mul=10,first_num;
    2e34:	1a 8a       	std	Y+18, r1	; 0x12
    2e36:	8a e0       	ldi	r24, 0x0A	; 10
    2e38:	88 8b       	std	Y+16, r24	; 0x10
	LCD_clearScreen();
    2e3a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"num:");
    2e3e:	2d ed       	ldi	r18, 0xDD	; 221
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	60 e0       	ldi	r22, 0x00	; 0
    2e46:	a9 01       	movw	r20, r18
    2e48:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
    2e4c:	97 c0       	rjmp	.+302    	; 0x2f7c <get_the_decimal_number+0x160>
	while(KEYPAD_getPressedKey() != '=')
	{
		number[i] = KEYPAD_getPressedKey();
    2e4e:	8a 89       	ldd	r24, Y+18	; 0x12
    2e50:	08 2f       	mov	r16, r24
    2e52:	10 e0       	ldi	r17, 0x00	; 0
    2e54:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    2e58:	48 2f       	mov	r20, r24
    2e5a:	50 e0       	ldi	r21, 0x00	; 0
    2e5c:	98 01       	movw	r18, r16
    2e5e:	22 0f       	add	r18, r18
    2e60:	33 1f       	adc	r19, r19
    2e62:	ce 01       	movw	r24, r28
    2e64:	01 96       	adiw	r24, 0x01	; 1
    2e66:	82 0f       	add	r24, r18
    2e68:	93 1f       	adc	r25, r19
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	74 96       	adiw	r30, 0x14	; 20
    2e6e:	51 83       	std	Z+1, r21	; 0x01
    2e70:	40 83       	st	Z, r20
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	af ea       	ldi	r26, 0xAF	; 175
    2e78:	b3 e4       	ldi	r27, 0x43	; 67
    2e7a:	8b 87       	std	Y+11, r24	; 0x0b
    2e7c:	9c 87       	std	Y+12, r25	; 0x0c
    2e7e:	ad 87       	std	Y+13, r26	; 0x0d
    2e80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	4a e7       	ldi	r20, 0x7A	; 122
    2e90:	53 e4       	ldi	r21, 0x43	; 67
    2e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	8f 83       	std	Y+7, r24	; 0x07
    2e9c:	98 87       	std	Y+8, r25	; 0x08
    2e9e:	a9 87       	std	Y+9, r26	; 0x09
    2ea0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea4:	78 85       	ldd	r23, Y+8	; 0x08
    2ea6:	89 85       	ldd	r24, Y+9	; 0x09
    2ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	40 e8       	ldi	r20, 0x80	; 128
    2eb0:	5f e3       	ldi	r21, 0x3F	; 63
    2eb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eb6:	88 23       	and	r24, r24
    2eb8:	2c f4       	brge	.+10     	; 0x2ec4 <get_the_decimal_number+0xa8>
		__ticks = 1;
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	9e 83       	std	Y+6, r25	; 0x06
    2ec0:	8d 83       	std	Y+5, r24	; 0x05
    2ec2:	3f c0       	rjmp	.+126    	; 0x2f42 <get_the_decimal_number+0x126>
	else if (__tmp > 65535)
    2ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec6:	78 85       	ldd	r23, Y+8	; 0x08
    2ec8:	89 85       	ldd	r24, Y+9	; 0x09
    2eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	3f ef       	ldi	r19, 0xFF	; 255
    2ed0:	4f e7       	ldi	r20, 0x7F	; 127
    2ed2:	57 e4       	ldi	r21, 0x47	; 71
    2ed4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ed8:	18 16       	cp	r1, r24
    2eda:	4c f5       	brge	.+82     	; 0x2f2e <get_the_decimal_number+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	40 e2       	ldi	r20, 0x20	; 32
    2eea:	51 e4       	ldi	r21, 0x41	; 65
    2eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	bc 01       	movw	r22, r24
    2ef6:	cd 01       	movw	r24, r26
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	9e 83       	std	Y+6, r25	; 0x06
    2f02:	8d 83       	std	Y+5, r24	; 0x05
    2f04:	0f c0       	rjmp	.+30     	; 0x2f24 <get_the_decimal_number+0x108>
    2f06:	89 e1       	ldi	r24, 0x19	; 25
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	9c 83       	std	Y+4, r25	; 0x04
    2f0c:	8b 83       	std	Y+3, r24	; 0x03
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	9c 81       	ldd	r25, Y+4	; 0x04
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <get_the_decimal_number+0xf6>
    2f16:	9c 83       	std	Y+4, r25	; 0x04
    2f18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	9e 83       	std	Y+6, r25	; 0x06
    2f22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f24:	8d 81       	ldd	r24, Y+5	; 0x05
    2f26:	9e 81       	ldd	r25, Y+6	; 0x06
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	69 f7       	brne	.-38     	; 0x2f06 <get_the_decimal_number+0xea>
    2f2c:	14 c0       	rjmp	.+40     	; 0x2f56 <get_the_decimal_number+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f30:	78 85       	ldd	r23, Y+8	; 0x08
    2f32:	89 85       	ldd	r24, Y+9	; 0x09
    2f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	9e 83       	std	Y+6, r25	; 0x06
    2f40:	8d 83       	std	Y+5, r24	; 0x05
    2f42:	8d 81       	ldd	r24, Y+5	; 0x05
    2f44:	9e 81       	ldd	r25, Y+6	; 0x06
    2f46:	9a 83       	std	Y+2, r25	; 0x02
    2f48:	89 83       	std	Y+1, r24	; 0x01
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4e:	01 97       	sbiw	r24, 0x01	; 1
    2f50:	f1 f7       	brne	.-4      	; 0x2f4e <get_the_decimal_number+0x132>
    2f52:	9a 83       	std	Y+2, r25	; 0x02
    2f54:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(KEYPAD_PRESSED_TIME);


		LCD_intgerToString(number[i]);
    2f56:	8a 89       	ldd	r24, Y+18	; 0x12
    2f58:	88 2f       	mov	r24, r24
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9c 01       	movw	r18, r24
    2f5e:	22 0f       	add	r18, r18
    2f60:	33 1f       	adc	r19, r19
    2f62:	ce 01       	movw	r24, r28
    2f64:	01 96       	adiw	r24, 0x01	; 1
    2f66:	82 0f       	add	r24, r18
    2f68:	93 1f       	adc	r25, r19
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	74 96       	adiw	r30, 0x14	; 20
    2f6e:	80 81       	ld	r24, Z
    2f70:	91 81       	ldd	r25, Z+1	; 0x01
    2f72:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>
		i++;
    2f76:	8a 89       	ldd	r24, Y+18	; 0x12
    2f78:	8f 5f       	subi	r24, 0xFF	; 255
    2f7a:	8a 8b       	std	Y+18, r24	; 0x12
uint16 get_the_decimal_number(void){
	uint16 number[16],decimal_number;
	uint8 i=0,j,mul=10,first_num;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"num:");
	while(KEYPAD_getPressedKey() != '=')
    2f7c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    2f80:	8d 33       	cpi	r24, 0x3D	; 61
    2f82:	09 f0       	breq	.+2      	; 0x2f86 <get_the_decimal_number+0x16a>
    2f84:	64 cf       	rjmp	.-312    	; 0x2e4e <get_the_decimal_number+0x32>

		LCD_intgerToString(number[i]);
		i++;

	}
	number[i]='=';
    2f86:	8a 89       	ldd	r24, Y+18	; 0x12
    2f88:	88 2f       	mov	r24, r24
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	9c 01       	movw	r18, r24
    2f8e:	22 0f       	add	r18, r18
    2f90:	33 1f       	adc	r19, r19
    2f92:	ce 01       	movw	r24, r28
    2f94:	01 96       	adiw	r24, 0x01	; 1
    2f96:	82 0f       	add	r24, r18
    2f98:	93 1f       	adc	r25, r19
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	74 96       	adiw	r30, 0x14	; 20
    2f9e:	8d e3       	ldi	r24, 0x3D	; 61
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	91 83       	std	Z+1, r25	; 0x01
    2fa4:	80 83       	st	Z, r24
	for(j=0;number[j]!='=';j++){
    2fa6:	19 8a       	std	Y+17, r1	; 0x11
    2fa8:	52 c0       	rjmp	.+164    	; 0x304e <get_the_decimal_number+0x232>
		first_num=number[0];//1, 2,3,4
    2faa:	8d 89       	ldd	r24, Y+21	; 0x15
    2fac:	9e 89       	ldd	r25, Y+22	; 0x16
    2fae:	8f 87       	std	Y+15, r24	; 0x0f
		if(j==1){
    2fb0:	89 89       	ldd	r24, Y+17	; 0x11
    2fb2:	81 30       	cpi	r24, 0x01	; 1
    2fb4:	11 f5       	brne	.+68     	; 0x2ffa <get_the_decimal_number+0x1de>
			decimal_number=first_num*mul+number[j];//1*10+2=12,
    2fb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	88 89       	ldd	r24, Y+16	; 0x10
    2fbe:	88 2f       	mov	r24, r24
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	ac 01       	movw	r20, r24
    2fc4:	24 9f       	mul	r18, r20
    2fc6:	c0 01       	movw	r24, r0
    2fc8:	25 9f       	mul	r18, r21
    2fca:	90 0d       	add	r25, r0
    2fcc:	34 9f       	mul	r19, r20
    2fce:	90 0d       	add	r25, r0
    2fd0:	11 24       	eor	r1, r1
    2fd2:	ac 01       	movw	r20, r24
    2fd4:	89 89       	ldd	r24, Y+17	; 0x11
    2fd6:	88 2f       	mov	r24, r24
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	9c 01       	movw	r18, r24
    2fdc:	22 0f       	add	r18, r18
    2fde:	33 1f       	adc	r19, r19
    2fe0:	ce 01       	movw	r24, r28
    2fe2:	01 96       	adiw	r24, 0x01	; 1
    2fe4:	82 0f       	add	r24, r18
    2fe6:	93 1f       	adc	r25, r19
    2fe8:	fc 01       	movw	r30, r24
    2fea:	74 96       	adiw	r30, 0x14	; 20
    2fec:	80 81       	ld	r24, Z
    2fee:	91 81       	ldd	r25, Z+1	; 0x01
    2ff0:	84 0f       	add	r24, r20
    2ff2:	95 1f       	adc	r25, r21
    2ff4:	9c 8b       	std	Y+20, r25	; 0x14
    2ff6:	8b 8b       	std	Y+19, r24	; 0x13
    2ff8:	27 c0       	rjmp	.+78     	; 0x3048 <get_the_decimal_number+0x22c>
		}
		else if(j>1){
    2ffa:	89 89       	ldd	r24, Y+17	; 0x11
    2ffc:	82 30       	cpi	r24, 0x02	; 2
    2ffe:	f8 f0       	brcs	.+62     	; 0x303e <get_the_decimal_number+0x222>
			decimal_number=decimal_number*mul+number[j];//12*10+3=123,123*10+4
    3000:	88 89       	ldd	r24, Y+16	; 0x10
    3002:	28 2f       	mov	r18, r24
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	8b 89       	ldd	r24, Y+19	; 0x13
    3008:	9c 89       	ldd	r25, Y+20	; 0x14
    300a:	28 9f       	mul	r18, r24
    300c:	a0 01       	movw	r20, r0
    300e:	29 9f       	mul	r18, r25
    3010:	50 0d       	add	r21, r0
    3012:	38 9f       	mul	r19, r24
    3014:	50 0d       	add	r21, r0
    3016:	11 24       	eor	r1, r1
    3018:	89 89       	ldd	r24, Y+17	; 0x11
    301a:	88 2f       	mov	r24, r24
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	9c 01       	movw	r18, r24
    3020:	22 0f       	add	r18, r18
    3022:	33 1f       	adc	r19, r19
    3024:	ce 01       	movw	r24, r28
    3026:	01 96       	adiw	r24, 0x01	; 1
    3028:	82 0f       	add	r24, r18
    302a:	93 1f       	adc	r25, r19
    302c:	fc 01       	movw	r30, r24
    302e:	74 96       	adiw	r30, 0x14	; 20
    3030:	80 81       	ld	r24, Z
    3032:	91 81       	ldd	r25, Z+1	; 0x01
    3034:	84 0f       	add	r24, r20
    3036:	95 1f       	adc	r25, r21
    3038:	9c 8b       	std	Y+20, r25	; 0x14
    303a:	8b 8b       	std	Y+19, r24	; 0x13
    303c:	05 c0       	rjmp	.+10     	; 0x3048 <get_the_decimal_number+0x22c>
		}
		else{
			decimal_number=first_num;
    303e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3040:	88 2f       	mov	r24, r24
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	9c 8b       	std	Y+20, r25	; 0x14
    3046:	8b 8b       	std	Y+19, r24	; 0x13
		LCD_intgerToString(number[i]);
		i++;

	}
	number[i]='=';
	for(j=0;number[j]!='=';j++){
    3048:	89 89       	ldd	r24, Y+17	; 0x11
    304a:	8f 5f       	subi	r24, 0xFF	; 255
    304c:	89 8b       	std	Y+17, r24	; 0x11
    304e:	89 89       	ldd	r24, Y+17	; 0x11
    3050:	88 2f       	mov	r24, r24
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	9c 01       	movw	r18, r24
    3056:	22 0f       	add	r18, r18
    3058:	33 1f       	adc	r19, r19
    305a:	ce 01       	movw	r24, r28
    305c:	01 96       	adiw	r24, 0x01	; 1
    305e:	82 0f       	add	r24, r18
    3060:	93 1f       	adc	r25, r19
    3062:	fc 01       	movw	r30, r24
    3064:	74 96       	adiw	r30, 0x14	; 20
    3066:	80 81       	ld	r24, Z
    3068:	91 81       	ldd	r25, Z+1	; 0x01
    306a:	8d 33       	cpi	r24, 0x3D	; 61
    306c:	91 05       	cpc	r25, r1
    306e:	09 f0       	breq	.+2      	; 0x3072 <get_the_decimal_number+0x256>
    3070:	9c cf       	rjmp	.-200    	; 0x2faa <get_the_decimal_number+0x18e>
		else{
			decimal_number=first_num;
		}
	}

	return decimal_number;
    3072:	8b 89       	ldd	r24, Y+19	; 0x13
    3074:	9c 89       	ldd	r25, Y+20	; 0x14

}
    3076:	e4 96       	adiw	r28, 0x34	; 52
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	f8 94       	cli
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	cf 91       	pop	r28
    3084:	df 91       	pop	r29
    3086:	1f 91       	pop	r17
    3088:	0f 91       	pop	r16
    308a:	08 95       	ret

0000308c <Converter>:

void Converter (uint8 key){
    308c:	0f 93       	push	r16
    308e:	1f 93       	push	r17
    3090:	df 93       	push	r29
    3092:	cf 93       	push	r28
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
    3098:	c2 55       	subi	r28, 0x52	; 82
    309a:	d1 40       	sbci	r29, 0x01	; 1
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
    30a6:	fe 01       	movw	r30, r28
    30a8:	e8 5b       	subi	r30, 0xB8	; 184
    30aa:	fe 4f       	sbci	r31, 0xFE	; 254
    30ac:	80 83       	st	Z, r24
	uint16 decimal_number;
	uint8 option;
	switch (key){
    30ae:	fe 01       	movw	r30, r28
    30b0:	e8 5b       	subi	r30, 0xB8	; 184
    30b2:	fe 4f       	sbci	r31, 0xFE	; 254
    30b4:	80 81       	ld	r24, Z
    30b6:	28 2f       	mov	r18, r24
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	cf 5a       	subi	r28, 0xAF	; 175
    30bc:	de 4f       	sbci	r29, 0xFE	; 254
    30be:	39 83       	std	Y+1, r19	; 0x01
    30c0:	28 83       	st	Y, r18
    30c2:	c1 55       	subi	r28, 0x51	; 81
    30c4:	d1 40       	sbci	r29, 0x01	; 1
    30c6:	cf 5a       	subi	r28, 0xAF	; 175
    30c8:	de 4f       	sbci	r29, 0xFE	; 254
    30ca:	88 81       	ld	r24, Y
    30cc:	99 81       	ldd	r25, Y+1	; 0x01
    30ce:	c1 55       	subi	r28, 0x51	; 81
    30d0:	d1 40       	sbci	r29, 0x01	; 1
    30d2:	82 30       	cpi	r24, 0x02	; 2
    30d4:	91 05       	cpc	r25, r1
    30d6:	09 f4       	brne	.+2      	; 0x30da <Converter+0x4e>
    30d8:	f7 c4       	rjmp	.+2542   	; 0x3ac8 <Converter+0xa3c>
    30da:	cf 5a       	subi	r28, 0xAF	; 175
    30dc:	de 4f       	sbci	r29, 0xFE	; 254
    30de:	e8 81       	ld	r30, Y
    30e0:	f9 81       	ldd	r31, Y+1	; 0x01
    30e2:	c1 55       	subi	r28, 0x51	; 81
    30e4:	d1 40       	sbci	r29, 0x01	; 1
    30e6:	e3 30       	cpi	r30, 0x03	; 3
    30e8:	f1 05       	cpc	r31, r1
    30ea:	5c f4       	brge	.+22     	; 0x3102 <Converter+0x76>
    30ec:	cf 5a       	subi	r28, 0xAF	; 175
    30ee:	de 4f       	sbci	r29, 0xFE	; 254
    30f0:	28 81       	ld	r18, Y
    30f2:	39 81       	ldd	r19, Y+1	; 0x01
    30f4:	c1 55       	subi	r28, 0x51	; 81
    30f6:	d1 40       	sbci	r29, 0x01	; 1
    30f8:	21 30       	cpi	r18, 0x01	; 1
    30fa:	31 05       	cpc	r19, r1
    30fc:	d1 f0       	breq	.+52     	; 0x3132 <Converter+0xa6>
    30fe:	0c 94 43 2a 	jmp	0x5486	; 0x5486 <Converter+0x23fa>
    3102:	cf 5a       	subi	r28, 0xAF	; 175
    3104:	de 4f       	sbci	r29, 0xFE	; 254
    3106:	88 81       	ld	r24, Y
    3108:	99 81       	ldd	r25, Y+1	; 0x01
    310a:	c1 55       	subi	r28, 0x51	; 81
    310c:	d1 40       	sbci	r29, 0x01	; 1
    310e:	83 30       	cpi	r24, 0x03	; 3
    3110:	91 05       	cpc	r25, r1
    3112:	11 f4       	brne	.+4      	; 0x3118 <Converter+0x8c>
    3114:	0c 94 ea 21 	jmp	0x43d4	; 0x43d4 <Converter+0x1348>
    3118:	cf 5a       	subi	r28, 0xAF	; 175
    311a:	de 4f       	sbci	r29, 0xFE	; 254
    311c:	e8 81       	ld	r30, Y
    311e:	f9 81       	ldd	r31, Y+1	; 0x01
    3120:	c1 55       	subi	r28, 0x51	; 81
    3122:	d1 40       	sbci	r29, 0x01	; 1
    3124:	e4 30       	cpi	r30, 0x04	; 4
    3126:	f1 05       	cpc	r31, r1
    3128:	11 f4       	brne	.+4      	; 0x312e <Converter+0xa2>
    312a:	0c 94 57 26 	jmp	0x4cae	; 0x4cae <Converter+0x1c22>
    312e:	0c 94 43 2a 	jmp	0x5486	; 0x5486 <Converter+0x23fa>

	/*Decimal case*/
	case 1:
		LCD_clearScreen();
    3132:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"1-to Bin  2-to Hex");
    3136:	22 ee       	ldi	r18, 0xE2	; 226
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	60 e0       	ldi	r22, 0x00	; 0
    313e:	a9 01       	movw	r20, r18
    3140:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "3-to Oct");
    3144:	25 ef       	ldi	r18, 0xF5	; 245
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	60 e0       	ldi	r22, 0x00	; 0
    314c:	a9 01       	movw	r20, r18
    314e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
		option=KEYPAD_getPressedKey();
    3152:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    3156:	fe 01       	movw	r30, r28
    3158:	eb 5b       	subi	r30, 0xBB	; 187
    315a:	fe 4f       	sbci	r31, 0xFE	; 254
    315c:	80 83       	st	Z, r24
    315e:	fe 01       	movw	r30, r28
    3160:	ef 5c       	subi	r30, 0xCF	; 207
    3162:	fe 4f       	sbci	r31, 0xFE	; 254
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	af ea       	ldi	r26, 0xAF	; 175
    316a:	b3 e4       	ldi	r27, 0x43	; 67
    316c:	80 83       	st	Z, r24
    316e:	91 83       	std	Z+1, r25	; 0x01
    3170:	a2 83       	std	Z+2, r26	; 0x02
    3172:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3174:	8e 01       	movw	r16, r28
    3176:	03 5d       	subi	r16, 0xD3	; 211
    3178:	1e 4f       	sbci	r17, 0xFE	; 254
    317a:	fe 01       	movw	r30, r28
    317c:	ef 5c       	subi	r30, 0xCF	; 207
    317e:	fe 4f       	sbci	r31, 0xFE	; 254
    3180:	60 81       	ld	r22, Z
    3182:	71 81       	ldd	r23, Z+1	; 0x01
    3184:	82 81       	ldd	r24, Z+2	; 0x02
    3186:	93 81       	ldd	r25, Z+3	; 0x03
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	4a e7       	ldi	r20, 0x7A	; 122
    318e:	53 e4       	ldi	r21, 0x43	; 67
    3190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	f8 01       	movw	r30, r16
    319a:	80 83       	st	Z, r24
    319c:	91 83       	std	Z+1, r25	; 0x01
    319e:	a2 83       	std	Z+2, r26	; 0x02
    31a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31a2:	fe 01       	movw	r30, r28
    31a4:	e3 5d       	subi	r30, 0xD3	; 211
    31a6:	fe 4f       	sbci	r31, 0xFE	; 254
    31a8:	60 81       	ld	r22, Z
    31aa:	71 81       	ldd	r23, Z+1	; 0x01
    31ac:	82 81       	ldd	r24, Z+2	; 0x02
    31ae:	93 81       	ldd	r25, Z+3	; 0x03
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	40 e8       	ldi	r20, 0x80	; 128
    31b6:	5f e3       	ldi	r21, 0x3F	; 63
    31b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31bc:	88 23       	and	r24, r24
    31be:	44 f4       	brge	.+16     	; 0x31d0 <Converter+0x144>
		__ticks = 1;
    31c0:	fe 01       	movw	r30, r28
    31c2:	e5 5d       	subi	r30, 0xD5	; 213
    31c4:	fe 4f       	sbci	r31, 0xFE	; 254
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	91 83       	std	Z+1, r25	; 0x01
    31cc:	80 83       	st	Z, r24
    31ce:	64 c0       	rjmp	.+200    	; 0x3298 <Converter+0x20c>
	else if (__tmp > 65535)
    31d0:	fe 01       	movw	r30, r28
    31d2:	e3 5d       	subi	r30, 0xD3	; 211
    31d4:	fe 4f       	sbci	r31, 0xFE	; 254
    31d6:	60 81       	ld	r22, Z
    31d8:	71 81       	ldd	r23, Z+1	; 0x01
    31da:	82 81       	ldd	r24, Z+2	; 0x02
    31dc:	93 81       	ldd	r25, Z+3	; 0x03
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	3f ef       	ldi	r19, 0xFF	; 255
    31e2:	4f e7       	ldi	r20, 0x7F	; 127
    31e4:	57 e4       	ldi	r21, 0x47	; 71
    31e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31ea:	18 16       	cp	r1, r24
    31ec:	0c f0       	brlt	.+2      	; 0x31f0 <Converter+0x164>
    31ee:	43 c0       	rjmp	.+134    	; 0x3276 <Converter+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f0:	fe 01       	movw	r30, r28
    31f2:	ef 5c       	subi	r30, 0xCF	; 207
    31f4:	fe 4f       	sbci	r31, 0xFE	; 254
    31f6:	60 81       	ld	r22, Z
    31f8:	71 81       	ldd	r23, Z+1	; 0x01
    31fa:	82 81       	ldd	r24, Z+2	; 0x02
    31fc:	93 81       	ldd	r25, Z+3	; 0x03
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	40 e2       	ldi	r20, 0x20	; 32
    3204:	51 e4       	ldi	r21, 0x41	; 65
    3206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	8e 01       	movw	r16, r28
    3210:	05 5d       	subi	r16, 0xD5	; 213
    3212:	1e 4f       	sbci	r17, 0xFE	; 254
    3214:	bc 01       	movw	r22, r24
    3216:	cd 01       	movw	r24, r26
    3218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	f8 01       	movw	r30, r16
    3222:	91 83       	std	Z+1, r25	; 0x01
    3224:	80 83       	st	Z, r24
    3226:	1f c0       	rjmp	.+62     	; 0x3266 <Converter+0x1da>
    3228:	fe 01       	movw	r30, r28
    322a:	e7 5d       	subi	r30, 0xD7	; 215
    322c:	fe 4f       	sbci	r31, 0xFE	; 254
    322e:	89 e1       	ldi	r24, 0x19	; 25
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	91 83       	std	Z+1, r25	; 0x01
    3234:	80 83       	st	Z, r24
    3236:	fe 01       	movw	r30, r28
    3238:	e7 5d       	subi	r30, 0xD7	; 215
    323a:	fe 4f       	sbci	r31, 0xFE	; 254
    323c:	80 81       	ld	r24, Z
    323e:	91 81       	ldd	r25, Z+1	; 0x01
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	f1 f7       	brne	.-4      	; 0x3240 <Converter+0x1b4>
    3244:	fe 01       	movw	r30, r28
    3246:	e7 5d       	subi	r30, 0xD7	; 215
    3248:	fe 4f       	sbci	r31, 0xFE	; 254
    324a:	91 83       	std	Z+1, r25	; 0x01
    324c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324e:	de 01       	movw	r26, r28
    3250:	a5 5d       	subi	r26, 0xD5	; 213
    3252:	be 4f       	sbci	r27, 0xFE	; 254
    3254:	fe 01       	movw	r30, r28
    3256:	e5 5d       	subi	r30, 0xD5	; 213
    3258:	fe 4f       	sbci	r31, 0xFE	; 254
    325a:	80 81       	ld	r24, Z
    325c:	91 81       	ldd	r25, Z+1	; 0x01
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	11 96       	adiw	r26, 0x01	; 1
    3262:	9c 93       	st	X, r25
    3264:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3266:	fe 01       	movw	r30, r28
    3268:	e5 5d       	subi	r30, 0xD5	; 213
    326a:	fe 4f       	sbci	r31, 0xFE	; 254
    326c:	80 81       	ld	r24, Z
    326e:	91 81       	ldd	r25, Z+1	; 0x01
    3270:	00 97       	sbiw	r24, 0x00	; 0
    3272:	d1 f6       	brne	.-76     	; 0x3228 <Converter+0x19c>
    3274:	28 c0       	rjmp	.+80     	; 0x32c6 <Converter+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3276:	8e 01       	movw	r16, r28
    3278:	05 5d       	subi	r16, 0xD5	; 213
    327a:	1e 4f       	sbci	r17, 0xFE	; 254
    327c:	fe 01       	movw	r30, r28
    327e:	e3 5d       	subi	r30, 0xD3	; 211
    3280:	fe 4f       	sbci	r31, 0xFE	; 254
    3282:	60 81       	ld	r22, Z
    3284:	71 81       	ldd	r23, Z+1	; 0x01
    3286:	82 81       	ldd	r24, Z+2	; 0x02
    3288:	93 81       	ldd	r25, Z+3	; 0x03
    328a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	f8 01       	movw	r30, r16
    3294:	91 83       	std	Z+1, r25	; 0x01
    3296:	80 83       	st	Z, r24
    3298:	de 01       	movw	r26, r28
    329a:	a9 5d       	subi	r26, 0xD9	; 217
    329c:	be 4f       	sbci	r27, 0xFE	; 254
    329e:	fe 01       	movw	r30, r28
    32a0:	e5 5d       	subi	r30, 0xD5	; 213
    32a2:	fe 4f       	sbci	r31, 0xFE	; 254
    32a4:	80 81       	ld	r24, Z
    32a6:	91 81       	ldd	r25, Z+1	; 0x01
    32a8:	11 96       	adiw	r26, 0x01	; 1
    32aa:	9c 93       	st	X, r25
    32ac:	8e 93       	st	-X, r24
    32ae:	fe 01       	movw	r30, r28
    32b0:	e9 5d       	subi	r30, 0xD9	; 217
    32b2:	fe 4f       	sbci	r31, 0xFE	; 254
    32b4:	80 81       	ld	r24, Z
    32b6:	91 81       	ldd	r25, Z+1	; 0x01
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	f1 f7       	brne	.-4      	; 0x32b8 <Converter+0x22c>
    32bc:	fe 01       	movw	r30, r28
    32be:	e9 5d       	subi	r30, 0xD9	; 217
    32c0:	fe 4f       	sbci	r31, 0xFE	; 254
    32c2:	91 83       	std	Z+1, r25	; 0x01
    32c4:	80 83       	st	Z, r24
		_delay_ms(KEYPAD_PRESSED_TIME);

		/*switch case for choosing the option and printing it*/
		switch(option){
    32c6:	fe 01       	movw	r30, r28
    32c8:	eb 5b       	subi	r30, 0xBB	; 187
    32ca:	fe 4f       	sbci	r31, 0xFE	; 254
    32cc:	80 81       	ld	r24, Z
    32ce:	28 2f       	mov	r18, r24
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	c1 5b       	subi	r28, 0xB1	; 177
    32d4:	de 4f       	sbci	r29, 0xFE	; 254
    32d6:	39 83       	std	Y+1, r19	; 0x01
    32d8:	28 83       	st	Y, r18
    32da:	cf 54       	subi	r28, 0x4F	; 79
    32dc:	d1 40       	sbci	r29, 0x01	; 1
    32de:	c1 5b       	subi	r28, 0xB1	; 177
    32e0:	de 4f       	sbci	r29, 0xFE	; 254
    32e2:	88 81       	ld	r24, Y
    32e4:	99 81       	ldd	r25, Y+1	; 0x01
    32e6:	cf 54       	subi	r28, 0x4F	; 79
    32e8:	d1 40       	sbci	r29, 0x01	; 1
    32ea:	82 30       	cpi	r24, 0x02	; 2
    32ec:	91 05       	cpc	r25, r1
    32ee:	09 f4       	brne	.+2      	; 0x32f2 <Converter+0x266>
    32f0:	12 c1       	rjmp	.+548    	; 0x3516 <Converter+0x48a>
    32f2:	c1 5b       	subi	r28, 0xB1	; 177
    32f4:	de 4f       	sbci	r29, 0xFE	; 254
    32f6:	e8 81       	ld	r30, Y
    32f8:	f9 81       	ldd	r31, Y+1	; 0x01
    32fa:	cf 54       	subi	r28, 0x4F	; 79
    32fc:	d1 40       	sbci	r29, 0x01	; 1
    32fe:	e3 30       	cpi	r30, 0x03	; 3
    3300:	f1 05       	cpc	r31, r1
    3302:	09 f4       	brne	.+2      	; 0x3306 <Converter+0x27a>
    3304:	20 c2       	rjmp	.+1088   	; 0x3746 <Converter+0x6ba>
    3306:	c1 5b       	subi	r28, 0xB1	; 177
    3308:	de 4f       	sbci	r29, 0xFE	; 254
    330a:	28 81       	ld	r18, Y
    330c:	39 81       	ldd	r19, Y+1	; 0x01
    330e:	cf 54       	subi	r28, 0x4F	; 79
    3310:	d1 40       	sbci	r29, 0x01	; 1
    3312:	21 30       	cpi	r18, 0x01	; 1
    3314:	31 05       	cpc	r19, r1
    3316:	09 f0       	breq	.+2      	; 0x331a <Converter+0x28e>
    3318:	10 c3       	rjmp	.+1568   	; 0x393a <Converter+0x8ae>
		case 1:
			decimal_number=get_the_decimal_number();
    331a:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <get_the_decimal_number>
    331e:	fe 01       	movw	r30, r28
    3320:	ea 5b       	subi	r30, 0xBA	; 186
    3322:	fe 4f       	sbci	r31, 0xFE	; 254
    3324:	91 83       	std	Z+1, r25	; 0x01
    3326:	80 83       	st	Z, r24
			Dec_to_bin(decimal_number);
    3328:	fe 01       	movw	r30, r28
    332a:	ea 5b       	subi	r30, 0xBA	; 186
    332c:	fe 4f       	sbci	r31, 0xFE	; 254
    332e:	80 81       	ld	r24, Z
    3330:	91 81       	ldd	r25, Z+1	; 0x01
    3332:	0e 94 06 11 	call	0x220c	; 0x220c <Dec_to_bin>
			LCD_clearScreen();
    3336:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "binary number = ");
    333a:	2e ef       	ldi	r18, 0xFE	; 254
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	60 e0       	ldi	r22, 0x00	; 0
    3342:	a9 01       	movw	r20, r18
    3344:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	60 e0       	ldi	r22, 0x00	; 0
    334c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_moveCursor>
			for(int i =index_of_binary_num-1; i>=0;i--){
    3350:	80 91 f3 01 	lds	r24, 0x01F3
    3354:	88 2f       	mov	r24, r24
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	fe 01       	movw	r30, r28
    335a:	ed 5b       	subi	r30, 0xBD	; 189
    335c:	fe 4f       	sbci	r31, 0xFE	; 254
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	91 83       	std	Z+1, r25	; 0x01
    3362:	80 83       	st	Z, r24
    3364:	1a c0       	rjmp	.+52     	; 0x339a <Converter+0x30e>

				LCD_intgerToString(bin[i]);
    3366:	fe 01       	movw	r30, r28
    3368:	ed 5b       	subi	r30, 0xBD	; 189
    336a:	fe 4f       	sbci	r31, 0xFE	; 254
    336c:	80 81       	ld	r24, Z
    336e:	91 81       	ldd	r25, Z+1	; 0x01
    3370:	88 0f       	add	r24, r24
    3372:	99 1f       	adc	r25, r25
    3374:	fc 01       	movw	r30, r24
    3376:	ed 52       	subi	r30, 0x2D	; 45
    3378:	fe 4f       	sbci	r31, 0xFE	; 254
    337a:	80 81       	ld	r24, Z
    337c:	91 81       	ldd	r25, Z+1	; 0x01
    337e:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>
			decimal_number=get_the_decimal_number();
			Dec_to_bin(decimal_number);
			LCD_clearScreen();
			LCD_displayStringRowColumn(0, 0, "binary number = ");
			LCD_moveCursor(1, 0);
			for(int i =index_of_binary_num-1; i>=0;i--){
    3382:	de 01       	movw	r26, r28
    3384:	ad 5b       	subi	r26, 0xBD	; 189
    3386:	be 4f       	sbci	r27, 0xFE	; 254
    3388:	fe 01       	movw	r30, r28
    338a:	ed 5b       	subi	r30, 0xBD	; 189
    338c:	fe 4f       	sbci	r31, 0xFE	; 254
    338e:	80 81       	ld	r24, Z
    3390:	91 81       	ldd	r25, Z+1	; 0x01
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	11 96       	adiw	r26, 0x01	; 1
    3396:	9c 93       	st	X, r25
    3398:	8e 93       	st	-X, r24
    339a:	fe 01       	movw	r30, r28
    339c:	ed 5b       	subi	r30, 0xBD	; 189
    339e:	fe 4f       	sbci	r31, 0xFE	; 254
    33a0:	80 81       	ld	r24, Z
    33a2:	91 81       	ldd	r25, Z+1	; 0x01
    33a4:	99 23       	and	r25, r25
    33a6:	fc f6       	brge	.-66     	; 0x3366 <Converter+0x2da>
    33a8:	fe 01       	movw	r30, r28
    33aa:	ed 5d       	subi	r30, 0xDD	; 221
    33ac:	fe 4f       	sbci	r31, 0xFE	; 254
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	aa ef       	ldi	r26, 0xFA	; 250
    33b4:	b3 e4       	ldi	r27, 0x43	; 67
    33b6:	80 83       	st	Z, r24
    33b8:	91 83       	std	Z+1, r25	; 0x01
    33ba:	a2 83       	std	Z+2, r26	; 0x02
    33bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33be:	8e 01       	movw	r16, r28
    33c0:	01 5e       	subi	r16, 0xE1	; 225
    33c2:	1e 4f       	sbci	r17, 0xFE	; 254
    33c4:	fe 01       	movw	r30, r28
    33c6:	ed 5d       	subi	r30, 0xDD	; 221
    33c8:	fe 4f       	sbci	r31, 0xFE	; 254
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	4a e7       	ldi	r20, 0x7A	; 122
    33d8:	53 e4       	ldi	r21, 0x43	; 67
    33da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	f8 01       	movw	r30, r16
    33e4:	80 83       	st	Z, r24
    33e6:	91 83       	std	Z+1, r25	; 0x01
    33e8:	a2 83       	std	Z+2, r26	; 0x02
    33ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33ec:	fe 01       	movw	r30, r28
    33ee:	e1 5e       	subi	r30, 0xE1	; 225
    33f0:	fe 4f       	sbci	r31, 0xFE	; 254
    33f2:	60 81       	ld	r22, Z
    33f4:	71 81       	ldd	r23, Z+1	; 0x01
    33f6:	82 81       	ldd	r24, Z+2	; 0x02
    33f8:	93 81       	ldd	r25, Z+3	; 0x03
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e8       	ldi	r20, 0x80	; 128
    3400:	5f e3       	ldi	r21, 0x3F	; 63
    3402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3406:	88 23       	and	r24, r24
    3408:	44 f4       	brge	.+16     	; 0x341a <Converter+0x38e>
		__ticks = 1;
    340a:	fe 01       	movw	r30, r28
    340c:	e3 5e       	subi	r30, 0xE3	; 227
    340e:	fe 4f       	sbci	r31, 0xFE	; 254
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	91 83       	std	Z+1, r25	; 0x01
    3416:	80 83       	st	Z, r24
    3418:	65 c0       	rjmp	.+202    	; 0x34e4 <Converter+0x458>
	else if (__tmp > 65535)
    341a:	fe 01       	movw	r30, r28
    341c:	e1 5e       	subi	r30, 0xE1	; 225
    341e:	fe 4f       	sbci	r31, 0xFE	; 254
    3420:	60 81       	ld	r22, Z
    3422:	71 81       	ldd	r23, Z+1	; 0x01
    3424:	82 81       	ldd	r24, Z+2	; 0x02
    3426:	93 81       	ldd	r25, Z+3	; 0x03
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	3f ef       	ldi	r19, 0xFF	; 255
    342c:	4f e7       	ldi	r20, 0x7F	; 127
    342e:	57 e4       	ldi	r21, 0x47	; 71
    3430:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3434:	18 16       	cp	r1, r24
    3436:	0c f0       	brlt	.+2      	; 0x343a <Converter+0x3ae>
    3438:	44 c0       	rjmp	.+136    	; 0x34c2 <Converter+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    343a:	fe 01       	movw	r30, r28
    343c:	ed 5d       	subi	r30, 0xDD	; 221
    343e:	fe 4f       	sbci	r31, 0xFE	; 254
    3440:	60 81       	ld	r22, Z
    3442:	71 81       	ldd	r23, Z+1	; 0x01
    3444:	82 81       	ldd	r24, Z+2	; 0x02
    3446:	93 81       	ldd	r25, Z+3	; 0x03
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e2       	ldi	r20, 0x20	; 32
    344e:	51 e4       	ldi	r21, 0x41	; 65
    3450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	8e 01       	movw	r16, r28
    345a:	03 5e       	subi	r16, 0xE3	; 227
    345c:	1e 4f       	sbci	r17, 0xFE	; 254
    345e:	bc 01       	movw	r22, r24
    3460:	cd 01       	movw	r24, r26
    3462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	f8 01       	movw	r30, r16
    346c:	91 83       	std	Z+1, r25	; 0x01
    346e:	80 83       	st	Z, r24
    3470:	1f c0       	rjmp	.+62     	; 0x34b0 <Converter+0x424>
    3472:	fe 01       	movw	r30, r28
    3474:	e5 5e       	subi	r30, 0xE5	; 229
    3476:	fe 4f       	sbci	r31, 0xFE	; 254
    3478:	89 e1       	ldi	r24, 0x19	; 25
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	91 83       	std	Z+1, r25	; 0x01
    347e:	80 83       	st	Z, r24
    3480:	fe 01       	movw	r30, r28
    3482:	e5 5e       	subi	r30, 0xE5	; 229
    3484:	fe 4f       	sbci	r31, 0xFE	; 254
    3486:	80 81       	ld	r24, Z
    3488:	91 81       	ldd	r25, Z+1	; 0x01
    348a:	01 97       	sbiw	r24, 0x01	; 1
    348c:	f1 f7       	brne	.-4      	; 0x348a <Converter+0x3fe>
    348e:	fe 01       	movw	r30, r28
    3490:	e5 5e       	subi	r30, 0xE5	; 229
    3492:	fe 4f       	sbci	r31, 0xFE	; 254
    3494:	91 83       	std	Z+1, r25	; 0x01
    3496:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3498:	de 01       	movw	r26, r28
    349a:	a3 5e       	subi	r26, 0xE3	; 227
    349c:	be 4f       	sbci	r27, 0xFE	; 254
    349e:	fe 01       	movw	r30, r28
    34a0:	e3 5e       	subi	r30, 0xE3	; 227
    34a2:	fe 4f       	sbci	r31, 0xFE	; 254
    34a4:	80 81       	ld	r24, Z
    34a6:	91 81       	ldd	r25, Z+1	; 0x01
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	11 96       	adiw	r26, 0x01	; 1
    34ac:	9c 93       	st	X, r25
    34ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b0:	fe 01       	movw	r30, r28
    34b2:	e3 5e       	subi	r30, 0xE3	; 227
    34b4:	fe 4f       	sbci	r31, 0xFE	; 254
    34b6:	80 81       	ld	r24, Z
    34b8:	91 81       	ldd	r25, Z+1	; 0x01
    34ba:	00 97       	sbiw	r24, 0x00	; 0
    34bc:	d1 f6       	brne	.-76     	; 0x3472 <Converter+0x3e6>
    34be:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c2:	8e 01       	movw	r16, r28
    34c4:	03 5e       	subi	r16, 0xE3	; 227
    34c6:	1e 4f       	sbci	r17, 0xFE	; 254
    34c8:	fe 01       	movw	r30, r28
    34ca:	e1 5e       	subi	r30, 0xE1	; 225
    34cc:	fe 4f       	sbci	r31, 0xFE	; 254
    34ce:	60 81       	ld	r22, Z
    34d0:	71 81       	ldd	r23, Z+1	; 0x01
    34d2:	82 81       	ldd	r24, Z+2	; 0x02
    34d4:	93 81       	ldd	r25, Z+3	; 0x03
    34d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	f8 01       	movw	r30, r16
    34e0:	91 83       	std	Z+1, r25	; 0x01
    34e2:	80 83       	st	Z, r24
    34e4:	de 01       	movw	r26, r28
    34e6:	a7 5e       	subi	r26, 0xE7	; 231
    34e8:	be 4f       	sbci	r27, 0xFE	; 254
    34ea:	fe 01       	movw	r30, r28
    34ec:	e3 5e       	subi	r30, 0xE3	; 227
    34ee:	fe 4f       	sbci	r31, 0xFE	; 254
    34f0:	80 81       	ld	r24, Z
    34f2:	91 81       	ldd	r25, Z+1	; 0x01
    34f4:	11 96       	adiw	r26, 0x01	; 1
    34f6:	9c 93       	st	X, r25
    34f8:	8e 93       	st	-X, r24
    34fa:	fe 01       	movw	r30, r28
    34fc:	e7 5e       	subi	r30, 0xE7	; 231
    34fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3500:	80 81       	ld	r24, Z
    3502:	91 81       	ldd	r25, Z+1	; 0x01
    3504:	01 97       	sbiw	r24, 0x01	; 1
    3506:	f1 f7       	brne	.-4      	; 0x3504 <Converter+0x478>
    3508:	fe 01       	movw	r30, r28
    350a:	e7 5e       	subi	r30, 0xE7	; 231
    350c:	fe 4f       	sbci	r31, 0xFE	; 254
    350e:	91 83       	std	Z+1, r25	; 0x01
    3510:	80 83       	st	Z, r24
    3512:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
			}
			_delay_ms(show_time);
			break;

		case 2:
			decimal_number=get_the_decimal_number();
    3516:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <get_the_decimal_number>
    351a:	fe 01       	movw	r30, r28
    351c:	ea 5b       	subi	r30, 0xBA	; 186
    351e:	fe 4f       	sbci	r31, 0xFE	; 254
    3520:	91 83       	std	Z+1, r25	; 0x01
    3522:	80 83       	st	Z, r24
			Dec_to_Hex(decimal_number);
    3524:	fe 01       	movw	r30, r28
    3526:	ea 5b       	subi	r30, 0xBA	; 186
    3528:	fe 4f       	sbci	r31, 0xFE	; 254
    352a:	80 81       	ld	r24, Z
    352c:	91 81       	ldd	r25, Z+1	; 0x01
    352e:	0e 94 4a 10 	call	0x2094	; 0x2094 <Dec_to_Hex>
			LCD_clearScreen();
    3532:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Hex= ");
    3536:	2f e0       	ldi	r18, 0x0F	; 15
    3538:	31 e0       	ldi	r19, 0x01	; 1
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	60 e0       	ldi	r22, 0x00	; 0
    353e:	a9 01       	movw	r20, r18
    3540:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
			for(int i =index_of_hex_number-1; i>=0;i--){
    3544:	80 91 b2 01 	lds	r24, 0x01B2
    3548:	88 2f       	mov	r24, r24
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	fe 01       	movw	r30, r28
    354e:	ef 5b       	subi	r30, 0xBF	; 191
    3550:	fe 4f       	sbci	r31, 0xFE	; 254
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	91 83       	std	Z+1, r25	; 0x01
    3556:	80 83       	st	Z, r24
    3558:	38 c0       	rjmp	.+112    	; 0x35ca <Converter+0x53e>
				if(hex[i] >= 0 && hex[i] <= 9){
    355a:	fe 01       	movw	r30, r28
    355c:	ef 5b       	subi	r30, 0xBF	; 191
    355e:	fe 4f       	sbci	r31, 0xFE	; 254
    3560:	80 81       	ld	r24, Z
    3562:	91 81       	ldd	r25, Z+1	; 0x01
    3564:	88 0f       	add	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	fc 01       	movw	r30, r24
    356a:	ed 54       	subi	r30, 0x4D	; 77
    356c:	fe 4f       	sbci	r31, 0xFE	; 254
    356e:	80 81       	ld	r24, Z
    3570:	91 81       	ldd	r25, Z+1	; 0x01
    3572:	8a 30       	cpi	r24, 0x0A	; 10
    3574:	91 05       	cpc	r25, r1
    3576:	78 f4       	brcc	.+30     	; 0x3596 <Converter+0x50a>

					LCD_intgerToString(hex[i]);
    3578:	fe 01       	movw	r30, r28
    357a:	ef 5b       	subi	r30, 0xBF	; 191
    357c:	fe 4f       	sbci	r31, 0xFE	; 254
    357e:	80 81       	ld	r24, Z
    3580:	91 81       	ldd	r25, Z+1	; 0x01
    3582:	88 0f       	add	r24, r24
    3584:	99 1f       	adc	r25, r25
    3586:	fc 01       	movw	r30, r24
    3588:	ed 54       	subi	r30, 0x4D	; 77
    358a:	fe 4f       	sbci	r31, 0xFE	; 254
    358c:	80 81       	ld	r24, Z
    358e:	91 81       	ldd	r25, Z+1	; 0x01
    3590:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>
    3594:	0e c0       	rjmp	.+28     	; 0x35b2 <Converter+0x526>
				}
				else{
					LCD_displayCharacter(hex[i]);
    3596:	fe 01       	movw	r30, r28
    3598:	ef 5b       	subi	r30, 0xBF	; 191
    359a:	fe 4f       	sbci	r31, 0xFE	; 254
    359c:	80 81       	ld	r24, Z
    359e:	91 81       	ldd	r25, Z+1	; 0x01
    35a0:	88 0f       	add	r24, r24
    35a2:	99 1f       	adc	r25, r25
    35a4:	fc 01       	movw	r30, r24
    35a6:	ed 54       	subi	r30, 0x4D	; 77
    35a8:	fe 4f       	sbci	r31, 0xFE	; 254
    35aa:	80 81       	ld	r24, Z
    35ac:	91 81       	ldd	r25, Z+1	; 0x01
    35ae:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <LCD_displayCharacter>
		case 2:
			decimal_number=get_the_decimal_number();
			Dec_to_Hex(decimal_number);
			LCD_clearScreen();
			LCD_displayStringRowColumn(0, 0, "Hex= ");
			for(int i =index_of_hex_number-1; i>=0;i--){
    35b2:	de 01       	movw	r26, r28
    35b4:	af 5b       	subi	r26, 0xBF	; 191
    35b6:	be 4f       	sbci	r27, 0xFE	; 254
    35b8:	fe 01       	movw	r30, r28
    35ba:	ef 5b       	subi	r30, 0xBF	; 191
    35bc:	fe 4f       	sbci	r31, 0xFE	; 254
    35be:	80 81       	ld	r24, Z
    35c0:	91 81       	ldd	r25, Z+1	; 0x01
    35c2:	01 97       	sbiw	r24, 0x01	; 1
    35c4:	11 96       	adiw	r26, 0x01	; 1
    35c6:	9c 93       	st	X, r25
    35c8:	8e 93       	st	-X, r24
    35ca:	fe 01       	movw	r30, r28
    35cc:	ef 5b       	subi	r30, 0xBF	; 191
    35ce:	fe 4f       	sbci	r31, 0xFE	; 254
    35d0:	80 81       	ld	r24, Z
    35d2:	91 81       	ldd	r25, Z+1	; 0x01
    35d4:	99 23       	and	r25, r25
    35d6:	0c f6       	brge	.-126    	; 0x355a <Converter+0x4ce>
    35d8:	fe 01       	movw	r30, r28
    35da:	eb 5e       	subi	r30, 0xEB	; 235
    35dc:	fe 4f       	sbci	r31, 0xFE	; 254
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	aa ef       	ldi	r26, 0xFA	; 250
    35e4:	b3 e4       	ldi	r27, 0x43	; 67
    35e6:	80 83       	st	Z, r24
    35e8:	91 83       	std	Z+1, r25	; 0x01
    35ea:	a2 83       	std	Z+2, r26	; 0x02
    35ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ee:	8e 01       	movw	r16, r28
    35f0:	0f 5e       	subi	r16, 0xEF	; 239
    35f2:	1e 4f       	sbci	r17, 0xFE	; 254
    35f4:	fe 01       	movw	r30, r28
    35f6:	eb 5e       	subi	r30, 0xEB	; 235
    35f8:	fe 4f       	sbci	r31, 0xFE	; 254
    35fa:	60 81       	ld	r22, Z
    35fc:	71 81       	ldd	r23, Z+1	; 0x01
    35fe:	82 81       	ldd	r24, Z+2	; 0x02
    3600:	93 81       	ldd	r25, Z+3	; 0x03
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	4a e7       	ldi	r20, 0x7A	; 122
    3608:	53 e4       	ldi	r21, 0x43	; 67
    360a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	f8 01       	movw	r30, r16
    3614:	80 83       	st	Z, r24
    3616:	91 83       	std	Z+1, r25	; 0x01
    3618:	a2 83       	std	Z+2, r26	; 0x02
    361a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    361c:	fe 01       	movw	r30, r28
    361e:	ef 5e       	subi	r30, 0xEF	; 239
    3620:	fe 4f       	sbci	r31, 0xFE	; 254
    3622:	60 81       	ld	r22, Z
    3624:	71 81       	ldd	r23, Z+1	; 0x01
    3626:	82 81       	ldd	r24, Z+2	; 0x02
    3628:	93 81       	ldd	r25, Z+3	; 0x03
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	40 e8       	ldi	r20, 0x80	; 128
    3630:	5f e3       	ldi	r21, 0x3F	; 63
    3632:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3636:	88 23       	and	r24, r24
    3638:	44 f4       	brge	.+16     	; 0x364a <Converter+0x5be>
		__ticks = 1;
    363a:	fe 01       	movw	r30, r28
    363c:	e1 5f       	subi	r30, 0xF1	; 241
    363e:	fe 4f       	sbci	r31, 0xFE	; 254
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	91 83       	std	Z+1, r25	; 0x01
    3646:	80 83       	st	Z, r24
    3648:	65 c0       	rjmp	.+202    	; 0x3714 <Converter+0x688>
	else if (__tmp > 65535)
    364a:	fe 01       	movw	r30, r28
    364c:	ef 5e       	subi	r30, 0xEF	; 239
    364e:	fe 4f       	sbci	r31, 0xFE	; 254
    3650:	60 81       	ld	r22, Z
    3652:	71 81       	ldd	r23, Z+1	; 0x01
    3654:	82 81       	ldd	r24, Z+2	; 0x02
    3656:	93 81       	ldd	r25, Z+3	; 0x03
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	3f ef       	ldi	r19, 0xFF	; 255
    365c:	4f e7       	ldi	r20, 0x7F	; 127
    365e:	57 e4       	ldi	r21, 0x47	; 71
    3660:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3664:	18 16       	cp	r1, r24
    3666:	0c f0       	brlt	.+2      	; 0x366a <Converter+0x5de>
    3668:	44 c0       	rjmp	.+136    	; 0x36f2 <Converter+0x666>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    366a:	fe 01       	movw	r30, r28
    366c:	eb 5e       	subi	r30, 0xEB	; 235
    366e:	fe 4f       	sbci	r31, 0xFE	; 254
    3670:	60 81       	ld	r22, Z
    3672:	71 81       	ldd	r23, Z+1	; 0x01
    3674:	82 81       	ldd	r24, Z+2	; 0x02
    3676:	93 81       	ldd	r25, Z+3	; 0x03
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e2       	ldi	r20, 0x20	; 32
    367e:	51 e4       	ldi	r21, 0x41	; 65
    3680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	8e 01       	movw	r16, r28
    368a:	01 5f       	subi	r16, 0xF1	; 241
    368c:	1e 4f       	sbci	r17, 0xFE	; 254
    368e:	bc 01       	movw	r22, r24
    3690:	cd 01       	movw	r24, r26
    3692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	f8 01       	movw	r30, r16
    369c:	91 83       	std	Z+1, r25	; 0x01
    369e:	80 83       	st	Z, r24
    36a0:	1f c0       	rjmp	.+62     	; 0x36e0 <Converter+0x654>
    36a2:	fe 01       	movw	r30, r28
    36a4:	e3 5f       	subi	r30, 0xF3	; 243
    36a6:	fe 4f       	sbci	r31, 0xFE	; 254
    36a8:	89 e1       	ldi	r24, 0x19	; 25
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	91 83       	std	Z+1, r25	; 0x01
    36ae:	80 83       	st	Z, r24
    36b0:	fe 01       	movw	r30, r28
    36b2:	e3 5f       	subi	r30, 0xF3	; 243
    36b4:	fe 4f       	sbci	r31, 0xFE	; 254
    36b6:	80 81       	ld	r24, Z
    36b8:	91 81       	ldd	r25, Z+1	; 0x01
    36ba:	01 97       	sbiw	r24, 0x01	; 1
    36bc:	f1 f7       	brne	.-4      	; 0x36ba <Converter+0x62e>
    36be:	fe 01       	movw	r30, r28
    36c0:	e3 5f       	subi	r30, 0xF3	; 243
    36c2:	fe 4f       	sbci	r31, 0xFE	; 254
    36c4:	91 83       	std	Z+1, r25	; 0x01
    36c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c8:	de 01       	movw	r26, r28
    36ca:	a1 5f       	subi	r26, 0xF1	; 241
    36cc:	be 4f       	sbci	r27, 0xFE	; 254
    36ce:	fe 01       	movw	r30, r28
    36d0:	e1 5f       	subi	r30, 0xF1	; 241
    36d2:	fe 4f       	sbci	r31, 0xFE	; 254
    36d4:	80 81       	ld	r24, Z
    36d6:	91 81       	ldd	r25, Z+1	; 0x01
    36d8:	01 97       	sbiw	r24, 0x01	; 1
    36da:	11 96       	adiw	r26, 0x01	; 1
    36dc:	9c 93       	st	X, r25
    36de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e0:	fe 01       	movw	r30, r28
    36e2:	e1 5f       	subi	r30, 0xF1	; 241
    36e4:	fe 4f       	sbci	r31, 0xFE	; 254
    36e6:	80 81       	ld	r24, Z
    36e8:	91 81       	ldd	r25, Z+1	; 0x01
    36ea:	00 97       	sbiw	r24, 0x00	; 0
    36ec:	d1 f6       	brne	.-76     	; 0x36a2 <Converter+0x616>
    36ee:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f2:	8e 01       	movw	r16, r28
    36f4:	01 5f       	subi	r16, 0xF1	; 241
    36f6:	1e 4f       	sbci	r17, 0xFE	; 254
    36f8:	fe 01       	movw	r30, r28
    36fa:	ef 5e       	subi	r30, 0xEF	; 239
    36fc:	fe 4f       	sbci	r31, 0xFE	; 254
    36fe:	60 81       	ld	r22, Z
    3700:	71 81       	ldd	r23, Z+1	; 0x01
    3702:	82 81       	ldd	r24, Z+2	; 0x02
    3704:	93 81       	ldd	r25, Z+3	; 0x03
    3706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370a:	dc 01       	movw	r26, r24
    370c:	cb 01       	movw	r24, r22
    370e:	f8 01       	movw	r30, r16
    3710:	91 83       	std	Z+1, r25	; 0x01
    3712:	80 83       	st	Z, r24
    3714:	de 01       	movw	r26, r28
    3716:	a5 5f       	subi	r26, 0xF5	; 245
    3718:	be 4f       	sbci	r27, 0xFE	; 254
    371a:	fe 01       	movw	r30, r28
    371c:	e1 5f       	subi	r30, 0xF1	; 241
    371e:	fe 4f       	sbci	r31, 0xFE	; 254
    3720:	80 81       	ld	r24, Z
    3722:	91 81       	ldd	r25, Z+1	; 0x01
    3724:	11 96       	adiw	r26, 0x01	; 1
    3726:	9c 93       	st	X, r25
    3728:	8e 93       	st	-X, r24
    372a:	fe 01       	movw	r30, r28
    372c:	e5 5f       	subi	r30, 0xF5	; 245
    372e:	fe 4f       	sbci	r31, 0xFE	; 254
    3730:	80 81       	ld	r24, Z
    3732:	91 81       	ldd	r25, Z+1	; 0x01
    3734:	01 97       	sbiw	r24, 0x01	; 1
    3736:	f1 f7       	brne	.-4      	; 0x3734 <Converter+0x6a8>
    3738:	fe 01       	movw	r30, r28
    373a:	e5 5f       	subi	r30, 0xF5	; 245
    373c:	fe 4f       	sbci	r31, 0xFE	; 254
    373e:	91 83       	std	Z+1, r25	; 0x01
    3740:	80 83       	st	Z, r24
    3742:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
			}
			_delay_ms(show_time);
			break;

		case 3:
			decimal_number=get_the_decimal_number();
    3746:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <get_the_decimal_number>
    374a:	fe 01       	movw	r30, r28
    374c:	ea 5b       	subi	r30, 0xBA	; 186
    374e:	fe 4f       	sbci	r31, 0xFE	; 254
    3750:	91 83       	std	Z+1, r25	; 0x01
    3752:	80 83       	st	Z, r24
			Dec_to_oct(decimal_number);
    3754:	fe 01       	movw	r30, r28
    3756:	ea 5b       	subi	r30, 0xBA	; 186
    3758:	fe 4f       	sbci	r31, 0xFE	; 254
    375a:	80 81       	ld	r24, Z
    375c:	91 81       	ldd	r25, Z+1	; 0x01
    375e:	0e 94 35 11 	call	0x226a	; 0x226a <Dec_to_oct>
			LCD_clearScreen();
    3762:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Oct= ");
    3766:	25 e1       	ldi	r18, 0x15	; 21
    3768:	31 e0       	ldi	r19, 0x01	; 1
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	a9 01       	movw	r20, r18
    3770:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
			for(int i =index_of_octal_number-1; i>=0;i--){
    3774:	80 91 14 02 	lds	r24, 0x0214
    3778:	88 2f       	mov	r24, r24
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	fe 01       	movw	r30, r28
    377e:	e1 5c       	subi	r30, 0xC1	; 193
    3780:	fe 4f       	sbci	r31, 0xFE	; 254
    3782:	01 97       	sbiw	r24, 0x01	; 1
    3784:	91 83       	std	Z+1, r25	; 0x01
    3786:	80 83       	st	Z, r24
    3788:	1a c0       	rjmp	.+52     	; 0x37be <Converter+0x732>

				LCD_intgerToString(Octal_number[i]);
    378a:	fe 01       	movw	r30, r28
    378c:	e1 5c       	subi	r30, 0xC1	; 193
    378e:	fe 4f       	sbci	r31, 0xFE	; 254
    3790:	80 81       	ld	r24, Z
    3792:	91 81       	ldd	r25, Z+1	; 0x01
    3794:	88 0f       	add	r24, r24
    3796:	99 1f       	adc	r25, r25
    3798:	fc 01       	movw	r30, r24
    379a:	ec 50       	subi	r30, 0x0C	; 12
    379c:	fe 4f       	sbci	r31, 0xFE	; 254
    379e:	80 81       	ld	r24, Z
    37a0:	91 81       	ldd	r25, Z+1	; 0x01
    37a2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>
		case 3:
			decimal_number=get_the_decimal_number();
			Dec_to_oct(decimal_number);
			LCD_clearScreen();
			LCD_displayStringRowColumn(0, 0, "Oct= ");
			for(int i =index_of_octal_number-1; i>=0;i--){
    37a6:	de 01       	movw	r26, r28
    37a8:	a1 5c       	subi	r26, 0xC1	; 193
    37aa:	be 4f       	sbci	r27, 0xFE	; 254
    37ac:	fe 01       	movw	r30, r28
    37ae:	e1 5c       	subi	r30, 0xC1	; 193
    37b0:	fe 4f       	sbci	r31, 0xFE	; 254
    37b2:	80 81       	ld	r24, Z
    37b4:	91 81       	ldd	r25, Z+1	; 0x01
    37b6:	01 97       	sbiw	r24, 0x01	; 1
    37b8:	11 96       	adiw	r26, 0x01	; 1
    37ba:	9c 93       	st	X, r25
    37bc:	8e 93       	st	-X, r24
    37be:	fe 01       	movw	r30, r28
    37c0:	e1 5c       	subi	r30, 0xC1	; 193
    37c2:	fe 4f       	sbci	r31, 0xFE	; 254
    37c4:	80 81       	ld	r24, Z
    37c6:	91 81       	ldd	r25, Z+1	; 0x01
    37c8:	99 23       	and	r25, r25
    37ca:	fc f6       	brge	.-66     	; 0x378a <Converter+0x6fe>
    37cc:	fe 01       	movw	r30, r28
    37ce:	e9 5f       	subi	r30, 0xF9	; 249
    37d0:	fe 4f       	sbci	r31, 0xFE	; 254
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	aa ef       	ldi	r26, 0xFA	; 250
    37d8:	b3 e4       	ldi	r27, 0x43	; 67
    37da:	80 83       	st	Z, r24
    37dc:	91 83       	std	Z+1, r25	; 0x01
    37de:	a2 83       	std	Z+2, r26	; 0x02
    37e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e2:	8e 01       	movw	r16, r28
    37e4:	0d 5f       	subi	r16, 0xFD	; 253
    37e6:	1e 4f       	sbci	r17, 0xFE	; 254
    37e8:	fe 01       	movw	r30, r28
    37ea:	e9 5f       	subi	r30, 0xF9	; 249
    37ec:	fe 4f       	sbci	r31, 0xFE	; 254
    37ee:	60 81       	ld	r22, Z
    37f0:	71 81       	ldd	r23, Z+1	; 0x01
    37f2:	82 81       	ldd	r24, Z+2	; 0x02
    37f4:	93 81       	ldd	r25, Z+3	; 0x03
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	4a e7       	ldi	r20, 0x7A	; 122
    37fc:	53 e4       	ldi	r21, 0x43	; 67
    37fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3802:	dc 01       	movw	r26, r24
    3804:	cb 01       	movw	r24, r22
    3806:	f8 01       	movw	r30, r16
    3808:	80 83       	st	Z, r24
    380a:	91 83       	std	Z+1, r25	; 0x01
    380c:	a2 83       	std	Z+2, r26	; 0x02
    380e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3810:	fe 01       	movw	r30, r28
    3812:	ed 5f       	subi	r30, 0xFD	; 253
    3814:	fe 4f       	sbci	r31, 0xFE	; 254
    3816:	60 81       	ld	r22, Z
    3818:	71 81       	ldd	r23, Z+1	; 0x01
    381a:	82 81       	ldd	r24, Z+2	; 0x02
    381c:	93 81       	ldd	r25, Z+3	; 0x03
    381e:	20 e0       	ldi	r18, 0x00	; 0
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	40 e8       	ldi	r20, 0x80	; 128
    3824:	5f e3       	ldi	r21, 0x3F	; 63
    3826:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    382a:	88 23       	and	r24, r24
    382c:	44 f4       	brge	.+16     	; 0x383e <Converter+0x7b2>
		__ticks = 1;
    382e:	fe 01       	movw	r30, r28
    3830:	ef 5f       	subi	r30, 0xFF	; 255
    3832:	fe 4f       	sbci	r31, 0xFE	; 254
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	91 83       	std	Z+1, r25	; 0x01
    383a:	80 83       	st	Z, r24
    383c:	65 c0       	rjmp	.+202    	; 0x3908 <Converter+0x87c>
	else if (__tmp > 65535)
    383e:	fe 01       	movw	r30, r28
    3840:	ed 5f       	subi	r30, 0xFD	; 253
    3842:	fe 4f       	sbci	r31, 0xFE	; 254
    3844:	60 81       	ld	r22, Z
    3846:	71 81       	ldd	r23, Z+1	; 0x01
    3848:	82 81       	ldd	r24, Z+2	; 0x02
    384a:	93 81       	ldd	r25, Z+3	; 0x03
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	3f ef       	ldi	r19, 0xFF	; 255
    3850:	4f e7       	ldi	r20, 0x7F	; 127
    3852:	57 e4       	ldi	r21, 0x47	; 71
    3854:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3858:	18 16       	cp	r1, r24
    385a:	0c f0       	brlt	.+2      	; 0x385e <Converter+0x7d2>
    385c:	44 c0       	rjmp	.+136    	; 0x38e6 <Converter+0x85a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    385e:	fe 01       	movw	r30, r28
    3860:	e9 5f       	subi	r30, 0xF9	; 249
    3862:	fe 4f       	sbci	r31, 0xFE	; 254
    3864:	60 81       	ld	r22, Z
    3866:	71 81       	ldd	r23, Z+1	; 0x01
    3868:	82 81       	ldd	r24, Z+2	; 0x02
    386a:	93 81       	ldd	r25, Z+3	; 0x03
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	40 e2       	ldi	r20, 0x20	; 32
    3872:	51 e4       	ldi	r21, 0x41	; 65
    3874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	8e 01       	movw	r16, r28
    387e:	0f 5f       	subi	r16, 0xFF	; 255
    3880:	1e 4f       	sbci	r17, 0xFE	; 254
    3882:	bc 01       	movw	r22, r24
    3884:	cd 01       	movw	r24, r26
    3886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388a:	dc 01       	movw	r26, r24
    388c:	cb 01       	movw	r24, r22
    388e:	f8 01       	movw	r30, r16
    3890:	91 83       	std	Z+1, r25	; 0x01
    3892:	80 83       	st	Z, r24
    3894:	1f c0       	rjmp	.+62     	; 0x38d4 <Converter+0x848>
    3896:	fe 01       	movw	r30, r28
    3898:	e1 50       	subi	r30, 0x01	; 1
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	89 e1       	ldi	r24, 0x19	; 25
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	91 83       	std	Z+1, r25	; 0x01
    38a2:	80 83       	st	Z, r24
    38a4:	fe 01       	movw	r30, r28
    38a6:	e1 50       	subi	r30, 0x01	; 1
    38a8:	ff 4f       	sbci	r31, 0xFF	; 255
    38aa:	80 81       	ld	r24, Z
    38ac:	91 81       	ldd	r25, Z+1	; 0x01
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	f1 f7       	brne	.-4      	; 0x38ae <Converter+0x822>
    38b2:	fe 01       	movw	r30, r28
    38b4:	e1 50       	subi	r30, 0x01	; 1
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	91 83       	std	Z+1, r25	; 0x01
    38ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38bc:	de 01       	movw	r26, r28
    38be:	af 5f       	subi	r26, 0xFF	; 255
    38c0:	be 4f       	sbci	r27, 0xFE	; 254
    38c2:	fe 01       	movw	r30, r28
    38c4:	ef 5f       	subi	r30, 0xFF	; 255
    38c6:	fe 4f       	sbci	r31, 0xFE	; 254
    38c8:	80 81       	ld	r24, Z
    38ca:	91 81       	ldd	r25, Z+1	; 0x01
    38cc:	01 97       	sbiw	r24, 0x01	; 1
    38ce:	11 96       	adiw	r26, 0x01	; 1
    38d0:	9c 93       	st	X, r25
    38d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d4:	fe 01       	movw	r30, r28
    38d6:	ef 5f       	subi	r30, 0xFF	; 255
    38d8:	fe 4f       	sbci	r31, 0xFE	; 254
    38da:	80 81       	ld	r24, Z
    38dc:	91 81       	ldd	r25, Z+1	; 0x01
    38de:	00 97       	sbiw	r24, 0x00	; 0
    38e0:	d1 f6       	brne	.-76     	; 0x3896 <Converter+0x80a>
    38e2:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38e6:	8e 01       	movw	r16, r28
    38e8:	0f 5f       	subi	r16, 0xFF	; 255
    38ea:	1e 4f       	sbci	r17, 0xFE	; 254
    38ec:	fe 01       	movw	r30, r28
    38ee:	ed 5f       	subi	r30, 0xFD	; 253
    38f0:	fe 4f       	sbci	r31, 0xFE	; 254
    38f2:	60 81       	ld	r22, Z
    38f4:	71 81       	ldd	r23, Z+1	; 0x01
    38f6:	82 81       	ldd	r24, Z+2	; 0x02
    38f8:	93 81       	ldd	r25, Z+3	; 0x03
    38fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fe:	dc 01       	movw	r26, r24
    3900:	cb 01       	movw	r24, r22
    3902:	f8 01       	movw	r30, r16
    3904:	91 83       	std	Z+1, r25	; 0x01
    3906:	80 83       	st	Z, r24
    3908:	de 01       	movw	r26, r28
    390a:	a3 50       	subi	r26, 0x03	; 3
    390c:	bf 4f       	sbci	r27, 0xFF	; 255
    390e:	fe 01       	movw	r30, r28
    3910:	ef 5f       	subi	r30, 0xFF	; 255
    3912:	fe 4f       	sbci	r31, 0xFE	; 254
    3914:	80 81       	ld	r24, Z
    3916:	91 81       	ldd	r25, Z+1	; 0x01
    3918:	11 96       	adiw	r26, 0x01	; 1
    391a:	9c 93       	st	X, r25
    391c:	8e 93       	st	-X, r24
    391e:	fe 01       	movw	r30, r28
    3920:	e3 50       	subi	r30, 0x03	; 3
    3922:	ff 4f       	sbci	r31, 0xFF	; 255
    3924:	80 81       	ld	r24, Z
    3926:	91 81       	ldd	r25, Z+1	; 0x01
    3928:	01 97       	sbiw	r24, 0x01	; 1
    392a:	f1 f7       	brne	.-4      	; 0x3928 <Converter+0x89c>
    392c:	fe 01       	movw	r30, r28
    392e:	e3 50       	subi	r30, 0x03	; 3
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	91 83       	std	Z+1, r25	; 0x01
    3934:	80 83       	st	Z, r24
    3936:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
			}
			_delay_ms(show_time);
			break;

		default:
			LCD_clearScreen();
    393a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "plz enter valid");
    393e:	2b e1       	ldi	r18, 0x1B	; 27
    3940:	31 e0       	ldi	r19, 0x01	; 1
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	60 e0       	ldi	r22, 0x00	; 0
    3946:	a9 01       	movw	r20, r18
    3948:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "option.");
    394c:	2b e2       	ldi	r18, 0x2B	; 43
    394e:	31 e0       	ldi	r19, 0x01	; 1
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	60 e0       	ldi	r22, 0x00	; 0
    3954:	a9 01       	movw	r20, r18
    3956:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
    395a:	fe 01       	movw	r30, r28
    395c:	e7 50       	subi	r30, 0x07	; 7
    395e:	ff 4f       	sbci	r31, 0xFF	; 255
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	af ea       	ldi	r26, 0xAF	; 175
    3966:	b3 e4       	ldi	r27, 0x43	; 67
    3968:	80 83       	st	Z, r24
    396a:	91 83       	std	Z+1, r25	; 0x01
    396c:	a2 83       	std	Z+2, r26	; 0x02
    396e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3970:	8e 01       	movw	r16, r28
    3972:	0b 50       	subi	r16, 0x0B	; 11
    3974:	1f 4f       	sbci	r17, 0xFF	; 255
    3976:	fe 01       	movw	r30, r28
    3978:	e7 50       	subi	r30, 0x07	; 7
    397a:	ff 4f       	sbci	r31, 0xFF	; 255
    397c:	60 81       	ld	r22, Z
    397e:	71 81       	ldd	r23, Z+1	; 0x01
    3980:	82 81       	ldd	r24, Z+2	; 0x02
    3982:	93 81       	ldd	r25, Z+3	; 0x03
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	4a e7       	ldi	r20, 0x7A	; 122
    398a:	53 e4       	ldi	r21, 0x43	; 67
    398c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3990:	dc 01       	movw	r26, r24
    3992:	cb 01       	movw	r24, r22
    3994:	f8 01       	movw	r30, r16
    3996:	80 83       	st	Z, r24
    3998:	91 83       	std	Z+1, r25	; 0x01
    399a:	a2 83       	std	Z+2, r26	; 0x02
    399c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    399e:	fe 01       	movw	r30, r28
    39a0:	eb 50       	subi	r30, 0x0B	; 11
    39a2:	ff 4f       	sbci	r31, 0xFF	; 255
    39a4:	60 81       	ld	r22, Z
    39a6:	71 81       	ldd	r23, Z+1	; 0x01
    39a8:	82 81       	ldd	r24, Z+2	; 0x02
    39aa:	93 81       	ldd	r25, Z+3	; 0x03
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	40 e8       	ldi	r20, 0x80	; 128
    39b2:	5f e3       	ldi	r21, 0x3F	; 63
    39b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39b8:	88 23       	and	r24, r24
    39ba:	44 f4       	brge	.+16     	; 0x39cc <Converter+0x940>
		__ticks = 1;
    39bc:	fe 01       	movw	r30, r28
    39be:	ed 50       	subi	r30, 0x0D	; 13
    39c0:	ff 4f       	sbci	r31, 0xFF	; 255
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	91 83       	std	Z+1, r25	; 0x01
    39c8:	80 83       	st	Z, r24
    39ca:	65 c0       	rjmp	.+202    	; 0x3a96 <Converter+0xa0a>
	else if (__tmp > 65535)
    39cc:	fe 01       	movw	r30, r28
    39ce:	eb 50       	subi	r30, 0x0B	; 11
    39d0:	ff 4f       	sbci	r31, 0xFF	; 255
    39d2:	60 81       	ld	r22, Z
    39d4:	71 81       	ldd	r23, Z+1	; 0x01
    39d6:	82 81       	ldd	r24, Z+2	; 0x02
    39d8:	93 81       	ldd	r25, Z+3	; 0x03
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	3f ef       	ldi	r19, 0xFF	; 255
    39de:	4f e7       	ldi	r20, 0x7F	; 127
    39e0:	57 e4       	ldi	r21, 0x47	; 71
    39e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39e6:	18 16       	cp	r1, r24
    39e8:	0c f0       	brlt	.+2      	; 0x39ec <Converter+0x960>
    39ea:	44 c0       	rjmp	.+136    	; 0x3a74 <Converter+0x9e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ec:	fe 01       	movw	r30, r28
    39ee:	e7 50       	subi	r30, 0x07	; 7
    39f0:	ff 4f       	sbci	r31, 0xFF	; 255
    39f2:	60 81       	ld	r22, Z
    39f4:	71 81       	ldd	r23, Z+1	; 0x01
    39f6:	82 81       	ldd	r24, Z+2	; 0x02
    39f8:	93 81       	ldd	r25, Z+3	; 0x03
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	40 e2       	ldi	r20, 0x20	; 32
    3a00:	51 e4       	ldi	r21, 0x41	; 65
    3a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a06:	dc 01       	movw	r26, r24
    3a08:	cb 01       	movw	r24, r22
    3a0a:	8e 01       	movw	r16, r28
    3a0c:	0d 50       	subi	r16, 0x0D	; 13
    3a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a10:	bc 01       	movw	r22, r24
    3a12:	cd 01       	movw	r24, r26
    3a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	f8 01       	movw	r30, r16
    3a1e:	91 83       	std	Z+1, r25	; 0x01
    3a20:	80 83       	st	Z, r24
    3a22:	1f c0       	rjmp	.+62     	; 0x3a62 <Converter+0x9d6>
    3a24:	fe 01       	movw	r30, r28
    3a26:	ef 50       	subi	r30, 0x0F	; 15
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	89 e1       	ldi	r24, 0x19	; 25
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	91 83       	std	Z+1, r25	; 0x01
    3a30:	80 83       	st	Z, r24
    3a32:	fe 01       	movw	r30, r28
    3a34:	ef 50       	subi	r30, 0x0F	; 15
    3a36:	ff 4f       	sbci	r31, 0xFF	; 255
    3a38:	80 81       	ld	r24, Z
    3a3a:	91 81       	ldd	r25, Z+1	; 0x01
    3a3c:	01 97       	sbiw	r24, 0x01	; 1
    3a3e:	f1 f7       	brne	.-4      	; 0x3a3c <Converter+0x9b0>
    3a40:	fe 01       	movw	r30, r28
    3a42:	ef 50       	subi	r30, 0x0F	; 15
    3a44:	ff 4f       	sbci	r31, 0xFF	; 255
    3a46:	91 83       	std	Z+1, r25	; 0x01
    3a48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a4a:	de 01       	movw	r26, r28
    3a4c:	ad 50       	subi	r26, 0x0D	; 13
    3a4e:	bf 4f       	sbci	r27, 0xFF	; 255
    3a50:	fe 01       	movw	r30, r28
    3a52:	ed 50       	subi	r30, 0x0D	; 13
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	80 81       	ld	r24, Z
    3a58:	91 81       	ldd	r25, Z+1	; 0x01
    3a5a:	01 97       	sbiw	r24, 0x01	; 1
    3a5c:	11 96       	adiw	r26, 0x01	; 1
    3a5e:	9c 93       	st	X, r25
    3a60:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a62:	fe 01       	movw	r30, r28
    3a64:	ed 50       	subi	r30, 0x0D	; 13
    3a66:	ff 4f       	sbci	r31, 0xFF	; 255
    3a68:	80 81       	ld	r24, Z
    3a6a:	91 81       	ldd	r25, Z+1	; 0x01
    3a6c:	00 97       	sbiw	r24, 0x00	; 0
    3a6e:	d1 f6       	brne	.-76     	; 0x3a24 <Converter+0x998>
    3a70:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a74:	8e 01       	movw	r16, r28
    3a76:	0d 50       	subi	r16, 0x0D	; 13
    3a78:	1f 4f       	sbci	r17, 0xFF	; 255
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	eb 50       	subi	r30, 0x0B	; 11
    3a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a80:	60 81       	ld	r22, Z
    3a82:	71 81       	ldd	r23, Z+1	; 0x01
    3a84:	82 81       	ldd	r24, Z+2	; 0x02
    3a86:	93 81       	ldd	r25, Z+3	; 0x03
    3a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	f8 01       	movw	r30, r16
    3a92:	91 83       	std	Z+1, r25	; 0x01
    3a94:	80 83       	st	Z, r24
    3a96:	de 01       	movw	r26, r28
    3a98:	a1 51       	subi	r26, 0x11	; 17
    3a9a:	bf 4f       	sbci	r27, 0xFF	; 255
    3a9c:	fe 01       	movw	r30, r28
    3a9e:	ed 50       	subi	r30, 0x0D	; 13
    3aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa2:	80 81       	ld	r24, Z
    3aa4:	91 81       	ldd	r25, Z+1	; 0x01
    3aa6:	11 96       	adiw	r26, 0x01	; 1
    3aa8:	9c 93       	st	X, r25
    3aaa:	8e 93       	st	-X, r24
    3aac:	fe 01       	movw	r30, r28
    3aae:	e1 51       	subi	r30, 0x11	; 17
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	80 81       	ld	r24, Z
    3ab4:	91 81       	ldd	r25, Z+1	; 0x01
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <Converter+0xa2a>
    3aba:	fe 01       	movw	r30, r28
    3abc:	e1 51       	subi	r30, 0x11	; 17
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	80 83       	st	Z, r24
    3ac4:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
		break;


		/*Binary Case*/
		case 2:
			LCD_clearScreen();
    3ac8:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"1-to dec  2-to Hex");
    3acc:	23 e3       	ldi	r18, 0x33	; 51
    3ace:	31 e0       	ldi	r19, 0x01	; 1
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	60 e0       	ldi	r22, 0x00	; 0
    3ad4:	a9 01       	movw	r20, r18
    3ad6:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "3-to Oct");
    3ada:	25 ef       	ldi	r18, 0xF5	; 245
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	81 e0       	ldi	r24, 0x01	; 1
    3ae0:	60 e0       	ldi	r22, 0x00	; 0
    3ae2:	a9 01       	movw	r20, r18
    3ae4:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
			option=KEYPAD_getPressedKey();
    3ae8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    3aec:	fe 01       	movw	r30, r28
    3aee:	eb 5b       	subi	r30, 0xBB	; 187
    3af0:	fe 4f       	sbci	r31, 0xFE	; 254
    3af2:	80 83       	st	Z, r24
    3af4:	fe 01       	movw	r30, r28
    3af6:	e5 51       	subi	r30, 0x15	; 21
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	af ea       	ldi	r26, 0xAF	; 175
    3b00:	b3 e4       	ldi	r27, 0x43	; 67
    3b02:	80 83       	st	Z, r24
    3b04:	91 83       	std	Z+1, r25	; 0x01
    3b06:	a2 83       	std	Z+2, r26	; 0x02
    3b08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b0a:	8e 01       	movw	r16, r28
    3b0c:	09 51       	subi	r16, 0x19	; 25
    3b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b10:	fe 01       	movw	r30, r28
    3b12:	e5 51       	subi	r30, 0x15	; 21
    3b14:	ff 4f       	sbci	r31, 0xFF	; 255
    3b16:	60 81       	ld	r22, Z
    3b18:	71 81       	ldd	r23, Z+1	; 0x01
    3b1a:	82 81       	ldd	r24, Z+2	; 0x02
    3b1c:	93 81       	ldd	r25, Z+3	; 0x03
    3b1e:	20 e0       	ldi	r18, 0x00	; 0
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	4a e7       	ldi	r20, 0x7A	; 122
    3b24:	53 e4       	ldi	r21, 0x43	; 67
    3b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	f8 01       	movw	r30, r16
    3b30:	80 83       	st	Z, r24
    3b32:	91 83       	std	Z+1, r25	; 0x01
    3b34:	a2 83       	std	Z+2, r26	; 0x02
    3b36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b38:	fe 01       	movw	r30, r28
    3b3a:	e9 51       	subi	r30, 0x19	; 25
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	60 81       	ld	r22, Z
    3b40:	71 81       	ldd	r23, Z+1	; 0x01
    3b42:	82 81       	ldd	r24, Z+2	; 0x02
    3b44:	93 81       	ldd	r25, Z+3	; 0x03
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	40 e8       	ldi	r20, 0x80	; 128
    3b4c:	5f e3       	ldi	r21, 0x3F	; 63
    3b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b52:	88 23       	and	r24, r24
    3b54:	44 f4       	brge	.+16     	; 0x3b66 <Converter+0xada>
		__ticks = 1;
    3b56:	fe 01       	movw	r30, r28
    3b58:	eb 51       	subi	r30, 0x1B	; 27
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	91 83       	std	Z+1, r25	; 0x01
    3b62:	80 83       	st	Z, r24
    3b64:	64 c0       	rjmp	.+200    	; 0x3c2e <Converter+0xba2>
	else if (__tmp > 65535)
    3b66:	fe 01       	movw	r30, r28
    3b68:	e9 51       	subi	r30, 0x19	; 25
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	60 81       	ld	r22, Z
    3b6e:	71 81       	ldd	r23, Z+1	; 0x01
    3b70:	82 81       	ldd	r24, Z+2	; 0x02
    3b72:	93 81       	ldd	r25, Z+3	; 0x03
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	3f ef       	ldi	r19, 0xFF	; 255
    3b78:	4f e7       	ldi	r20, 0x7F	; 127
    3b7a:	57 e4       	ldi	r21, 0x47	; 71
    3b7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b80:	18 16       	cp	r1, r24
    3b82:	0c f0       	brlt	.+2      	; 0x3b86 <Converter+0xafa>
    3b84:	43 c0       	rjmp	.+134    	; 0x3c0c <Converter+0xb80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b86:	fe 01       	movw	r30, r28
    3b88:	e5 51       	subi	r30, 0x15	; 21
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	60 81       	ld	r22, Z
    3b8e:	71 81       	ldd	r23, Z+1	; 0x01
    3b90:	82 81       	ldd	r24, Z+2	; 0x02
    3b92:	93 81       	ldd	r25, Z+3	; 0x03
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	40 e2       	ldi	r20, 0x20	; 32
    3b9a:	51 e4       	ldi	r21, 0x41	; 65
    3b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	8e 01       	movw	r16, r28
    3ba6:	0b 51       	subi	r16, 0x1B	; 27
    3ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    3baa:	bc 01       	movw	r22, r24
    3bac:	cd 01       	movw	r24, r26
    3bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	f8 01       	movw	r30, r16
    3bb8:	91 83       	std	Z+1, r25	; 0x01
    3bba:	80 83       	st	Z, r24
    3bbc:	1f c0       	rjmp	.+62     	; 0x3bfc <Converter+0xb70>
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	ed 51       	subi	r30, 0x1D	; 29
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	89 e1       	ldi	r24, 0x19	; 25
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	91 83       	std	Z+1, r25	; 0x01
    3bca:	80 83       	st	Z, r24
    3bcc:	fe 01       	movw	r30, r28
    3bce:	ed 51       	subi	r30, 0x1D	; 29
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	80 81       	ld	r24, Z
    3bd4:	91 81       	ldd	r25, Z+1	; 0x01
    3bd6:	01 97       	sbiw	r24, 0x01	; 1
    3bd8:	f1 f7       	brne	.-4      	; 0x3bd6 <Converter+0xb4a>
    3bda:	fe 01       	movw	r30, r28
    3bdc:	ed 51       	subi	r30, 0x1D	; 29
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	91 83       	std	Z+1, r25	; 0x01
    3be2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3be4:	de 01       	movw	r26, r28
    3be6:	ab 51       	subi	r26, 0x1B	; 27
    3be8:	bf 4f       	sbci	r27, 0xFF	; 255
    3bea:	fe 01       	movw	r30, r28
    3bec:	eb 51       	subi	r30, 0x1B	; 27
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	80 81       	ld	r24, Z
    3bf2:	91 81       	ldd	r25, Z+1	; 0x01
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	11 96       	adiw	r26, 0x01	; 1
    3bf8:	9c 93       	st	X, r25
    3bfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	eb 51       	subi	r30, 0x1B	; 27
    3c00:	ff 4f       	sbci	r31, 0xFF	; 255
    3c02:	80 81       	ld	r24, Z
    3c04:	91 81       	ldd	r25, Z+1	; 0x01
    3c06:	00 97       	sbiw	r24, 0x00	; 0
    3c08:	d1 f6       	brne	.-76     	; 0x3bbe <Converter+0xb32>
    3c0a:	28 c0       	rjmp	.+80     	; 0x3c5c <Converter+0xbd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c0c:	8e 01       	movw	r16, r28
    3c0e:	0b 51       	subi	r16, 0x1B	; 27
    3c10:	1f 4f       	sbci	r17, 0xFF	; 255
    3c12:	fe 01       	movw	r30, r28
    3c14:	e9 51       	subi	r30, 0x19	; 25
    3c16:	ff 4f       	sbci	r31, 0xFF	; 255
    3c18:	60 81       	ld	r22, Z
    3c1a:	71 81       	ldd	r23, Z+1	; 0x01
    3c1c:	82 81       	ldd	r24, Z+2	; 0x02
    3c1e:	93 81       	ldd	r25, Z+3	; 0x03
    3c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	f8 01       	movw	r30, r16
    3c2a:	91 83       	std	Z+1, r25	; 0x01
    3c2c:	80 83       	st	Z, r24
    3c2e:	de 01       	movw	r26, r28
    3c30:	af 51       	subi	r26, 0x1F	; 31
    3c32:	bf 4f       	sbci	r27, 0xFF	; 255
    3c34:	fe 01       	movw	r30, r28
    3c36:	eb 51       	subi	r30, 0x1B	; 27
    3c38:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3a:	80 81       	ld	r24, Z
    3c3c:	91 81       	ldd	r25, Z+1	; 0x01
    3c3e:	11 96       	adiw	r26, 0x01	; 1
    3c40:	9c 93       	st	X, r25
    3c42:	8e 93       	st	-X, r24
    3c44:	fe 01       	movw	r30, r28
    3c46:	ef 51       	subi	r30, 0x1F	; 31
    3c48:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4a:	80 81       	ld	r24, Z
    3c4c:	91 81       	ldd	r25, Z+1	; 0x01
    3c4e:	01 97       	sbiw	r24, 0x01	; 1
    3c50:	f1 f7       	brne	.-4      	; 0x3c4e <Converter+0xbc2>
    3c52:	fe 01       	movw	r30, r28
    3c54:	ef 51       	subi	r30, 0x1F	; 31
    3c56:	ff 4f       	sbci	r31, 0xFF	; 255
    3c58:	91 83       	std	Z+1, r25	; 0x01
    3c5a:	80 83       	st	Z, r24
			_delay_ms(KEYPAD_PRESSED_TIME);

			/*switch case for choosing the option and printing it*/
			switch(option){
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	eb 5b       	subi	r30, 0xBB	; 187
    3c60:	fe 4f       	sbci	r31, 0xFE	; 254
    3c62:	80 81       	ld	r24, Z
    3c64:	28 2f       	mov	r18, r24
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	c3 5b       	subi	r28, 0xB3	; 179
    3c6a:	de 4f       	sbci	r29, 0xFE	; 254
    3c6c:	39 83       	std	Y+1, r19	; 0x01
    3c6e:	28 83       	st	Y, r18
    3c70:	cd 54       	subi	r28, 0x4D	; 77
    3c72:	d1 40       	sbci	r29, 0x01	; 1
    3c74:	c3 5b       	subi	r28, 0xB3	; 179
    3c76:	de 4f       	sbci	r29, 0xFE	; 254
    3c78:	88 81       	ld	r24, Y
    3c7a:	99 81       	ldd	r25, Y+1	; 0x01
    3c7c:	cd 54       	subi	r28, 0x4D	; 77
    3c7e:	d1 40       	sbci	r29, 0x01	; 1
    3c80:	82 30       	cpi	r24, 0x02	; 2
    3c82:	91 05       	cpc	r25, r1
    3c84:	09 f4       	brne	.+2      	; 0x3c88 <Converter+0xbfc>
    3c86:	ee c0       	rjmp	.+476    	; 0x3e64 <Converter+0xdd8>
    3c88:	c3 5b       	subi	r28, 0xB3	; 179
    3c8a:	de 4f       	sbci	r29, 0xFE	; 254
    3c8c:	e8 81       	ld	r30, Y
    3c8e:	f9 81       	ldd	r31, Y+1	; 0x01
    3c90:	cd 54       	subi	r28, 0x4D	; 77
    3c92:	d1 40       	sbci	r29, 0x01	; 1
    3c94:	e3 30       	cpi	r30, 0x03	; 3
    3c96:	f1 05       	cpc	r31, r1
    3c98:	09 f4       	brne	.+2      	; 0x3c9c <Converter+0xc10>
    3c9a:	fb c1       	rjmp	.+1014   	; 0x4092 <Converter+0x1006>
    3c9c:	c3 5b       	subi	r28, 0xB3	; 179
    3c9e:	de 4f       	sbci	r29, 0xFE	; 254
    3ca0:	28 81       	ld	r18, Y
    3ca2:	39 81       	ldd	r19, Y+1	; 0x01
    3ca4:	cd 54       	subi	r28, 0x4D	; 77
    3ca6:	d1 40       	sbci	r29, 0x01	; 1
    3ca8:	21 30       	cpi	r18, 0x01	; 1
    3caa:	31 05       	cpc	r19, r1
    3cac:	09 f0       	breq	.+2      	; 0x3cb0 <Converter+0xc24>
    3cae:	cb c2       	rjmp	.+1430   	; 0x4246 <Converter+0x11ba>
			case 1:
				decimal_number=get_the_decimal_number();
    3cb0:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <get_the_decimal_number>
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	ea 5b       	subi	r30, 0xBA	; 186
    3cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3cba:	91 83       	std	Z+1, r25	; 0x01
    3cbc:	80 83       	st	Z, r24
				decimal_number=Bin_to_dec(decimal_number);
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	ea 5b       	subi	r30, 0xBA	; 186
    3cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    3cc4:	80 81       	ld	r24, Z
    3cc6:	91 81       	ldd	r25, Z+1	; 0x01
    3cc8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <Bin_to_dec>
    3ccc:	fe 01       	movw	r30, r28
    3cce:	ea 5b       	subi	r30, 0xBA	; 186
    3cd0:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd2:	91 83       	std	Z+1, r25	; 0x01
    3cd4:	80 83       	st	Z, r24
				LCD_clearScreen();
    3cd6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "dec= ");
    3cda:	26 e4       	ldi	r18, 0x46	; 70
    3cdc:	31 e0       	ldi	r19, 0x01	; 1
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    3ce0:	60 e0       	ldi	r22, 0x00	; 0
    3ce2:	a9 01       	movw	r20, r18
    3ce4:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
				LCD_intgerToString(decimal_number);
    3ce8:	fe 01       	movw	r30, r28
    3cea:	ea 5b       	subi	r30, 0xBA	; 186
    3cec:	fe 4f       	sbci	r31, 0xFE	; 254
    3cee:	80 81       	ld	r24, Z
    3cf0:	91 81       	ldd	r25, Z+1	; 0x01
    3cf2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>
    3cf6:	fe 01       	movw	r30, r28
    3cf8:	e3 52       	subi	r30, 0x23	; 35
    3cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfc:	80 e0       	ldi	r24, 0x00	; 0
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	aa ef       	ldi	r26, 0xFA	; 250
    3d02:	b3 e4       	ldi	r27, 0x43	; 67
    3d04:	80 83       	st	Z, r24
    3d06:	91 83       	std	Z+1, r25	; 0x01
    3d08:	a2 83       	std	Z+2, r26	; 0x02
    3d0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d0c:	8e 01       	movw	r16, r28
    3d0e:	07 52       	subi	r16, 0x27	; 39
    3d10:	1f 4f       	sbci	r17, 0xFF	; 255
    3d12:	fe 01       	movw	r30, r28
    3d14:	e3 52       	subi	r30, 0x23	; 35
    3d16:	ff 4f       	sbci	r31, 0xFF	; 255
    3d18:	60 81       	ld	r22, Z
    3d1a:	71 81       	ldd	r23, Z+1	; 0x01
    3d1c:	82 81       	ldd	r24, Z+2	; 0x02
    3d1e:	93 81       	ldd	r25, Z+3	; 0x03
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	4a e7       	ldi	r20, 0x7A	; 122
    3d26:	53 e4       	ldi	r21, 0x43	; 67
    3d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	f8 01       	movw	r30, r16
    3d32:	80 83       	st	Z, r24
    3d34:	91 83       	std	Z+1, r25	; 0x01
    3d36:	a2 83       	std	Z+2, r26	; 0x02
    3d38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d3a:	fe 01       	movw	r30, r28
    3d3c:	e7 52       	subi	r30, 0x27	; 39
    3d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d40:	60 81       	ld	r22, Z
    3d42:	71 81       	ldd	r23, Z+1	; 0x01
    3d44:	82 81       	ldd	r24, Z+2	; 0x02
    3d46:	93 81       	ldd	r25, Z+3	; 0x03
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	40 e8       	ldi	r20, 0x80	; 128
    3d4e:	5f e3       	ldi	r21, 0x3F	; 63
    3d50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d54:	88 23       	and	r24, r24
    3d56:	44 f4       	brge	.+16     	; 0x3d68 <Converter+0xcdc>
		__ticks = 1;
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e9 52       	subi	r30, 0x29	; 41
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	91 83       	std	Z+1, r25	; 0x01
    3d64:	80 83       	st	Z, r24
    3d66:	65 c0       	rjmp	.+202    	; 0x3e32 <Converter+0xda6>
	else if (__tmp > 65535)
    3d68:	fe 01       	movw	r30, r28
    3d6a:	e7 52       	subi	r30, 0x27	; 39
    3d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6e:	60 81       	ld	r22, Z
    3d70:	71 81       	ldd	r23, Z+1	; 0x01
    3d72:	82 81       	ldd	r24, Z+2	; 0x02
    3d74:	93 81       	ldd	r25, Z+3	; 0x03
    3d76:	20 e0       	ldi	r18, 0x00	; 0
    3d78:	3f ef       	ldi	r19, 0xFF	; 255
    3d7a:	4f e7       	ldi	r20, 0x7F	; 127
    3d7c:	57 e4       	ldi	r21, 0x47	; 71
    3d7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d82:	18 16       	cp	r1, r24
    3d84:	0c f0       	brlt	.+2      	; 0x3d88 <Converter+0xcfc>
    3d86:	44 c0       	rjmp	.+136    	; 0x3e10 <Converter+0xd84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d88:	fe 01       	movw	r30, r28
    3d8a:	e3 52       	subi	r30, 0x23	; 35
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	60 81       	ld	r22, Z
    3d90:	71 81       	ldd	r23, Z+1	; 0x01
    3d92:	82 81       	ldd	r24, Z+2	; 0x02
    3d94:	93 81       	ldd	r25, Z+3	; 0x03
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	40 e2       	ldi	r20, 0x20	; 32
    3d9c:	51 e4       	ldi	r21, 0x41	; 65
    3d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da2:	dc 01       	movw	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	8e 01       	movw	r16, r28
    3da8:	09 52       	subi	r16, 0x29	; 41
    3daa:	1f 4f       	sbci	r17, 0xFF	; 255
    3dac:	bc 01       	movw	r22, r24
    3dae:	cd 01       	movw	r24, r26
    3db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db4:	dc 01       	movw	r26, r24
    3db6:	cb 01       	movw	r24, r22
    3db8:	f8 01       	movw	r30, r16
    3dba:	91 83       	std	Z+1, r25	; 0x01
    3dbc:	80 83       	st	Z, r24
    3dbe:	1f c0       	rjmp	.+62     	; 0x3dfe <Converter+0xd72>
    3dc0:	fe 01       	movw	r30, r28
    3dc2:	eb 52       	subi	r30, 0x2B	; 43
    3dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc6:	89 e1       	ldi	r24, 0x19	; 25
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	91 83       	std	Z+1, r25	; 0x01
    3dcc:	80 83       	st	Z, r24
    3dce:	fe 01       	movw	r30, r28
    3dd0:	eb 52       	subi	r30, 0x2B	; 43
    3dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd4:	80 81       	ld	r24, Z
    3dd6:	91 81       	ldd	r25, Z+1	; 0x01
    3dd8:	01 97       	sbiw	r24, 0x01	; 1
    3dda:	f1 f7       	brne	.-4      	; 0x3dd8 <Converter+0xd4c>
    3ddc:	fe 01       	movw	r30, r28
    3dde:	eb 52       	subi	r30, 0x2B	; 43
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	91 83       	std	Z+1, r25	; 0x01
    3de4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3de6:	de 01       	movw	r26, r28
    3de8:	a9 52       	subi	r26, 0x29	; 41
    3dea:	bf 4f       	sbci	r27, 0xFF	; 255
    3dec:	fe 01       	movw	r30, r28
    3dee:	e9 52       	subi	r30, 0x29	; 41
    3df0:	ff 4f       	sbci	r31, 0xFF	; 255
    3df2:	80 81       	ld	r24, Z
    3df4:	91 81       	ldd	r25, Z+1	; 0x01
    3df6:	01 97       	sbiw	r24, 0x01	; 1
    3df8:	11 96       	adiw	r26, 0x01	; 1
    3dfa:	9c 93       	st	X, r25
    3dfc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dfe:	fe 01       	movw	r30, r28
    3e00:	e9 52       	subi	r30, 0x29	; 41
    3e02:	ff 4f       	sbci	r31, 0xFF	; 255
    3e04:	80 81       	ld	r24, Z
    3e06:	91 81       	ldd	r25, Z+1	; 0x01
    3e08:	00 97       	sbiw	r24, 0x00	; 0
    3e0a:	d1 f6       	brne	.-76     	; 0x3dc0 <Converter+0xd34>
    3e0c:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e10:	8e 01       	movw	r16, r28
    3e12:	09 52       	subi	r16, 0x29	; 41
    3e14:	1f 4f       	sbci	r17, 0xFF	; 255
    3e16:	fe 01       	movw	r30, r28
    3e18:	e7 52       	subi	r30, 0x27	; 39
    3e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1c:	60 81       	ld	r22, Z
    3e1e:	71 81       	ldd	r23, Z+1	; 0x01
    3e20:	82 81       	ldd	r24, Z+2	; 0x02
    3e22:	93 81       	ldd	r25, Z+3	; 0x03
    3e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	f8 01       	movw	r30, r16
    3e2e:	91 83       	std	Z+1, r25	; 0x01
    3e30:	80 83       	st	Z, r24
    3e32:	de 01       	movw	r26, r28
    3e34:	ad 52       	subi	r26, 0x2D	; 45
    3e36:	bf 4f       	sbci	r27, 0xFF	; 255
    3e38:	fe 01       	movw	r30, r28
    3e3a:	e9 52       	subi	r30, 0x29	; 41
    3e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3e:	80 81       	ld	r24, Z
    3e40:	91 81       	ldd	r25, Z+1	; 0x01
    3e42:	11 96       	adiw	r26, 0x01	; 1
    3e44:	9c 93       	st	X, r25
    3e46:	8e 93       	st	-X, r24
    3e48:	fe 01       	movw	r30, r28
    3e4a:	ed 52       	subi	r30, 0x2D	; 45
    3e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4e:	80 81       	ld	r24, Z
    3e50:	91 81       	ldd	r25, Z+1	; 0x01
    3e52:	01 97       	sbiw	r24, 0x01	; 1
    3e54:	f1 f7       	brne	.-4      	; 0x3e52 <Converter+0xdc6>
    3e56:	fe 01       	movw	r30, r28
    3e58:	ed 52       	subi	r30, 0x2D	; 45
    3e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5c:	91 83       	std	Z+1, r25	; 0x01
    3e5e:	80 83       	st	Z, r24
    3e60:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
				_delay_ms(show_time);
				break;
			case 2:
				decimal_number=get_the_decimal_number();
    3e64:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <get_the_decimal_number>
    3e68:	fe 01       	movw	r30, r28
    3e6a:	ea 5b       	subi	r30, 0xBA	; 186
    3e6c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e6e:	91 83       	std	Z+1, r25	; 0x01
    3e70:	80 83       	st	Z, r24
				Bin_to_hex(decimal_number);
    3e72:	fe 01       	movw	r30, r28
    3e74:	ea 5b       	subi	r30, 0xBA	; 186
    3e76:	fe 4f       	sbci	r31, 0xFE	; 254
    3e78:	80 81       	ld	r24, Z
    3e7a:	91 81       	ldd	r25, Z+1	; 0x01
    3e7c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <Bin_to_hex>
				LCD_clearScreen();
    3e80:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "Hex= ");
    3e84:	2f e0       	ldi	r18, 0x0F	; 15
    3e86:	31 e0       	ldi	r19, 0x01	; 1
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	60 e0       	ldi	r22, 0x00	; 0
    3e8c:	a9 01       	movw	r20, r18
    3e8e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
				//				for(int i =index_of_hex_number-1; i>=0;i--){
				//					LCD_displayCharacter(hex[i]);
				//				}
				for(int i =index_of_hex_number; i>=0;i--){
    3e92:	80 91 b2 01 	lds	r24, 0x01B2
    3e96:	fe 01       	movw	r30, r28
    3e98:	e3 5c       	subi	r30, 0xC3	; 195
    3e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e9c:	88 2f       	mov	r24, r24
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	91 83       	std	Z+1, r25	; 0x01
    3ea2:	80 83       	st	Z, r24
    3ea4:	38 c0       	rjmp	.+112    	; 0x3f16 <Converter+0xe8a>
					if(hex[i] >= 0 && hex[i] <= 9){
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	e3 5c       	subi	r30, 0xC3	; 195
    3eaa:	fe 4f       	sbci	r31, 0xFE	; 254
    3eac:	80 81       	ld	r24, Z
    3eae:	91 81       	ldd	r25, Z+1	; 0x01
    3eb0:	88 0f       	add	r24, r24
    3eb2:	99 1f       	adc	r25, r25
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	ed 54       	subi	r30, 0x4D	; 77
    3eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3eba:	80 81       	ld	r24, Z
    3ebc:	91 81       	ldd	r25, Z+1	; 0x01
    3ebe:	8a 30       	cpi	r24, 0x0A	; 10
    3ec0:	91 05       	cpc	r25, r1
    3ec2:	78 f4       	brcc	.+30     	; 0x3ee2 <Converter+0xe56>

						LCD_intgerToString(hex[i]);
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	e3 5c       	subi	r30, 0xC3	; 195
    3ec8:	fe 4f       	sbci	r31, 0xFE	; 254
    3eca:	80 81       	ld	r24, Z
    3ecc:	91 81       	ldd	r25, Z+1	; 0x01
    3ece:	88 0f       	add	r24, r24
    3ed0:	99 1f       	adc	r25, r25
    3ed2:	fc 01       	movw	r30, r24
    3ed4:	ed 54       	subi	r30, 0x4D	; 77
    3ed6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ed8:	80 81       	ld	r24, Z
    3eda:	91 81       	ldd	r25, Z+1	; 0x01
    3edc:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>
    3ee0:	0e c0       	rjmp	.+28     	; 0x3efe <Converter+0xe72>
					}
					else{
						LCD_displayCharacter(hex[i]);
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	e3 5c       	subi	r30, 0xC3	; 195
    3ee6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ee8:	80 81       	ld	r24, Z
    3eea:	91 81       	ldd	r25, Z+1	; 0x01
    3eec:	88 0f       	add	r24, r24
    3eee:	99 1f       	adc	r25, r25
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	ed 54       	subi	r30, 0x4D	; 77
    3ef4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ef6:	80 81       	ld	r24, Z
    3ef8:	91 81       	ldd	r25, Z+1	; 0x01
    3efa:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <LCD_displayCharacter>
				LCD_clearScreen();
				LCD_displayStringRowColumn(0, 0, "Hex= ");
				//				for(int i =index_of_hex_number-1; i>=0;i--){
				//					LCD_displayCharacter(hex[i]);
				//				}
				for(int i =index_of_hex_number; i>=0;i--){
    3efe:	de 01       	movw	r26, r28
    3f00:	a3 5c       	subi	r26, 0xC3	; 195
    3f02:	be 4f       	sbci	r27, 0xFE	; 254
    3f04:	fe 01       	movw	r30, r28
    3f06:	e3 5c       	subi	r30, 0xC3	; 195
    3f08:	fe 4f       	sbci	r31, 0xFE	; 254
    3f0a:	80 81       	ld	r24, Z
    3f0c:	91 81       	ldd	r25, Z+1	; 0x01
    3f0e:	01 97       	sbiw	r24, 0x01	; 1
    3f10:	11 96       	adiw	r26, 0x01	; 1
    3f12:	9c 93       	st	X, r25
    3f14:	8e 93       	st	-X, r24
    3f16:	fe 01       	movw	r30, r28
    3f18:	e3 5c       	subi	r30, 0xC3	; 195
    3f1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f1c:	80 81       	ld	r24, Z
    3f1e:	91 81       	ldd	r25, Z+1	; 0x01
    3f20:	99 23       	and	r25, r25
    3f22:	0c f6       	brge	.-126    	; 0x3ea6 <Converter+0xe1a>
    3f24:	fe 01       	movw	r30, r28
    3f26:	e1 53       	subi	r30, 0x31	; 49
    3f28:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	aa ef       	ldi	r26, 0xFA	; 250
    3f30:	b3 e4       	ldi	r27, 0x43	; 67
    3f32:	80 83       	st	Z, r24
    3f34:	91 83       	std	Z+1, r25	; 0x01
    3f36:	a2 83       	std	Z+2, r26	; 0x02
    3f38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f3a:	8e 01       	movw	r16, r28
    3f3c:	05 53       	subi	r16, 0x35	; 53
    3f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f40:	fe 01       	movw	r30, r28
    3f42:	e1 53       	subi	r30, 0x31	; 49
    3f44:	ff 4f       	sbci	r31, 0xFF	; 255
    3f46:	60 81       	ld	r22, Z
    3f48:	71 81       	ldd	r23, Z+1	; 0x01
    3f4a:	82 81       	ldd	r24, Z+2	; 0x02
    3f4c:	93 81       	ldd	r25, Z+3	; 0x03
    3f4e:	20 e0       	ldi	r18, 0x00	; 0
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	4a e7       	ldi	r20, 0x7A	; 122
    3f54:	53 e4       	ldi	r21, 0x43	; 67
    3f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f5a:	dc 01       	movw	r26, r24
    3f5c:	cb 01       	movw	r24, r22
    3f5e:	f8 01       	movw	r30, r16
    3f60:	80 83       	st	Z, r24
    3f62:	91 83       	std	Z+1, r25	; 0x01
    3f64:	a2 83       	std	Z+2, r26	; 0x02
    3f66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f68:	fe 01       	movw	r30, r28
    3f6a:	e5 53       	subi	r30, 0x35	; 53
    3f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6e:	60 81       	ld	r22, Z
    3f70:	71 81       	ldd	r23, Z+1	; 0x01
    3f72:	82 81       	ldd	r24, Z+2	; 0x02
    3f74:	93 81       	ldd	r25, Z+3	; 0x03
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	40 e8       	ldi	r20, 0x80	; 128
    3f7c:	5f e3       	ldi	r21, 0x3F	; 63
    3f7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f82:	88 23       	and	r24, r24
    3f84:	44 f4       	brge	.+16     	; 0x3f96 <Converter+0xf0a>
		__ticks = 1;
    3f86:	fe 01       	movw	r30, r28
    3f88:	e7 53       	subi	r30, 0x37	; 55
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	81 e0       	ldi	r24, 0x01	; 1
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	91 83       	std	Z+1, r25	; 0x01
    3f92:	80 83       	st	Z, r24
    3f94:	65 c0       	rjmp	.+202    	; 0x4060 <Converter+0xfd4>
	else if (__tmp > 65535)
    3f96:	fe 01       	movw	r30, r28
    3f98:	e5 53       	subi	r30, 0x35	; 53
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	60 81       	ld	r22, Z
    3f9e:	71 81       	ldd	r23, Z+1	; 0x01
    3fa0:	82 81       	ldd	r24, Z+2	; 0x02
    3fa2:	93 81       	ldd	r25, Z+3	; 0x03
    3fa4:	20 e0       	ldi	r18, 0x00	; 0
    3fa6:	3f ef       	ldi	r19, 0xFF	; 255
    3fa8:	4f e7       	ldi	r20, 0x7F	; 127
    3faa:	57 e4       	ldi	r21, 0x47	; 71
    3fac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fb0:	18 16       	cp	r1, r24
    3fb2:	0c f0       	brlt	.+2      	; 0x3fb6 <Converter+0xf2a>
    3fb4:	44 c0       	rjmp	.+136    	; 0x403e <Converter+0xfb2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fb6:	fe 01       	movw	r30, r28
    3fb8:	e1 53       	subi	r30, 0x31	; 49
    3fba:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbc:	60 81       	ld	r22, Z
    3fbe:	71 81       	ldd	r23, Z+1	; 0x01
    3fc0:	82 81       	ldd	r24, Z+2	; 0x02
    3fc2:	93 81       	ldd	r25, Z+3	; 0x03
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	40 e2       	ldi	r20, 0x20	; 32
    3fca:	51 e4       	ldi	r21, 0x41	; 65
    3fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd0:	dc 01       	movw	r26, r24
    3fd2:	cb 01       	movw	r24, r22
    3fd4:	8e 01       	movw	r16, r28
    3fd6:	07 53       	subi	r16, 0x37	; 55
    3fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fda:	bc 01       	movw	r22, r24
    3fdc:	cd 01       	movw	r24, r26
    3fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	cb 01       	movw	r24, r22
    3fe6:	f8 01       	movw	r30, r16
    3fe8:	91 83       	std	Z+1, r25	; 0x01
    3fea:	80 83       	st	Z, r24
    3fec:	1f c0       	rjmp	.+62     	; 0x402c <Converter+0xfa0>
    3fee:	fe 01       	movw	r30, r28
    3ff0:	e9 53       	subi	r30, 0x39	; 57
    3ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff4:	89 e1       	ldi	r24, 0x19	; 25
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	91 83       	std	Z+1, r25	; 0x01
    3ffa:	80 83       	st	Z, r24
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	e9 53       	subi	r30, 0x39	; 57
    4000:	ff 4f       	sbci	r31, 0xFF	; 255
    4002:	80 81       	ld	r24, Z
    4004:	91 81       	ldd	r25, Z+1	; 0x01
    4006:	01 97       	sbiw	r24, 0x01	; 1
    4008:	f1 f7       	brne	.-4      	; 0x4006 <Converter+0xf7a>
    400a:	fe 01       	movw	r30, r28
    400c:	e9 53       	subi	r30, 0x39	; 57
    400e:	ff 4f       	sbci	r31, 0xFF	; 255
    4010:	91 83       	std	Z+1, r25	; 0x01
    4012:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4014:	de 01       	movw	r26, r28
    4016:	a7 53       	subi	r26, 0x37	; 55
    4018:	bf 4f       	sbci	r27, 0xFF	; 255
    401a:	fe 01       	movw	r30, r28
    401c:	e7 53       	subi	r30, 0x37	; 55
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	80 81       	ld	r24, Z
    4022:	91 81       	ldd	r25, Z+1	; 0x01
    4024:	01 97       	sbiw	r24, 0x01	; 1
    4026:	11 96       	adiw	r26, 0x01	; 1
    4028:	9c 93       	st	X, r25
    402a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    402c:	fe 01       	movw	r30, r28
    402e:	e7 53       	subi	r30, 0x37	; 55
    4030:	ff 4f       	sbci	r31, 0xFF	; 255
    4032:	80 81       	ld	r24, Z
    4034:	91 81       	ldd	r25, Z+1	; 0x01
    4036:	00 97       	sbiw	r24, 0x00	; 0
    4038:	d1 f6       	brne	.-76     	; 0x3fee <Converter+0xf62>
    403a:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    403e:	8e 01       	movw	r16, r28
    4040:	07 53       	subi	r16, 0x37	; 55
    4042:	1f 4f       	sbci	r17, 0xFF	; 255
    4044:	fe 01       	movw	r30, r28
    4046:	e5 53       	subi	r30, 0x35	; 53
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	60 81       	ld	r22, Z
    404c:	71 81       	ldd	r23, Z+1	; 0x01
    404e:	82 81       	ldd	r24, Z+2	; 0x02
    4050:	93 81       	ldd	r25, Z+3	; 0x03
    4052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4056:	dc 01       	movw	r26, r24
    4058:	cb 01       	movw	r24, r22
    405a:	f8 01       	movw	r30, r16
    405c:	91 83       	std	Z+1, r25	; 0x01
    405e:	80 83       	st	Z, r24
    4060:	de 01       	movw	r26, r28
    4062:	ab 53       	subi	r26, 0x3B	; 59
    4064:	bf 4f       	sbci	r27, 0xFF	; 255
    4066:	fe 01       	movw	r30, r28
    4068:	e7 53       	subi	r30, 0x37	; 55
    406a:	ff 4f       	sbci	r31, 0xFF	; 255
    406c:	80 81       	ld	r24, Z
    406e:	91 81       	ldd	r25, Z+1	; 0x01
    4070:	11 96       	adiw	r26, 0x01	; 1
    4072:	9c 93       	st	X, r25
    4074:	8e 93       	st	-X, r24
    4076:	fe 01       	movw	r30, r28
    4078:	eb 53       	subi	r30, 0x3B	; 59
    407a:	ff 4f       	sbci	r31, 0xFF	; 255
    407c:	80 81       	ld	r24, Z
    407e:	91 81       	ldd	r25, Z+1	; 0x01
    4080:	01 97       	sbiw	r24, 0x01	; 1
    4082:	f1 f7       	brne	.-4      	; 0x4080 <Converter+0xff4>
    4084:	fe 01       	movw	r30, r28
    4086:	eb 53       	subi	r30, 0x3B	; 59
    4088:	ff 4f       	sbci	r31, 0xFF	; 255
    408a:	91 83       	std	Z+1, r25	; 0x01
    408c:	80 83       	st	Z, r24
    408e:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
					}
				}
				_delay_ms(show_time);
				break;
			case 3:
				decimal_number=get_the_decimal_number();
    4092:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <get_the_decimal_number>
    4096:	fe 01       	movw	r30, r28
    4098:	ea 5b       	subi	r30, 0xBA	; 186
    409a:	fe 4f       	sbci	r31, 0xFE	; 254
    409c:	91 83       	std	Z+1, r25	; 0x01
    409e:	80 83       	st	Z, r24
				decimal_number=Bin_to_oct(decimal_number);
    40a0:	fe 01       	movw	r30, r28
    40a2:	ea 5b       	subi	r30, 0xBA	; 186
    40a4:	fe 4f       	sbci	r31, 0xFE	; 254
    40a6:	80 81       	ld	r24, Z
    40a8:	91 81       	ldd	r25, Z+1	; 0x01
    40aa:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <Bin_to_oct>
    40ae:	fe 01       	movw	r30, r28
    40b0:	ea 5b       	subi	r30, 0xBA	; 186
    40b2:	fe 4f       	sbci	r31, 0xFE	; 254
    40b4:	91 83       	std	Z+1, r25	; 0x01
    40b6:	80 83       	st	Z, r24
				LCD_clearScreen();
    40b8:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "oct= ");
    40bc:	2c e4       	ldi	r18, 0x4C	; 76
    40be:	31 e0       	ldi	r19, 0x01	; 1
    40c0:	80 e0       	ldi	r24, 0x00	; 0
    40c2:	60 e0       	ldi	r22, 0x00	; 0
    40c4:	a9 01       	movw	r20, r18
    40c6:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
				LCD_intgerToString(decimal_number);
    40ca:	fe 01       	movw	r30, r28
    40cc:	ea 5b       	subi	r30, 0xBA	; 186
    40ce:	fe 4f       	sbci	r31, 0xFE	; 254
    40d0:	80 81       	ld	r24, Z
    40d2:	91 81       	ldd	r25, Z+1	; 0x01
    40d4:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>
    40d8:	fe 01       	movw	r30, r28
    40da:	ef 53       	subi	r30, 0x3F	; 63
    40dc:	ff 4f       	sbci	r31, 0xFF	; 255
    40de:	80 e0       	ldi	r24, 0x00	; 0
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	aa ef       	ldi	r26, 0xFA	; 250
    40e4:	b3 e4       	ldi	r27, 0x43	; 67
    40e6:	80 83       	st	Z, r24
    40e8:	91 83       	std	Z+1, r25	; 0x01
    40ea:	a2 83       	std	Z+2, r26	; 0x02
    40ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ee:	8e 01       	movw	r16, r28
    40f0:	03 54       	subi	r16, 0x43	; 67
    40f2:	1f 4f       	sbci	r17, 0xFF	; 255
    40f4:	fe 01       	movw	r30, r28
    40f6:	ef 53       	subi	r30, 0x3F	; 63
    40f8:	ff 4f       	sbci	r31, 0xFF	; 255
    40fa:	60 81       	ld	r22, Z
    40fc:	71 81       	ldd	r23, Z+1	; 0x01
    40fe:	82 81       	ldd	r24, Z+2	; 0x02
    4100:	93 81       	ldd	r25, Z+3	; 0x03
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	4a e7       	ldi	r20, 0x7A	; 122
    4108:	53 e4       	ldi	r21, 0x43	; 67
    410a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    410e:	dc 01       	movw	r26, r24
    4110:	cb 01       	movw	r24, r22
    4112:	f8 01       	movw	r30, r16
    4114:	80 83       	st	Z, r24
    4116:	91 83       	std	Z+1, r25	; 0x01
    4118:	a2 83       	std	Z+2, r26	; 0x02
    411a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    411c:	fe 01       	movw	r30, r28
    411e:	e3 54       	subi	r30, 0x43	; 67
    4120:	ff 4f       	sbci	r31, 0xFF	; 255
    4122:	60 81       	ld	r22, Z
    4124:	71 81       	ldd	r23, Z+1	; 0x01
    4126:	82 81       	ldd	r24, Z+2	; 0x02
    4128:	93 81       	ldd	r25, Z+3	; 0x03
    412a:	20 e0       	ldi	r18, 0x00	; 0
    412c:	30 e0       	ldi	r19, 0x00	; 0
    412e:	40 e8       	ldi	r20, 0x80	; 128
    4130:	5f e3       	ldi	r21, 0x3F	; 63
    4132:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4136:	88 23       	and	r24, r24
    4138:	44 f4       	brge	.+16     	; 0x414a <Converter+0x10be>
		__ticks = 1;
    413a:	fe 01       	movw	r30, r28
    413c:	e5 54       	subi	r30, 0x45	; 69
    413e:	ff 4f       	sbci	r31, 0xFF	; 255
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	91 83       	std	Z+1, r25	; 0x01
    4146:	80 83       	st	Z, r24
    4148:	65 c0       	rjmp	.+202    	; 0x4214 <Converter+0x1188>
	else if (__tmp > 65535)
    414a:	fe 01       	movw	r30, r28
    414c:	e3 54       	subi	r30, 0x43	; 67
    414e:	ff 4f       	sbci	r31, 0xFF	; 255
    4150:	60 81       	ld	r22, Z
    4152:	71 81       	ldd	r23, Z+1	; 0x01
    4154:	82 81       	ldd	r24, Z+2	; 0x02
    4156:	93 81       	ldd	r25, Z+3	; 0x03
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	3f ef       	ldi	r19, 0xFF	; 255
    415c:	4f e7       	ldi	r20, 0x7F	; 127
    415e:	57 e4       	ldi	r21, 0x47	; 71
    4160:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4164:	18 16       	cp	r1, r24
    4166:	0c f0       	brlt	.+2      	; 0x416a <Converter+0x10de>
    4168:	44 c0       	rjmp	.+136    	; 0x41f2 <Converter+0x1166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    416a:	fe 01       	movw	r30, r28
    416c:	ef 53       	subi	r30, 0x3F	; 63
    416e:	ff 4f       	sbci	r31, 0xFF	; 255
    4170:	60 81       	ld	r22, Z
    4172:	71 81       	ldd	r23, Z+1	; 0x01
    4174:	82 81       	ldd	r24, Z+2	; 0x02
    4176:	93 81       	ldd	r25, Z+3	; 0x03
    4178:	20 e0       	ldi	r18, 0x00	; 0
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	40 e2       	ldi	r20, 0x20	; 32
    417e:	51 e4       	ldi	r21, 0x41	; 65
    4180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
    4188:	8e 01       	movw	r16, r28
    418a:	05 54       	subi	r16, 0x45	; 69
    418c:	1f 4f       	sbci	r17, 0xFF	; 255
    418e:	bc 01       	movw	r22, r24
    4190:	cd 01       	movw	r24, r26
    4192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	f8 01       	movw	r30, r16
    419c:	91 83       	std	Z+1, r25	; 0x01
    419e:	80 83       	st	Z, r24
    41a0:	1f c0       	rjmp	.+62     	; 0x41e0 <Converter+0x1154>
    41a2:	fe 01       	movw	r30, r28
    41a4:	e7 54       	subi	r30, 0x47	; 71
    41a6:	ff 4f       	sbci	r31, 0xFF	; 255
    41a8:	89 e1       	ldi	r24, 0x19	; 25
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	91 83       	std	Z+1, r25	; 0x01
    41ae:	80 83       	st	Z, r24
    41b0:	fe 01       	movw	r30, r28
    41b2:	e7 54       	subi	r30, 0x47	; 71
    41b4:	ff 4f       	sbci	r31, 0xFF	; 255
    41b6:	80 81       	ld	r24, Z
    41b8:	91 81       	ldd	r25, Z+1	; 0x01
    41ba:	01 97       	sbiw	r24, 0x01	; 1
    41bc:	f1 f7       	brne	.-4      	; 0x41ba <Converter+0x112e>
    41be:	fe 01       	movw	r30, r28
    41c0:	e7 54       	subi	r30, 0x47	; 71
    41c2:	ff 4f       	sbci	r31, 0xFF	; 255
    41c4:	91 83       	std	Z+1, r25	; 0x01
    41c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c8:	de 01       	movw	r26, r28
    41ca:	a5 54       	subi	r26, 0x45	; 69
    41cc:	bf 4f       	sbci	r27, 0xFF	; 255
    41ce:	fe 01       	movw	r30, r28
    41d0:	e5 54       	subi	r30, 0x45	; 69
    41d2:	ff 4f       	sbci	r31, 0xFF	; 255
    41d4:	80 81       	ld	r24, Z
    41d6:	91 81       	ldd	r25, Z+1	; 0x01
    41d8:	01 97       	sbiw	r24, 0x01	; 1
    41da:	11 96       	adiw	r26, 0x01	; 1
    41dc:	9c 93       	st	X, r25
    41de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41e0:	fe 01       	movw	r30, r28
    41e2:	e5 54       	subi	r30, 0x45	; 69
    41e4:	ff 4f       	sbci	r31, 0xFF	; 255
    41e6:	80 81       	ld	r24, Z
    41e8:	91 81       	ldd	r25, Z+1	; 0x01
    41ea:	00 97       	sbiw	r24, 0x00	; 0
    41ec:	d1 f6       	brne	.-76     	; 0x41a2 <Converter+0x1116>
    41ee:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41f2:	8e 01       	movw	r16, r28
    41f4:	05 54       	subi	r16, 0x45	; 69
    41f6:	1f 4f       	sbci	r17, 0xFF	; 255
    41f8:	fe 01       	movw	r30, r28
    41fa:	e3 54       	subi	r30, 0x43	; 67
    41fc:	ff 4f       	sbci	r31, 0xFF	; 255
    41fe:	60 81       	ld	r22, Z
    4200:	71 81       	ldd	r23, Z+1	; 0x01
    4202:	82 81       	ldd	r24, Z+2	; 0x02
    4204:	93 81       	ldd	r25, Z+3	; 0x03
    4206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	f8 01       	movw	r30, r16
    4210:	91 83       	std	Z+1, r25	; 0x01
    4212:	80 83       	st	Z, r24
    4214:	de 01       	movw	r26, r28
    4216:	a9 54       	subi	r26, 0x49	; 73
    4218:	bf 4f       	sbci	r27, 0xFF	; 255
    421a:	fe 01       	movw	r30, r28
    421c:	e5 54       	subi	r30, 0x45	; 69
    421e:	ff 4f       	sbci	r31, 0xFF	; 255
    4220:	80 81       	ld	r24, Z
    4222:	91 81       	ldd	r25, Z+1	; 0x01
    4224:	11 96       	adiw	r26, 0x01	; 1
    4226:	9c 93       	st	X, r25
    4228:	8e 93       	st	-X, r24
    422a:	fe 01       	movw	r30, r28
    422c:	e9 54       	subi	r30, 0x49	; 73
    422e:	ff 4f       	sbci	r31, 0xFF	; 255
    4230:	80 81       	ld	r24, Z
    4232:	91 81       	ldd	r25, Z+1	; 0x01
    4234:	01 97       	sbiw	r24, 0x01	; 1
    4236:	f1 f7       	brne	.-4      	; 0x4234 <Converter+0x11a8>
    4238:	fe 01       	movw	r30, r28
    423a:	e9 54       	subi	r30, 0x49	; 73
    423c:	ff 4f       	sbci	r31, 0xFF	; 255
    423e:	91 83       	std	Z+1, r25	; 0x01
    4240:	80 83       	st	Z, r24
    4242:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
				_delay_ms(show_time);
				break;
			default:
				LCD_clearScreen();
    4246:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "plz enter valid");
    424a:	2b e1       	ldi	r18, 0x1B	; 27
    424c:	31 e0       	ldi	r19, 0x01	; 1
    424e:	80 e0       	ldi	r24, 0x00	; 0
    4250:	60 e0       	ldi	r22, 0x00	; 0
    4252:	a9 01       	movw	r20, r18
    4254:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "option.");
    4258:	2b e2       	ldi	r18, 0x2B	; 43
    425a:	31 e0       	ldi	r19, 0x01	; 1
    425c:	81 e0       	ldi	r24, 0x01	; 1
    425e:	60 e0       	ldi	r22, 0x00	; 0
    4260:	a9 01       	movw	r20, r18
    4262:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
    4266:	fe 01       	movw	r30, r28
    4268:	ed 54       	subi	r30, 0x4D	; 77
    426a:	ff 4f       	sbci	r31, 0xFF	; 255
    426c:	80 e0       	ldi	r24, 0x00	; 0
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	af ea       	ldi	r26, 0xAF	; 175
    4272:	b3 e4       	ldi	r27, 0x43	; 67
    4274:	80 83       	st	Z, r24
    4276:	91 83       	std	Z+1, r25	; 0x01
    4278:	a2 83       	std	Z+2, r26	; 0x02
    427a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    427c:	8e 01       	movw	r16, r28
    427e:	01 55       	subi	r16, 0x51	; 81
    4280:	1f 4f       	sbci	r17, 0xFF	; 255
    4282:	fe 01       	movw	r30, r28
    4284:	ed 54       	subi	r30, 0x4D	; 77
    4286:	ff 4f       	sbci	r31, 0xFF	; 255
    4288:	60 81       	ld	r22, Z
    428a:	71 81       	ldd	r23, Z+1	; 0x01
    428c:	82 81       	ldd	r24, Z+2	; 0x02
    428e:	93 81       	ldd	r25, Z+3	; 0x03
    4290:	20 e0       	ldi	r18, 0x00	; 0
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	4a e7       	ldi	r20, 0x7A	; 122
    4296:	53 e4       	ldi	r21, 0x43	; 67
    4298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    429c:	dc 01       	movw	r26, r24
    429e:	cb 01       	movw	r24, r22
    42a0:	f8 01       	movw	r30, r16
    42a2:	80 83       	st	Z, r24
    42a4:	91 83       	std	Z+1, r25	; 0x01
    42a6:	a2 83       	std	Z+2, r26	; 0x02
    42a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42aa:	fe 01       	movw	r30, r28
    42ac:	e1 55       	subi	r30, 0x51	; 81
    42ae:	ff 4f       	sbci	r31, 0xFF	; 255
    42b0:	60 81       	ld	r22, Z
    42b2:	71 81       	ldd	r23, Z+1	; 0x01
    42b4:	82 81       	ldd	r24, Z+2	; 0x02
    42b6:	93 81       	ldd	r25, Z+3	; 0x03
    42b8:	20 e0       	ldi	r18, 0x00	; 0
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	40 e8       	ldi	r20, 0x80	; 128
    42be:	5f e3       	ldi	r21, 0x3F	; 63
    42c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42c4:	88 23       	and	r24, r24
    42c6:	44 f4       	brge	.+16     	; 0x42d8 <Converter+0x124c>
		__ticks = 1;
    42c8:	fe 01       	movw	r30, r28
    42ca:	e3 55       	subi	r30, 0x53	; 83
    42cc:	ff 4f       	sbci	r31, 0xFF	; 255
    42ce:	81 e0       	ldi	r24, 0x01	; 1
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	91 83       	std	Z+1, r25	; 0x01
    42d4:	80 83       	st	Z, r24
    42d6:	65 c0       	rjmp	.+202    	; 0x43a2 <Converter+0x1316>
	else if (__tmp > 65535)
    42d8:	fe 01       	movw	r30, r28
    42da:	e1 55       	subi	r30, 0x51	; 81
    42dc:	ff 4f       	sbci	r31, 0xFF	; 255
    42de:	60 81       	ld	r22, Z
    42e0:	71 81       	ldd	r23, Z+1	; 0x01
    42e2:	82 81       	ldd	r24, Z+2	; 0x02
    42e4:	93 81       	ldd	r25, Z+3	; 0x03
    42e6:	20 e0       	ldi	r18, 0x00	; 0
    42e8:	3f ef       	ldi	r19, 0xFF	; 255
    42ea:	4f e7       	ldi	r20, 0x7F	; 127
    42ec:	57 e4       	ldi	r21, 0x47	; 71
    42ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42f2:	18 16       	cp	r1, r24
    42f4:	0c f0       	brlt	.+2      	; 0x42f8 <Converter+0x126c>
    42f6:	44 c0       	rjmp	.+136    	; 0x4380 <Converter+0x12f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f8:	fe 01       	movw	r30, r28
    42fa:	ed 54       	subi	r30, 0x4D	; 77
    42fc:	ff 4f       	sbci	r31, 0xFF	; 255
    42fe:	60 81       	ld	r22, Z
    4300:	71 81       	ldd	r23, Z+1	; 0x01
    4302:	82 81       	ldd	r24, Z+2	; 0x02
    4304:	93 81       	ldd	r25, Z+3	; 0x03
    4306:	20 e0       	ldi	r18, 0x00	; 0
    4308:	30 e0       	ldi	r19, 0x00	; 0
    430a:	40 e2       	ldi	r20, 0x20	; 32
    430c:	51 e4       	ldi	r21, 0x41	; 65
    430e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4312:	dc 01       	movw	r26, r24
    4314:	cb 01       	movw	r24, r22
    4316:	8e 01       	movw	r16, r28
    4318:	03 55       	subi	r16, 0x53	; 83
    431a:	1f 4f       	sbci	r17, 0xFF	; 255
    431c:	bc 01       	movw	r22, r24
    431e:	cd 01       	movw	r24, r26
    4320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	f8 01       	movw	r30, r16
    432a:	91 83       	std	Z+1, r25	; 0x01
    432c:	80 83       	st	Z, r24
    432e:	1f c0       	rjmp	.+62     	; 0x436e <Converter+0x12e2>
    4330:	fe 01       	movw	r30, r28
    4332:	e5 55       	subi	r30, 0x55	; 85
    4334:	ff 4f       	sbci	r31, 0xFF	; 255
    4336:	89 e1       	ldi	r24, 0x19	; 25
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	91 83       	std	Z+1, r25	; 0x01
    433c:	80 83       	st	Z, r24
    433e:	fe 01       	movw	r30, r28
    4340:	e5 55       	subi	r30, 0x55	; 85
    4342:	ff 4f       	sbci	r31, 0xFF	; 255
    4344:	80 81       	ld	r24, Z
    4346:	91 81       	ldd	r25, Z+1	; 0x01
    4348:	01 97       	sbiw	r24, 0x01	; 1
    434a:	f1 f7       	brne	.-4      	; 0x4348 <Converter+0x12bc>
    434c:	fe 01       	movw	r30, r28
    434e:	e5 55       	subi	r30, 0x55	; 85
    4350:	ff 4f       	sbci	r31, 0xFF	; 255
    4352:	91 83       	std	Z+1, r25	; 0x01
    4354:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4356:	de 01       	movw	r26, r28
    4358:	a3 55       	subi	r26, 0x53	; 83
    435a:	bf 4f       	sbci	r27, 0xFF	; 255
    435c:	fe 01       	movw	r30, r28
    435e:	e3 55       	subi	r30, 0x53	; 83
    4360:	ff 4f       	sbci	r31, 0xFF	; 255
    4362:	80 81       	ld	r24, Z
    4364:	91 81       	ldd	r25, Z+1	; 0x01
    4366:	01 97       	sbiw	r24, 0x01	; 1
    4368:	11 96       	adiw	r26, 0x01	; 1
    436a:	9c 93       	st	X, r25
    436c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    436e:	fe 01       	movw	r30, r28
    4370:	e3 55       	subi	r30, 0x53	; 83
    4372:	ff 4f       	sbci	r31, 0xFF	; 255
    4374:	80 81       	ld	r24, Z
    4376:	91 81       	ldd	r25, Z+1	; 0x01
    4378:	00 97       	sbiw	r24, 0x00	; 0
    437a:	d1 f6       	brne	.-76     	; 0x4330 <Converter+0x12a4>
    437c:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4380:	8e 01       	movw	r16, r28
    4382:	03 55       	subi	r16, 0x53	; 83
    4384:	1f 4f       	sbci	r17, 0xFF	; 255
    4386:	fe 01       	movw	r30, r28
    4388:	e1 55       	subi	r30, 0x51	; 81
    438a:	ff 4f       	sbci	r31, 0xFF	; 255
    438c:	60 81       	ld	r22, Z
    438e:	71 81       	ldd	r23, Z+1	; 0x01
    4390:	82 81       	ldd	r24, Z+2	; 0x02
    4392:	93 81       	ldd	r25, Z+3	; 0x03
    4394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4398:	dc 01       	movw	r26, r24
    439a:	cb 01       	movw	r24, r22
    439c:	f8 01       	movw	r30, r16
    439e:	91 83       	std	Z+1, r25	; 0x01
    43a0:	80 83       	st	Z, r24
    43a2:	de 01       	movw	r26, r28
    43a4:	a7 55       	subi	r26, 0x57	; 87
    43a6:	bf 4f       	sbci	r27, 0xFF	; 255
    43a8:	fe 01       	movw	r30, r28
    43aa:	e3 55       	subi	r30, 0x53	; 83
    43ac:	ff 4f       	sbci	r31, 0xFF	; 255
    43ae:	80 81       	ld	r24, Z
    43b0:	91 81       	ldd	r25, Z+1	; 0x01
    43b2:	11 96       	adiw	r26, 0x01	; 1
    43b4:	9c 93       	st	X, r25
    43b6:	8e 93       	st	-X, r24
    43b8:	fe 01       	movw	r30, r28
    43ba:	e7 55       	subi	r30, 0x57	; 87
    43bc:	ff 4f       	sbci	r31, 0xFF	; 255
    43be:	80 81       	ld	r24, Z
    43c0:	91 81       	ldd	r25, Z+1	; 0x01
    43c2:	01 97       	sbiw	r24, 0x01	; 1
    43c4:	f1 f7       	brne	.-4      	; 0x43c2 <Converter+0x1336>
    43c6:	fe 01       	movw	r30, r28
    43c8:	e7 55       	subi	r30, 0x57	; 87
    43ca:	ff 4f       	sbci	r31, 0xFF	; 255
    43cc:	91 83       	std	Z+1, r25	; 0x01
    43ce:	80 83       	st	Z, r24
    43d0:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>



			case 3:  	/* Hexa Case*/

				LCD_clearScreen();
    43d4:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"1-to dec  2-to bin");
    43d8:	22 e5       	ldi	r18, 0x52	; 82
    43da:	31 e0       	ldi	r19, 0x01	; 1
    43dc:	80 e0       	ldi	r24, 0x00	; 0
    43de:	60 e0       	ldi	r22, 0x00	; 0
    43e0:	a9 01       	movw	r20, r18
    43e2:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "3-to Oct");
    43e6:	25 ef       	ldi	r18, 0xF5	; 245
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	81 e0       	ldi	r24, 0x01	; 1
    43ec:	60 e0       	ldi	r22, 0x00	; 0
    43ee:	a9 01       	movw	r20, r18
    43f0:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
				option=KEYPAD_getPressedKey();
    43f4:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    43f8:	fe 01       	movw	r30, r28
    43fa:	eb 5b       	subi	r30, 0xBB	; 187
    43fc:	fe 4f       	sbci	r31, 0xFE	; 254
    43fe:	80 83       	st	Z, r24
    4400:	fe 01       	movw	r30, r28
    4402:	eb 55       	subi	r30, 0x5B	; 91
    4404:	ff 4f       	sbci	r31, 0xFF	; 255
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	af ea       	ldi	r26, 0xAF	; 175
    440c:	b3 e4       	ldi	r27, 0x43	; 67
    440e:	80 83       	st	Z, r24
    4410:	91 83       	std	Z+1, r25	; 0x01
    4412:	a2 83       	std	Z+2, r26	; 0x02
    4414:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4416:	8e 01       	movw	r16, r28
    4418:	0f 55       	subi	r16, 0x5F	; 95
    441a:	1f 4f       	sbci	r17, 0xFF	; 255
    441c:	fe 01       	movw	r30, r28
    441e:	eb 55       	subi	r30, 0x5B	; 91
    4420:	ff 4f       	sbci	r31, 0xFF	; 255
    4422:	60 81       	ld	r22, Z
    4424:	71 81       	ldd	r23, Z+1	; 0x01
    4426:	82 81       	ldd	r24, Z+2	; 0x02
    4428:	93 81       	ldd	r25, Z+3	; 0x03
    442a:	20 e0       	ldi	r18, 0x00	; 0
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	4a e7       	ldi	r20, 0x7A	; 122
    4430:	53 e4       	ldi	r21, 0x43	; 67
    4432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	f8 01       	movw	r30, r16
    443c:	80 83       	st	Z, r24
    443e:	91 83       	std	Z+1, r25	; 0x01
    4440:	a2 83       	std	Z+2, r26	; 0x02
    4442:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4444:	fe 01       	movw	r30, r28
    4446:	ef 55       	subi	r30, 0x5F	; 95
    4448:	ff 4f       	sbci	r31, 0xFF	; 255
    444a:	60 81       	ld	r22, Z
    444c:	71 81       	ldd	r23, Z+1	; 0x01
    444e:	82 81       	ldd	r24, Z+2	; 0x02
    4450:	93 81       	ldd	r25, Z+3	; 0x03
    4452:	20 e0       	ldi	r18, 0x00	; 0
    4454:	30 e0       	ldi	r19, 0x00	; 0
    4456:	40 e8       	ldi	r20, 0x80	; 128
    4458:	5f e3       	ldi	r21, 0x3F	; 63
    445a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    445e:	88 23       	and	r24, r24
    4460:	44 f4       	brge	.+16     	; 0x4472 <Converter+0x13e6>
		__ticks = 1;
    4462:	fe 01       	movw	r30, r28
    4464:	e1 56       	subi	r30, 0x61	; 97
    4466:	ff 4f       	sbci	r31, 0xFF	; 255
    4468:	81 e0       	ldi	r24, 0x01	; 1
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	91 83       	std	Z+1, r25	; 0x01
    446e:	80 83       	st	Z, r24
    4470:	64 c0       	rjmp	.+200    	; 0x453a <Converter+0x14ae>
	else if (__tmp > 65535)
    4472:	fe 01       	movw	r30, r28
    4474:	ef 55       	subi	r30, 0x5F	; 95
    4476:	ff 4f       	sbci	r31, 0xFF	; 255
    4478:	60 81       	ld	r22, Z
    447a:	71 81       	ldd	r23, Z+1	; 0x01
    447c:	82 81       	ldd	r24, Z+2	; 0x02
    447e:	93 81       	ldd	r25, Z+3	; 0x03
    4480:	20 e0       	ldi	r18, 0x00	; 0
    4482:	3f ef       	ldi	r19, 0xFF	; 255
    4484:	4f e7       	ldi	r20, 0x7F	; 127
    4486:	57 e4       	ldi	r21, 0x47	; 71
    4488:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    448c:	18 16       	cp	r1, r24
    448e:	0c f0       	brlt	.+2      	; 0x4492 <Converter+0x1406>
    4490:	43 c0       	rjmp	.+134    	; 0x4518 <Converter+0x148c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4492:	fe 01       	movw	r30, r28
    4494:	eb 55       	subi	r30, 0x5B	; 91
    4496:	ff 4f       	sbci	r31, 0xFF	; 255
    4498:	60 81       	ld	r22, Z
    449a:	71 81       	ldd	r23, Z+1	; 0x01
    449c:	82 81       	ldd	r24, Z+2	; 0x02
    449e:	93 81       	ldd	r25, Z+3	; 0x03
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	40 e2       	ldi	r20, 0x20	; 32
    44a6:	51 e4       	ldi	r21, 0x41	; 65
    44a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ac:	dc 01       	movw	r26, r24
    44ae:	cb 01       	movw	r24, r22
    44b0:	8e 01       	movw	r16, r28
    44b2:	01 56       	subi	r16, 0x61	; 97
    44b4:	1f 4f       	sbci	r17, 0xFF	; 255
    44b6:	bc 01       	movw	r22, r24
    44b8:	cd 01       	movw	r24, r26
    44ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44be:	dc 01       	movw	r26, r24
    44c0:	cb 01       	movw	r24, r22
    44c2:	f8 01       	movw	r30, r16
    44c4:	91 83       	std	Z+1, r25	; 0x01
    44c6:	80 83       	st	Z, r24
    44c8:	1f c0       	rjmp	.+62     	; 0x4508 <Converter+0x147c>
    44ca:	fe 01       	movw	r30, r28
    44cc:	e3 56       	subi	r30, 0x63	; 99
    44ce:	ff 4f       	sbci	r31, 0xFF	; 255
    44d0:	89 e1       	ldi	r24, 0x19	; 25
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	91 83       	std	Z+1, r25	; 0x01
    44d6:	80 83       	st	Z, r24
    44d8:	fe 01       	movw	r30, r28
    44da:	e3 56       	subi	r30, 0x63	; 99
    44dc:	ff 4f       	sbci	r31, 0xFF	; 255
    44de:	80 81       	ld	r24, Z
    44e0:	91 81       	ldd	r25, Z+1	; 0x01
    44e2:	01 97       	sbiw	r24, 0x01	; 1
    44e4:	f1 f7       	brne	.-4      	; 0x44e2 <Converter+0x1456>
    44e6:	fe 01       	movw	r30, r28
    44e8:	e3 56       	subi	r30, 0x63	; 99
    44ea:	ff 4f       	sbci	r31, 0xFF	; 255
    44ec:	91 83       	std	Z+1, r25	; 0x01
    44ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44f0:	de 01       	movw	r26, r28
    44f2:	a1 56       	subi	r26, 0x61	; 97
    44f4:	bf 4f       	sbci	r27, 0xFF	; 255
    44f6:	fe 01       	movw	r30, r28
    44f8:	e1 56       	subi	r30, 0x61	; 97
    44fa:	ff 4f       	sbci	r31, 0xFF	; 255
    44fc:	80 81       	ld	r24, Z
    44fe:	91 81       	ldd	r25, Z+1	; 0x01
    4500:	01 97       	sbiw	r24, 0x01	; 1
    4502:	11 96       	adiw	r26, 0x01	; 1
    4504:	9c 93       	st	X, r25
    4506:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4508:	fe 01       	movw	r30, r28
    450a:	e1 56       	subi	r30, 0x61	; 97
    450c:	ff 4f       	sbci	r31, 0xFF	; 255
    450e:	80 81       	ld	r24, Z
    4510:	91 81       	ldd	r25, Z+1	; 0x01
    4512:	00 97       	sbiw	r24, 0x00	; 0
    4514:	d1 f6       	brne	.-76     	; 0x44ca <Converter+0x143e>
    4516:	28 c0       	rjmp	.+80     	; 0x4568 <Converter+0x14dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4518:	8e 01       	movw	r16, r28
    451a:	01 56       	subi	r16, 0x61	; 97
    451c:	1f 4f       	sbci	r17, 0xFF	; 255
    451e:	fe 01       	movw	r30, r28
    4520:	ef 55       	subi	r30, 0x5F	; 95
    4522:	ff 4f       	sbci	r31, 0xFF	; 255
    4524:	60 81       	ld	r22, Z
    4526:	71 81       	ldd	r23, Z+1	; 0x01
    4528:	82 81       	ldd	r24, Z+2	; 0x02
    452a:	93 81       	ldd	r25, Z+3	; 0x03
    452c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4530:	dc 01       	movw	r26, r24
    4532:	cb 01       	movw	r24, r22
    4534:	f8 01       	movw	r30, r16
    4536:	91 83       	std	Z+1, r25	; 0x01
    4538:	80 83       	st	Z, r24
    453a:	de 01       	movw	r26, r28
    453c:	a5 56       	subi	r26, 0x65	; 101
    453e:	bf 4f       	sbci	r27, 0xFF	; 255
    4540:	fe 01       	movw	r30, r28
    4542:	e1 56       	subi	r30, 0x61	; 97
    4544:	ff 4f       	sbci	r31, 0xFF	; 255
    4546:	80 81       	ld	r24, Z
    4548:	91 81       	ldd	r25, Z+1	; 0x01
    454a:	11 96       	adiw	r26, 0x01	; 1
    454c:	9c 93       	st	X, r25
    454e:	8e 93       	st	-X, r24
    4550:	fe 01       	movw	r30, r28
    4552:	e5 56       	subi	r30, 0x65	; 101
    4554:	ff 4f       	sbci	r31, 0xFF	; 255
    4556:	80 81       	ld	r24, Z
    4558:	91 81       	ldd	r25, Z+1	; 0x01
    455a:	01 97       	sbiw	r24, 0x01	; 1
    455c:	f1 f7       	brne	.-4      	; 0x455a <Converter+0x14ce>
    455e:	fe 01       	movw	r30, r28
    4560:	e5 56       	subi	r30, 0x65	; 101
    4562:	ff 4f       	sbci	r31, 0xFF	; 255
    4564:	91 83       	std	Z+1, r25	; 0x01
    4566:	80 83       	st	Z, r24
				_delay_ms(KEYPAD_PRESSED_TIME);

				/*switch case for choosing the option and printing it*/
				switch(option){
    4568:	fe 01       	movw	r30, r28
    456a:	eb 5b       	subi	r30, 0xBB	; 187
    456c:	fe 4f       	sbci	r31, 0xFE	; 254
    456e:	80 81       	ld	r24, Z
    4570:	28 2f       	mov	r18, r24
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	c5 5b       	subi	r28, 0xB5	; 181
    4576:	de 4f       	sbci	r29, 0xFE	; 254
    4578:	39 83       	std	Y+1, r19	; 0x01
    457a:	28 83       	st	Y, r18
    457c:	cb 54       	subi	r28, 0x4B	; 75
    457e:	d1 40       	sbci	r29, 0x01	; 1
    4580:	c5 5b       	subi	r28, 0xB5	; 181
    4582:	de 4f       	sbci	r29, 0xFE	; 254
    4584:	88 81       	ld	r24, Y
    4586:	99 81       	ldd	r25, Y+1	; 0x01
    4588:	cb 54       	subi	r28, 0x4B	; 75
    458a:	d1 40       	sbci	r29, 0x01	; 1
    458c:	82 30       	cpi	r24, 0x02	; 2
    458e:	91 05       	cpc	r25, r1
    4590:	09 f4       	brne	.+2      	; 0x4594 <Converter+0x1508>
    4592:	e4 c0       	rjmp	.+456    	; 0x475c <Converter+0x16d0>
    4594:	c5 5b       	subi	r28, 0xB5	; 181
    4596:	de 4f       	sbci	r29, 0xFE	; 254
    4598:	e8 81       	ld	r30, Y
    459a:	f9 81       	ldd	r31, Y+1	; 0x01
    459c:	cb 54       	subi	r28, 0x4B	; 75
    459e:	d1 40       	sbci	r29, 0x01	; 1
    45a0:	e3 30       	cpi	r30, 0x03	; 3
    45a2:	f1 05       	cpc	r31, r1
    45a4:	09 f4       	brne	.+2      	; 0x45a8 <Converter+0x151c>
    45a6:	cc c1       	rjmp	.+920    	; 0x4940 <Converter+0x18b4>
    45a8:	c5 5b       	subi	r28, 0xB5	; 181
    45aa:	de 4f       	sbci	r29, 0xFE	; 254
    45ac:	28 81       	ld	r18, Y
    45ae:	39 81       	ldd	r19, Y+1	; 0x01
    45b0:	cb 54       	subi	r28, 0x4B	; 75
    45b2:	d1 40       	sbci	r29, 0x01	; 1
    45b4:	21 30       	cpi	r18, 0x01	; 1
    45b6:	31 05       	cpc	r19, r1
    45b8:	09 f0       	breq	.+2      	; 0x45bc <Converter+0x1530>
    45ba:	b4 c2       	rjmp	.+1384   	; 0x4b24 <Converter+0x1a98>
				case 1:
					getHexNumber();
    45bc:	0e 94 55 2b 	call	0x56aa	; 0x56aa <getHexNumber>
					LCD_clearScreen();
    45c0:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
					decimal_number=HEX_TO_DEC_Trial();
    45c4:	0e 94 68 11 	call	0x22d0	; 0x22d0 <HEX_TO_DEC_Trial>
    45c8:	fe 01       	movw	r30, r28
    45ca:	ea 5b       	subi	r30, 0xBA	; 186
    45cc:	fe 4f       	sbci	r31, 0xFE	; 254
    45ce:	91 83       	std	Z+1, r25	; 0x01
    45d0:	80 83       	st	Z, r24
					LCD_displayStringRowColumn(0, 0, "Dec: ");
    45d2:	25 e6       	ldi	r18, 0x65	; 101
    45d4:	31 e0       	ldi	r19, 0x01	; 1
    45d6:	80 e0       	ldi	r24, 0x00	; 0
    45d8:	60 e0       	ldi	r22, 0x00	; 0
    45da:	a9 01       	movw	r20, r18
    45dc:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
					LCD_intgerToString(decimal_number);
    45e0:	fe 01       	movw	r30, r28
    45e2:	ea 5b       	subi	r30, 0xBA	; 186
    45e4:	fe 4f       	sbci	r31, 0xFE	; 254
    45e6:	80 81       	ld	r24, Z
    45e8:	91 81       	ldd	r25, Z+1	; 0x01
    45ea:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>
    45ee:	fe 01       	movw	r30, r28
    45f0:	e9 56       	subi	r30, 0x69	; 105
    45f2:	ff 4f       	sbci	r31, 0xFF	; 255
    45f4:	80 e0       	ldi	r24, 0x00	; 0
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	aa ef       	ldi	r26, 0xFA	; 250
    45fa:	b3 e4       	ldi	r27, 0x43	; 67
    45fc:	80 83       	st	Z, r24
    45fe:	91 83       	std	Z+1, r25	; 0x01
    4600:	a2 83       	std	Z+2, r26	; 0x02
    4602:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4604:	8e 01       	movw	r16, r28
    4606:	0d 56       	subi	r16, 0x6D	; 109
    4608:	1f 4f       	sbci	r17, 0xFF	; 255
    460a:	fe 01       	movw	r30, r28
    460c:	e9 56       	subi	r30, 0x69	; 105
    460e:	ff 4f       	sbci	r31, 0xFF	; 255
    4610:	60 81       	ld	r22, Z
    4612:	71 81       	ldd	r23, Z+1	; 0x01
    4614:	82 81       	ldd	r24, Z+2	; 0x02
    4616:	93 81       	ldd	r25, Z+3	; 0x03
    4618:	20 e0       	ldi	r18, 0x00	; 0
    461a:	30 e0       	ldi	r19, 0x00	; 0
    461c:	4a e7       	ldi	r20, 0x7A	; 122
    461e:	53 e4       	ldi	r21, 0x43	; 67
    4620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4624:	dc 01       	movw	r26, r24
    4626:	cb 01       	movw	r24, r22
    4628:	f8 01       	movw	r30, r16
    462a:	80 83       	st	Z, r24
    462c:	91 83       	std	Z+1, r25	; 0x01
    462e:	a2 83       	std	Z+2, r26	; 0x02
    4630:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4632:	fe 01       	movw	r30, r28
    4634:	ed 56       	subi	r30, 0x6D	; 109
    4636:	ff 4f       	sbci	r31, 0xFF	; 255
    4638:	60 81       	ld	r22, Z
    463a:	71 81       	ldd	r23, Z+1	; 0x01
    463c:	82 81       	ldd	r24, Z+2	; 0x02
    463e:	93 81       	ldd	r25, Z+3	; 0x03
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	40 e8       	ldi	r20, 0x80	; 128
    4646:	5f e3       	ldi	r21, 0x3F	; 63
    4648:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    464c:	88 23       	and	r24, r24
    464e:	44 f4       	brge	.+16     	; 0x4660 <Converter+0x15d4>
		__ticks = 1;
    4650:	fe 01       	movw	r30, r28
    4652:	ef 56       	subi	r30, 0x6F	; 111
    4654:	ff 4f       	sbci	r31, 0xFF	; 255
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	91 83       	std	Z+1, r25	; 0x01
    465c:	80 83       	st	Z, r24
    465e:	65 c0       	rjmp	.+202    	; 0x472a <Converter+0x169e>
	else if (__tmp > 65535)
    4660:	fe 01       	movw	r30, r28
    4662:	ed 56       	subi	r30, 0x6D	; 109
    4664:	ff 4f       	sbci	r31, 0xFF	; 255
    4666:	60 81       	ld	r22, Z
    4668:	71 81       	ldd	r23, Z+1	; 0x01
    466a:	82 81       	ldd	r24, Z+2	; 0x02
    466c:	93 81       	ldd	r25, Z+3	; 0x03
    466e:	20 e0       	ldi	r18, 0x00	; 0
    4670:	3f ef       	ldi	r19, 0xFF	; 255
    4672:	4f e7       	ldi	r20, 0x7F	; 127
    4674:	57 e4       	ldi	r21, 0x47	; 71
    4676:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    467a:	18 16       	cp	r1, r24
    467c:	0c f0       	brlt	.+2      	; 0x4680 <Converter+0x15f4>
    467e:	44 c0       	rjmp	.+136    	; 0x4708 <Converter+0x167c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4680:	fe 01       	movw	r30, r28
    4682:	e9 56       	subi	r30, 0x69	; 105
    4684:	ff 4f       	sbci	r31, 0xFF	; 255
    4686:	60 81       	ld	r22, Z
    4688:	71 81       	ldd	r23, Z+1	; 0x01
    468a:	82 81       	ldd	r24, Z+2	; 0x02
    468c:	93 81       	ldd	r25, Z+3	; 0x03
    468e:	20 e0       	ldi	r18, 0x00	; 0
    4690:	30 e0       	ldi	r19, 0x00	; 0
    4692:	40 e2       	ldi	r20, 0x20	; 32
    4694:	51 e4       	ldi	r21, 0x41	; 65
    4696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    469a:	dc 01       	movw	r26, r24
    469c:	cb 01       	movw	r24, r22
    469e:	8e 01       	movw	r16, r28
    46a0:	0f 56       	subi	r16, 0x6F	; 111
    46a2:	1f 4f       	sbci	r17, 0xFF	; 255
    46a4:	bc 01       	movw	r22, r24
    46a6:	cd 01       	movw	r24, r26
    46a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ac:	dc 01       	movw	r26, r24
    46ae:	cb 01       	movw	r24, r22
    46b0:	f8 01       	movw	r30, r16
    46b2:	91 83       	std	Z+1, r25	; 0x01
    46b4:	80 83       	st	Z, r24
    46b6:	1f c0       	rjmp	.+62     	; 0x46f6 <Converter+0x166a>
    46b8:	fe 01       	movw	r30, r28
    46ba:	e1 57       	subi	r30, 0x71	; 113
    46bc:	ff 4f       	sbci	r31, 0xFF	; 255
    46be:	89 e1       	ldi	r24, 0x19	; 25
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	91 83       	std	Z+1, r25	; 0x01
    46c4:	80 83       	st	Z, r24
    46c6:	fe 01       	movw	r30, r28
    46c8:	e1 57       	subi	r30, 0x71	; 113
    46ca:	ff 4f       	sbci	r31, 0xFF	; 255
    46cc:	80 81       	ld	r24, Z
    46ce:	91 81       	ldd	r25, Z+1	; 0x01
    46d0:	01 97       	sbiw	r24, 0x01	; 1
    46d2:	f1 f7       	brne	.-4      	; 0x46d0 <Converter+0x1644>
    46d4:	fe 01       	movw	r30, r28
    46d6:	e1 57       	subi	r30, 0x71	; 113
    46d8:	ff 4f       	sbci	r31, 0xFF	; 255
    46da:	91 83       	std	Z+1, r25	; 0x01
    46dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46de:	de 01       	movw	r26, r28
    46e0:	af 56       	subi	r26, 0x6F	; 111
    46e2:	bf 4f       	sbci	r27, 0xFF	; 255
    46e4:	fe 01       	movw	r30, r28
    46e6:	ef 56       	subi	r30, 0x6F	; 111
    46e8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ea:	80 81       	ld	r24, Z
    46ec:	91 81       	ldd	r25, Z+1	; 0x01
    46ee:	01 97       	sbiw	r24, 0x01	; 1
    46f0:	11 96       	adiw	r26, 0x01	; 1
    46f2:	9c 93       	st	X, r25
    46f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46f6:	fe 01       	movw	r30, r28
    46f8:	ef 56       	subi	r30, 0x6F	; 111
    46fa:	ff 4f       	sbci	r31, 0xFF	; 255
    46fc:	80 81       	ld	r24, Z
    46fe:	91 81       	ldd	r25, Z+1	; 0x01
    4700:	00 97       	sbiw	r24, 0x00	; 0
    4702:	d1 f6       	brne	.-76     	; 0x46b8 <Converter+0x162c>
    4704:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4708:	8e 01       	movw	r16, r28
    470a:	0f 56       	subi	r16, 0x6F	; 111
    470c:	1f 4f       	sbci	r17, 0xFF	; 255
    470e:	fe 01       	movw	r30, r28
    4710:	ed 56       	subi	r30, 0x6D	; 109
    4712:	ff 4f       	sbci	r31, 0xFF	; 255
    4714:	60 81       	ld	r22, Z
    4716:	71 81       	ldd	r23, Z+1	; 0x01
    4718:	82 81       	ldd	r24, Z+2	; 0x02
    471a:	93 81       	ldd	r25, Z+3	; 0x03
    471c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4720:	dc 01       	movw	r26, r24
    4722:	cb 01       	movw	r24, r22
    4724:	f8 01       	movw	r30, r16
    4726:	91 83       	std	Z+1, r25	; 0x01
    4728:	80 83       	st	Z, r24
    472a:	de 01       	movw	r26, r28
    472c:	a3 57       	subi	r26, 0x73	; 115
    472e:	bf 4f       	sbci	r27, 0xFF	; 255
    4730:	fe 01       	movw	r30, r28
    4732:	ef 56       	subi	r30, 0x6F	; 111
    4734:	ff 4f       	sbci	r31, 0xFF	; 255
    4736:	80 81       	ld	r24, Z
    4738:	91 81       	ldd	r25, Z+1	; 0x01
    473a:	11 96       	adiw	r26, 0x01	; 1
    473c:	9c 93       	st	X, r25
    473e:	8e 93       	st	-X, r24
    4740:	fe 01       	movw	r30, r28
    4742:	e3 57       	subi	r30, 0x73	; 115
    4744:	ff 4f       	sbci	r31, 0xFF	; 255
    4746:	80 81       	ld	r24, Z
    4748:	91 81       	ldd	r25, Z+1	; 0x01
    474a:	01 97       	sbiw	r24, 0x01	; 1
    474c:	f1 f7       	brne	.-4      	; 0x474a <Converter+0x16be>
    474e:	fe 01       	movw	r30, r28
    4750:	e3 57       	subi	r30, 0x73	; 115
    4752:	ff 4f       	sbci	r31, 0xFF	; 255
    4754:	91 83       	std	Z+1, r25	; 0x01
    4756:	80 83       	st	Z, r24
    4758:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <Converter+0x2606>
					_delay_ms(show_time);
					break;
				case 2:
					getHexNumber();
    475c:	0e 94 55 2b 	call	0x56aa	; 0x56aa <getHexNumber>
					LCD_clearScreen();
    4760:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
					Hex_to_bin();
    4764:	0e 94 13 13 	call	0x2626	; 0x2626 <Hex_to_bin>
					LCD_displayStringRowColumn(0, 0, "binary number = ");
    4768:	2e ef       	ldi	r18, 0xFE	; 254
    476a:	30 e0       	ldi	r19, 0x00	; 0
    476c:	80 e0       	ldi	r24, 0x00	; 0
    476e:	60 e0       	ldi	r22, 0x00	; 0
    4770:	a9 01       	movw	r20, r18
    4772:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
					LCD_moveCursor(1, 0);
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	60 e0       	ldi	r22, 0x00	; 0
    477a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_moveCursor>
					for(int i =index_of_binary_num-1; i>=0;i--){
    477e:	80 91 f3 01 	lds	r24, 0x01F3
    4782:	88 2f       	mov	r24, r24
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	fe 01       	movw	r30, r28
    4788:	e5 5c       	subi	r30, 0xC5	; 197
    478a:	fe 4f       	sbci	r31, 0xFE	; 254
    478c:	01 97       	sbiw	r24, 0x01	; 1
    478e:	91 83       	std	Z+1, r25	; 0x01
    4790:	80 83       	st	Z, r24
    4792:	1a c0       	rjmp	.+52     	; 0x47c8 <Converter+0x173c>

						LCD_intgerToString(bin[i]);
    4794:	fe 01       	movw	r30, r28
    4796:	e5 5c       	subi	r30, 0xC5	; 197
    4798:	fe 4f       	sbci	r31, 0xFE	; 254
    479a:	80 81       	ld	r24, Z
    479c:	91 81       	ldd	r25, Z+1	; 0x01
    479e:	88 0f       	add	r24, r24
    47a0:	99 1f       	adc	r25, r25
    47a2:	fc 01       	movw	r30, r24
    47a4:	ed 52       	subi	r30, 0x2D	; 45
    47a6:	fe 4f       	sbci	r31, 0xFE	; 254
    47a8:	80 81       	ld	r24, Z
    47aa:	91 81       	ldd	r25, Z+1	; 0x01
    47ac:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>
					getHexNumber();
					LCD_clearScreen();
					Hex_to_bin();
					LCD_displayStringRowColumn(0, 0, "binary number = ");
					LCD_moveCursor(1, 0);
					for(int i =index_of_binary_num-1; i>=0;i--){
    47b0:	de 01       	movw	r26, r28
    47b2:	a5 5c       	subi	r26, 0xC5	; 197
    47b4:	be 4f       	sbci	r27, 0xFE	; 254
    47b6:	fe 01       	movw	r30, r28
    47b8:	e5 5c       	subi	r30, 0xC5	; 197
    47ba:	fe 4f       	sbci	r31, 0xFE	; 254
    47bc:	80 81       	ld	r24, Z
    47be:	91 81       	ldd	r25, Z+1	; 0x01
    47c0:	01 97       	sbiw	r24, 0x01	; 1
    47c2:	11 96       	adiw	r26, 0x01	; 1
    47c4:	9c 93       	st	X, r25
    47c6:	8e 93       	st	-X, r24
    47c8:	fe 01       	movw	r30, r28
    47ca:	e5 5c       	subi	r30, 0xC5	; 197
    47cc:	fe 4f       	sbci	r31, 0xFE	; 254
    47ce:	80 81       	ld	r24, Z
    47d0:	91 81       	ldd	r25, Z+1	; 0x01
    47d2:	99 23       	and	r25, r25
    47d4:	fc f6       	brge	.-66     	; 0x4794 <Converter+0x1708>
    47d6:	fe 01       	movw	r30, r28
    47d8:	e7 57       	subi	r30, 0x77	; 119
    47da:	ff 4f       	sbci	r31, 0xFF	; 255
    47dc:	80 e0       	ldi	r24, 0x00	; 0
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	aa ef       	ldi	r26, 0xFA	; 250
    47e2:	b3 e4       	ldi	r27, 0x43	; 67
    47e4:	80 83       	st	Z, r24
    47e6:	91 83       	std	Z+1, r25	; 0x01
    47e8:	a2 83       	std	Z+2, r26	; 0x02
    47ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47ec:	8e 01       	movw	r16, r28
    47ee:	0b 57       	subi	r16, 0x7B	; 123
    47f0:	1f 4f       	sbci	r17, 0xFF	; 255
    47f2:	fe 01       	movw	r30, r28
    47f4:	e7 57       	subi	r30, 0x77	; 119
    47f6:	ff 4f       	sbci	r31, 0xFF	; 255
    47f8:	60 81       	ld	r22, Z
    47fa:	71 81       	ldd	r23, Z+1	; 0x01
    47fc:	82 81       	ldd	r24, Z+2	; 0x02
    47fe:	93 81       	ldd	r25, Z+3	; 0x03
    4800:	20 e0       	ldi	r18, 0x00	; 0
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	4a e7       	ldi	r20, 0x7A	; 122
    4806:	53 e4       	ldi	r21, 0x43	; 67
    4808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    480c:	dc 01       	movw	r26, r24
    480e:	cb 01       	movw	r24, r22
    4810:	f8 01       	movw	r30, r16
    4812:	80 83       	st	Z, r24
    4814:	91 83       	std	Z+1, r25	; 0x01
    4816:	a2 83       	std	Z+2, r26	; 0x02
    4818:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    481a:	fe 01       	movw	r30, r28
    481c:	eb 57       	subi	r30, 0x7B	; 123
    481e:	ff 4f       	sbci	r31, 0xFF	; 255
    4820:	60 81       	ld	r22, Z
    4822:	71 81       	ldd	r23, Z+1	; 0x01
    4824:	82 81       	ldd	r24, Z+2	; 0x02
    4826:	93 81       	ldd	r25, Z+3	; 0x03
    4828:	20 e0       	ldi	r18, 0x00	; 0
    482a:	30 e0       	ldi	r19, 0x00	; 0
    482c:	40 e8       	ldi	r20, 0x80	; 128
    482e:	5f e3       	ldi	r21, 0x3F	; 63
    4830:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4834:	88 23       	and	r24, r24
    4836:	44 f4       	brge	.+16     	; 0x4848 <Converter+0x17bc>
		__ticks = 1;
    4838:	fe 01       	movw	r30, r28
    483a:	ed 57       	subi	r30, 0x7D	; 125
    483c:	ff 4f       	sbci	r31, 0xFF	; 255
    483e:	81 e0       	ldi	r24, 0x01	; 1
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	91 83       	std	Z+1, r25	; 0x01
    4844:	80 83       	st	Z, r24
    4846:	64 c0       	rjmp	.+200    	; 0x4910 <Converter+0x1884>
	else if (__tmp > 65535)
    4848:	fe 01       	movw	r30, r28
    484a:	eb 57       	subi	r30, 0x7B	; 123
    484c:	ff 4f       	sbci	r31, 0xFF	; 255
    484e:	60 81       	ld	r22, Z
    4850:	71 81       	ldd	r23, Z+1	; 0x01
    4852:	82 81       	ldd	r24, Z+2	; 0x02
    4854:	93 81       	ldd	r25, Z+3	; 0x03
    4856:	20 e0       	ldi	r18, 0x00	; 0
    4858:	3f ef       	ldi	r19, 0xFF	; 255
    485a:	4f e7       	ldi	r20, 0x7F	; 127
    485c:	57 e4       	ldi	r21, 0x47	; 71
    485e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4862:	18 16       	cp	r1, r24
    4864:	0c f0       	brlt	.+2      	; 0x4868 <Converter+0x17dc>
    4866:	43 c0       	rjmp	.+134    	; 0x48ee <Converter+0x1862>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4868:	fe 01       	movw	r30, r28
    486a:	e7 57       	subi	r30, 0x77	; 119
    486c:	ff 4f       	sbci	r31, 0xFF	; 255
    486e:	60 81       	ld	r22, Z
    4870:	71 81       	ldd	r23, Z+1	; 0x01
    4872:	82 81       	ldd	r24, Z+2	; 0x02
    4874:	93 81       	ldd	r25, Z+3	; 0x03
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	30 e0       	ldi	r19, 0x00	; 0
    487a:	40 e2       	ldi	r20, 0x20	; 32
    487c:	51 e4       	ldi	r21, 0x41	; 65
    487e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4882:	dc 01       	movw	r26, r24
    4884:	cb 01       	movw	r24, r22
    4886:	8e 01       	movw	r16, r28
    4888:	0d 57       	subi	r16, 0x7D	; 125
    488a:	1f 4f       	sbci	r17, 0xFF	; 255
    488c:	bc 01       	movw	r22, r24
    488e:	cd 01       	movw	r24, r26
    4890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4894:	dc 01       	movw	r26, r24
    4896:	cb 01       	movw	r24, r22
    4898:	f8 01       	movw	r30, r16
    489a:	91 83       	std	Z+1, r25	; 0x01
    489c:	80 83       	st	Z, r24
    489e:	1f c0       	rjmp	.+62     	; 0x48de <Converter+0x1852>
    48a0:	fe 01       	movw	r30, r28
    48a2:	ef 57       	subi	r30, 0x7F	; 127
    48a4:	ff 4f       	sbci	r31, 0xFF	; 255
    48a6:	89 e1       	ldi	r24, 0x19	; 25
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	91 83       	std	Z+1, r25	; 0x01
    48ac:	80 83       	st	Z, r24
    48ae:	fe 01       	movw	r30, r28
    48b0:	ef 57       	subi	r30, 0x7F	; 127
    48b2:	ff 4f       	sbci	r31, 0xFF	; 255
    48b4:	80 81       	ld	r24, Z
    48b6:	91 81       	ldd	r25, Z+1	; 0x01
    48b8:	01 97       	sbiw	r24, 0x01	; 1
    48ba:	f1 f7       	brne	.-4      	; 0x48b8 <Converter+0x182c>
    48bc:	fe 01       	movw	r30, r28
    48be:	ef 57       	subi	r30, 0x7F	; 127
    48c0:	ff 4f       	sbci	r31, 0xFF	; 255
    48c2:	91 83       	std	Z+1, r25	; 0x01
    48c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48c6:	de 01       	movw	r26, r28
    48c8:	ad 57       	subi	r26, 0x7D	; 125
    48ca:	bf 4f       	sbci	r27, 0xFF	; 255
    48cc:	fe 01       	movw	r30, r28
    48ce:	ed 57       	subi	r30, 0x7D	; 125
    48d0:	ff 4f       	sbci	r31, 0xFF	; 255
    48d2:	80 81       	ld	r24, Z
    48d4:	91 81       	ldd	r25, Z+1	; 0x01
    48d6:	01 97       	sbiw	r24, 0x01	; 1
    48d8:	11 96       	adiw	r26, 0x01	; 1
    48da:	9c 93       	st	X, r25
    48dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48de:	fe 01       	movw	r30, r28
    48e0:	ed 57       	subi	r30, 0x7D	; 125
    48e2:	ff 4f       	sbci	r31, 0xFF	; 255
    48e4:	80 81       	ld	r24, Z
    48e6:	91 81       	ldd	r25, Z+1	; 0x01
    48e8:	00 97       	sbiw	r24, 0x00	; 0
    48ea:	d1 f6       	brne	.-76     	; 0x48a0 <Converter+0x1814>
    48ec:	d2 c6       	rjmp	.+3492   	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48ee:	8e 01       	movw	r16, r28
    48f0:	0d 57       	subi	r16, 0x7D	; 125
    48f2:	1f 4f       	sbci	r17, 0xFF	; 255
    48f4:	fe 01       	movw	r30, r28
    48f6:	eb 57       	subi	r30, 0x7B	; 123
    48f8:	ff 4f       	sbci	r31, 0xFF	; 255
    48fa:	60 81       	ld	r22, Z
    48fc:	71 81       	ldd	r23, Z+1	; 0x01
    48fe:	82 81       	ldd	r24, Z+2	; 0x02
    4900:	93 81       	ldd	r25, Z+3	; 0x03
    4902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4906:	dc 01       	movw	r26, r24
    4908:	cb 01       	movw	r24, r22
    490a:	f8 01       	movw	r30, r16
    490c:	91 83       	std	Z+1, r25	; 0x01
    490e:	80 83       	st	Z, r24
    4910:	de 01       	movw	r26, r28
    4912:	a1 58       	subi	r26, 0x81	; 129
    4914:	bf 4f       	sbci	r27, 0xFF	; 255
    4916:	fe 01       	movw	r30, r28
    4918:	ed 57       	subi	r30, 0x7D	; 125
    491a:	ff 4f       	sbci	r31, 0xFF	; 255
    491c:	80 81       	ld	r24, Z
    491e:	91 81       	ldd	r25, Z+1	; 0x01
    4920:	11 96       	adiw	r26, 0x01	; 1
    4922:	9c 93       	st	X, r25
    4924:	8e 93       	st	-X, r24
    4926:	fe 01       	movw	r30, r28
    4928:	e1 58       	subi	r30, 0x81	; 129
    492a:	ff 4f       	sbci	r31, 0xFF	; 255
    492c:	80 81       	ld	r24, Z
    492e:	91 81       	ldd	r25, Z+1	; 0x01
    4930:	01 97       	sbiw	r24, 0x01	; 1
    4932:	f1 f7       	brne	.-4      	; 0x4930 <Converter+0x18a4>
    4934:	fe 01       	movw	r30, r28
    4936:	e1 58       	subi	r30, 0x81	; 129
    4938:	ff 4f       	sbci	r31, 0xFF	; 255
    493a:	91 83       	std	Z+1, r25	; 0x01
    493c:	80 83       	st	Z, r24
    493e:	a9 c6       	rjmp	.+3410   	; 0x5692 <Converter+0x2606>
						LCD_intgerToString(bin[i]);
					}
					_delay_ms(show_time);
					break;
				case 3:
					getHexNumber();
    4940:	0e 94 55 2b 	call	0x56aa	; 0x56aa <getHexNumber>
					LCD_clearScreen();
    4944:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
					hex_to_oct();
    4948:	0e 94 25 13 	call	0x264a	; 0x264a <hex_to_oct>
					LCD_displayStringRowColumn(0, 0, "octal number = ");
    494c:	2b e6       	ldi	r18, 0x6B	; 107
    494e:	31 e0       	ldi	r19, 0x01	; 1
    4950:	80 e0       	ldi	r24, 0x00	; 0
    4952:	60 e0       	ldi	r22, 0x00	; 0
    4954:	a9 01       	movw	r20, r18
    4956:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
					LCD_moveCursor(1, 0);
    495a:	81 e0       	ldi	r24, 0x01	; 1
    495c:	60 e0       	ldi	r22, 0x00	; 0
    495e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_moveCursor>
					for(int i =index_of_octal_number-1; i>=0;i--){
    4962:	80 91 14 02 	lds	r24, 0x0214
    4966:	88 2f       	mov	r24, r24
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	fe 01       	movw	r30, r28
    496c:	e7 5c       	subi	r30, 0xC7	; 199
    496e:	fe 4f       	sbci	r31, 0xFE	; 254
    4970:	01 97       	sbiw	r24, 0x01	; 1
    4972:	91 83       	std	Z+1, r25	; 0x01
    4974:	80 83       	st	Z, r24
    4976:	1a c0       	rjmp	.+52     	; 0x49ac <Converter+0x1920>

						LCD_intgerToString(Octal_number[i]);
    4978:	fe 01       	movw	r30, r28
    497a:	e7 5c       	subi	r30, 0xC7	; 199
    497c:	fe 4f       	sbci	r31, 0xFE	; 254
    497e:	80 81       	ld	r24, Z
    4980:	91 81       	ldd	r25, Z+1	; 0x01
    4982:	88 0f       	add	r24, r24
    4984:	99 1f       	adc	r25, r25
    4986:	fc 01       	movw	r30, r24
    4988:	ec 50       	subi	r30, 0x0C	; 12
    498a:	fe 4f       	sbci	r31, 0xFE	; 254
    498c:	80 81       	ld	r24, Z
    498e:	91 81       	ldd	r25, Z+1	; 0x01
    4990:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>
					getHexNumber();
					LCD_clearScreen();
					hex_to_oct();
					LCD_displayStringRowColumn(0, 0, "octal number = ");
					LCD_moveCursor(1, 0);
					for(int i =index_of_octal_number-1; i>=0;i--){
    4994:	de 01       	movw	r26, r28
    4996:	a7 5c       	subi	r26, 0xC7	; 199
    4998:	be 4f       	sbci	r27, 0xFE	; 254
    499a:	fe 01       	movw	r30, r28
    499c:	e7 5c       	subi	r30, 0xC7	; 199
    499e:	fe 4f       	sbci	r31, 0xFE	; 254
    49a0:	80 81       	ld	r24, Z
    49a2:	91 81       	ldd	r25, Z+1	; 0x01
    49a4:	01 97       	sbiw	r24, 0x01	; 1
    49a6:	11 96       	adiw	r26, 0x01	; 1
    49a8:	9c 93       	st	X, r25
    49aa:	8e 93       	st	-X, r24
    49ac:	fe 01       	movw	r30, r28
    49ae:	e7 5c       	subi	r30, 0xC7	; 199
    49b0:	fe 4f       	sbci	r31, 0xFE	; 254
    49b2:	80 81       	ld	r24, Z
    49b4:	91 81       	ldd	r25, Z+1	; 0x01
    49b6:	99 23       	and	r25, r25
    49b8:	fc f6       	brge	.-66     	; 0x4978 <Converter+0x18ec>
    49ba:	fe 01       	movw	r30, r28
    49bc:	e5 58       	subi	r30, 0x85	; 133
    49be:	ff 4f       	sbci	r31, 0xFF	; 255
    49c0:	80 e0       	ldi	r24, 0x00	; 0
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	aa ef       	ldi	r26, 0xFA	; 250
    49c6:	b3 e4       	ldi	r27, 0x43	; 67
    49c8:	80 83       	st	Z, r24
    49ca:	91 83       	std	Z+1, r25	; 0x01
    49cc:	a2 83       	std	Z+2, r26	; 0x02
    49ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49d0:	8e 01       	movw	r16, r28
    49d2:	09 58       	subi	r16, 0x89	; 137
    49d4:	1f 4f       	sbci	r17, 0xFF	; 255
    49d6:	fe 01       	movw	r30, r28
    49d8:	e5 58       	subi	r30, 0x85	; 133
    49da:	ff 4f       	sbci	r31, 0xFF	; 255
    49dc:	60 81       	ld	r22, Z
    49de:	71 81       	ldd	r23, Z+1	; 0x01
    49e0:	82 81       	ldd	r24, Z+2	; 0x02
    49e2:	93 81       	ldd	r25, Z+3	; 0x03
    49e4:	20 e0       	ldi	r18, 0x00	; 0
    49e6:	30 e0       	ldi	r19, 0x00	; 0
    49e8:	4a e7       	ldi	r20, 0x7A	; 122
    49ea:	53 e4       	ldi	r21, 0x43	; 67
    49ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f0:	dc 01       	movw	r26, r24
    49f2:	cb 01       	movw	r24, r22
    49f4:	f8 01       	movw	r30, r16
    49f6:	80 83       	st	Z, r24
    49f8:	91 83       	std	Z+1, r25	; 0x01
    49fa:	a2 83       	std	Z+2, r26	; 0x02
    49fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49fe:	fe 01       	movw	r30, r28
    4a00:	e9 58       	subi	r30, 0x89	; 137
    4a02:	ff 4f       	sbci	r31, 0xFF	; 255
    4a04:	60 81       	ld	r22, Z
    4a06:	71 81       	ldd	r23, Z+1	; 0x01
    4a08:	82 81       	ldd	r24, Z+2	; 0x02
    4a0a:	93 81       	ldd	r25, Z+3	; 0x03
    4a0c:	20 e0       	ldi	r18, 0x00	; 0
    4a0e:	30 e0       	ldi	r19, 0x00	; 0
    4a10:	40 e8       	ldi	r20, 0x80	; 128
    4a12:	5f e3       	ldi	r21, 0x3F	; 63
    4a14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a18:	88 23       	and	r24, r24
    4a1a:	44 f4       	brge	.+16     	; 0x4a2c <Converter+0x19a0>
		__ticks = 1;
    4a1c:	fe 01       	movw	r30, r28
    4a1e:	eb 58       	subi	r30, 0x8B	; 139
    4a20:	ff 4f       	sbci	r31, 0xFF	; 255
    4a22:	81 e0       	ldi	r24, 0x01	; 1
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	91 83       	std	Z+1, r25	; 0x01
    4a28:	80 83       	st	Z, r24
    4a2a:	64 c0       	rjmp	.+200    	; 0x4af4 <Converter+0x1a68>
	else if (__tmp > 65535)
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	e9 58       	subi	r30, 0x89	; 137
    4a30:	ff 4f       	sbci	r31, 0xFF	; 255
    4a32:	60 81       	ld	r22, Z
    4a34:	71 81       	ldd	r23, Z+1	; 0x01
    4a36:	82 81       	ldd	r24, Z+2	; 0x02
    4a38:	93 81       	ldd	r25, Z+3	; 0x03
    4a3a:	20 e0       	ldi	r18, 0x00	; 0
    4a3c:	3f ef       	ldi	r19, 0xFF	; 255
    4a3e:	4f e7       	ldi	r20, 0x7F	; 127
    4a40:	57 e4       	ldi	r21, 0x47	; 71
    4a42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a46:	18 16       	cp	r1, r24
    4a48:	0c f0       	brlt	.+2      	; 0x4a4c <Converter+0x19c0>
    4a4a:	43 c0       	rjmp	.+134    	; 0x4ad2 <Converter+0x1a46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a4c:	fe 01       	movw	r30, r28
    4a4e:	e5 58       	subi	r30, 0x85	; 133
    4a50:	ff 4f       	sbci	r31, 0xFF	; 255
    4a52:	60 81       	ld	r22, Z
    4a54:	71 81       	ldd	r23, Z+1	; 0x01
    4a56:	82 81       	ldd	r24, Z+2	; 0x02
    4a58:	93 81       	ldd	r25, Z+3	; 0x03
    4a5a:	20 e0       	ldi	r18, 0x00	; 0
    4a5c:	30 e0       	ldi	r19, 0x00	; 0
    4a5e:	40 e2       	ldi	r20, 0x20	; 32
    4a60:	51 e4       	ldi	r21, 0x41	; 65
    4a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a66:	dc 01       	movw	r26, r24
    4a68:	cb 01       	movw	r24, r22
    4a6a:	8e 01       	movw	r16, r28
    4a6c:	0b 58       	subi	r16, 0x8B	; 139
    4a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a70:	bc 01       	movw	r22, r24
    4a72:	cd 01       	movw	r24, r26
    4a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a78:	dc 01       	movw	r26, r24
    4a7a:	cb 01       	movw	r24, r22
    4a7c:	f8 01       	movw	r30, r16
    4a7e:	91 83       	std	Z+1, r25	; 0x01
    4a80:	80 83       	st	Z, r24
    4a82:	1f c0       	rjmp	.+62     	; 0x4ac2 <Converter+0x1a36>
    4a84:	fe 01       	movw	r30, r28
    4a86:	ed 58       	subi	r30, 0x8D	; 141
    4a88:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8a:	89 e1       	ldi	r24, 0x19	; 25
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	91 83       	std	Z+1, r25	; 0x01
    4a90:	80 83       	st	Z, r24
    4a92:	fe 01       	movw	r30, r28
    4a94:	ed 58       	subi	r30, 0x8D	; 141
    4a96:	ff 4f       	sbci	r31, 0xFF	; 255
    4a98:	80 81       	ld	r24, Z
    4a9a:	91 81       	ldd	r25, Z+1	; 0x01
    4a9c:	01 97       	sbiw	r24, 0x01	; 1
    4a9e:	f1 f7       	brne	.-4      	; 0x4a9c <Converter+0x1a10>
    4aa0:	fe 01       	movw	r30, r28
    4aa2:	ed 58       	subi	r30, 0x8D	; 141
    4aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa6:	91 83       	std	Z+1, r25	; 0x01
    4aa8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aaa:	de 01       	movw	r26, r28
    4aac:	ab 58       	subi	r26, 0x8B	; 139
    4aae:	bf 4f       	sbci	r27, 0xFF	; 255
    4ab0:	fe 01       	movw	r30, r28
    4ab2:	eb 58       	subi	r30, 0x8B	; 139
    4ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab6:	80 81       	ld	r24, Z
    4ab8:	91 81       	ldd	r25, Z+1	; 0x01
    4aba:	01 97       	sbiw	r24, 0x01	; 1
    4abc:	11 96       	adiw	r26, 0x01	; 1
    4abe:	9c 93       	st	X, r25
    4ac0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ac2:	fe 01       	movw	r30, r28
    4ac4:	eb 58       	subi	r30, 0x8B	; 139
    4ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac8:	80 81       	ld	r24, Z
    4aca:	91 81       	ldd	r25, Z+1	; 0x01
    4acc:	00 97       	sbiw	r24, 0x00	; 0
    4ace:	d1 f6       	brne	.-76     	; 0x4a84 <Converter+0x19f8>
    4ad0:	e0 c5       	rjmp	.+3008   	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ad2:	8e 01       	movw	r16, r28
    4ad4:	0b 58       	subi	r16, 0x8B	; 139
    4ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad8:	fe 01       	movw	r30, r28
    4ada:	e9 58       	subi	r30, 0x89	; 137
    4adc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ade:	60 81       	ld	r22, Z
    4ae0:	71 81       	ldd	r23, Z+1	; 0x01
    4ae2:	82 81       	ldd	r24, Z+2	; 0x02
    4ae4:	93 81       	ldd	r25, Z+3	; 0x03
    4ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aea:	dc 01       	movw	r26, r24
    4aec:	cb 01       	movw	r24, r22
    4aee:	f8 01       	movw	r30, r16
    4af0:	91 83       	std	Z+1, r25	; 0x01
    4af2:	80 83       	st	Z, r24
    4af4:	de 01       	movw	r26, r28
    4af6:	af 58       	subi	r26, 0x8F	; 143
    4af8:	bf 4f       	sbci	r27, 0xFF	; 255
    4afa:	fe 01       	movw	r30, r28
    4afc:	eb 58       	subi	r30, 0x8B	; 139
    4afe:	ff 4f       	sbci	r31, 0xFF	; 255
    4b00:	80 81       	ld	r24, Z
    4b02:	91 81       	ldd	r25, Z+1	; 0x01
    4b04:	11 96       	adiw	r26, 0x01	; 1
    4b06:	9c 93       	st	X, r25
    4b08:	8e 93       	st	-X, r24
    4b0a:	fe 01       	movw	r30, r28
    4b0c:	ef 58       	subi	r30, 0x8F	; 143
    4b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b10:	80 81       	ld	r24, Z
    4b12:	91 81       	ldd	r25, Z+1	; 0x01
    4b14:	01 97       	sbiw	r24, 0x01	; 1
    4b16:	f1 f7       	brne	.-4      	; 0x4b14 <Converter+0x1a88>
    4b18:	fe 01       	movw	r30, r28
    4b1a:	ef 58       	subi	r30, 0x8F	; 143
    4b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1e:	91 83       	std	Z+1, r25	; 0x01
    4b20:	80 83       	st	Z, r24
    4b22:	b7 c5       	rjmp	.+2926   	; 0x5692 <Converter+0x2606>
						LCD_intgerToString(Octal_number[i]);
					}
					_delay_ms(show_time);
					break;
				default:
					LCD_clearScreen();
    4b24:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "plz enter valid");
    4b28:	2b e1       	ldi	r18, 0x1B	; 27
    4b2a:	31 e0       	ldi	r19, 0x01	; 1
    4b2c:	80 e0       	ldi	r24, 0x00	; 0
    4b2e:	60 e0       	ldi	r22, 0x00	; 0
    4b30:	a9 01       	movw	r20, r18
    4b32:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "option.");
    4b36:	2b e2       	ldi	r18, 0x2B	; 43
    4b38:	31 e0       	ldi	r19, 0x01	; 1
    4b3a:	81 e0       	ldi	r24, 0x01	; 1
    4b3c:	60 e0       	ldi	r22, 0x00	; 0
    4b3e:	a9 01       	movw	r20, r18
    4b40:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
    4b44:	fe 01       	movw	r30, r28
    4b46:	e3 59       	subi	r30, 0x93	; 147
    4b48:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4a:	80 e0       	ldi	r24, 0x00	; 0
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	af ea       	ldi	r26, 0xAF	; 175
    4b50:	b3 e4       	ldi	r27, 0x43	; 67
    4b52:	80 83       	st	Z, r24
    4b54:	91 83       	std	Z+1, r25	; 0x01
    4b56:	a2 83       	std	Z+2, r26	; 0x02
    4b58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b5a:	8e 01       	movw	r16, r28
    4b5c:	07 59       	subi	r16, 0x97	; 151
    4b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b60:	fe 01       	movw	r30, r28
    4b62:	e3 59       	subi	r30, 0x93	; 147
    4b64:	ff 4f       	sbci	r31, 0xFF	; 255
    4b66:	60 81       	ld	r22, Z
    4b68:	71 81       	ldd	r23, Z+1	; 0x01
    4b6a:	82 81       	ldd	r24, Z+2	; 0x02
    4b6c:	93 81       	ldd	r25, Z+3	; 0x03
    4b6e:	20 e0       	ldi	r18, 0x00	; 0
    4b70:	30 e0       	ldi	r19, 0x00	; 0
    4b72:	4a e7       	ldi	r20, 0x7A	; 122
    4b74:	53 e4       	ldi	r21, 0x43	; 67
    4b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b7a:	dc 01       	movw	r26, r24
    4b7c:	cb 01       	movw	r24, r22
    4b7e:	f8 01       	movw	r30, r16
    4b80:	80 83       	st	Z, r24
    4b82:	91 83       	std	Z+1, r25	; 0x01
    4b84:	a2 83       	std	Z+2, r26	; 0x02
    4b86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b88:	fe 01       	movw	r30, r28
    4b8a:	e7 59       	subi	r30, 0x97	; 151
    4b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8e:	60 81       	ld	r22, Z
    4b90:	71 81       	ldd	r23, Z+1	; 0x01
    4b92:	82 81       	ldd	r24, Z+2	; 0x02
    4b94:	93 81       	ldd	r25, Z+3	; 0x03
    4b96:	20 e0       	ldi	r18, 0x00	; 0
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	40 e8       	ldi	r20, 0x80	; 128
    4b9c:	5f e3       	ldi	r21, 0x3F	; 63
    4b9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ba2:	88 23       	and	r24, r24
    4ba4:	44 f4       	brge	.+16     	; 0x4bb6 <Converter+0x1b2a>
		__ticks = 1;
    4ba6:	fe 01       	movw	r30, r28
    4ba8:	e9 59       	subi	r30, 0x99	; 153
    4baa:	ff 4f       	sbci	r31, 0xFF	; 255
    4bac:	81 e0       	ldi	r24, 0x01	; 1
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	91 83       	std	Z+1, r25	; 0x01
    4bb2:	80 83       	st	Z, r24
    4bb4:	64 c0       	rjmp	.+200    	; 0x4c7e <Converter+0x1bf2>
	else if (__tmp > 65535)
    4bb6:	fe 01       	movw	r30, r28
    4bb8:	e7 59       	subi	r30, 0x97	; 151
    4bba:	ff 4f       	sbci	r31, 0xFF	; 255
    4bbc:	60 81       	ld	r22, Z
    4bbe:	71 81       	ldd	r23, Z+1	; 0x01
    4bc0:	82 81       	ldd	r24, Z+2	; 0x02
    4bc2:	93 81       	ldd	r25, Z+3	; 0x03
    4bc4:	20 e0       	ldi	r18, 0x00	; 0
    4bc6:	3f ef       	ldi	r19, 0xFF	; 255
    4bc8:	4f e7       	ldi	r20, 0x7F	; 127
    4bca:	57 e4       	ldi	r21, 0x47	; 71
    4bcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4bd0:	18 16       	cp	r1, r24
    4bd2:	0c f0       	brlt	.+2      	; 0x4bd6 <Converter+0x1b4a>
    4bd4:	43 c0       	rjmp	.+134    	; 0x4c5c <Converter+0x1bd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bd6:	fe 01       	movw	r30, r28
    4bd8:	e3 59       	subi	r30, 0x93	; 147
    4bda:	ff 4f       	sbci	r31, 0xFF	; 255
    4bdc:	60 81       	ld	r22, Z
    4bde:	71 81       	ldd	r23, Z+1	; 0x01
    4be0:	82 81       	ldd	r24, Z+2	; 0x02
    4be2:	93 81       	ldd	r25, Z+3	; 0x03
    4be4:	20 e0       	ldi	r18, 0x00	; 0
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	40 e2       	ldi	r20, 0x20	; 32
    4bea:	51 e4       	ldi	r21, 0x41	; 65
    4bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bf0:	dc 01       	movw	r26, r24
    4bf2:	cb 01       	movw	r24, r22
    4bf4:	8e 01       	movw	r16, r28
    4bf6:	09 59       	subi	r16, 0x99	; 153
    4bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    4bfa:	bc 01       	movw	r22, r24
    4bfc:	cd 01       	movw	r24, r26
    4bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c02:	dc 01       	movw	r26, r24
    4c04:	cb 01       	movw	r24, r22
    4c06:	f8 01       	movw	r30, r16
    4c08:	91 83       	std	Z+1, r25	; 0x01
    4c0a:	80 83       	st	Z, r24
    4c0c:	1f c0       	rjmp	.+62     	; 0x4c4c <Converter+0x1bc0>
    4c0e:	fe 01       	movw	r30, r28
    4c10:	eb 59       	subi	r30, 0x9B	; 155
    4c12:	ff 4f       	sbci	r31, 0xFF	; 255
    4c14:	89 e1       	ldi	r24, 0x19	; 25
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	91 83       	std	Z+1, r25	; 0x01
    4c1a:	80 83       	st	Z, r24
    4c1c:	fe 01       	movw	r30, r28
    4c1e:	eb 59       	subi	r30, 0x9B	; 155
    4c20:	ff 4f       	sbci	r31, 0xFF	; 255
    4c22:	80 81       	ld	r24, Z
    4c24:	91 81       	ldd	r25, Z+1	; 0x01
    4c26:	01 97       	sbiw	r24, 0x01	; 1
    4c28:	f1 f7       	brne	.-4      	; 0x4c26 <Converter+0x1b9a>
    4c2a:	fe 01       	movw	r30, r28
    4c2c:	eb 59       	subi	r30, 0x9B	; 155
    4c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c30:	91 83       	std	Z+1, r25	; 0x01
    4c32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c34:	de 01       	movw	r26, r28
    4c36:	a9 59       	subi	r26, 0x99	; 153
    4c38:	bf 4f       	sbci	r27, 0xFF	; 255
    4c3a:	fe 01       	movw	r30, r28
    4c3c:	e9 59       	subi	r30, 0x99	; 153
    4c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c40:	80 81       	ld	r24, Z
    4c42:	91 81       	ldd	r25, Z+1	; 0x01
    4c44:	01 97       	sbiw	r24, 0x01	; 1
    4c46:	11 96       	adiw	r26, 0x01	; 1
    4c48:	9c 93       	st	X, r25
    4c4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c4c:	fe 01       	movw	r30, r28
    4c4e:	e9 59       	subi	r30, 0x99	; 153
    4c50:	ff 4f       	sbci	r31, 0xFF	; 255
    4c52:	80 81       	ld	r24, Z
    4c54:	91 81       	ldd	r25, Z+1	; 0x01
    4c56:	00 97       	sbiw	r24, 0x00	; 0
    4c58:	d1 f6       	brne	.-76     	; 0x4c0e <Converter+0x1b82>
    4c5a:	1b c5       	rjmp	.+2614   	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c5c:	8e 01       	movw	r16, r28
    4c5e:	09 59       	subi	r16, 0x99	; 153
    4c60:	1f 4f       	sbci	r17, 0xFF	; 255
    4c62:	fe 01       	movw	r30, r28
    4c64:	e7 59       	subi	r30, 0x97	; 151
    4c66:	ff 4f       	sbci	r31, 0xFF	; 255
    4c68:	60 81       	ld	r22, Z
    4c6a:	71 81       	ldd	r23, Z+1	; 0x01
    4c6c:	82 81       	ldd	r24, Z+2	; 0x02
    4c6e:	93 81       	ldd	r25, Z+3	; 0x03
    4c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c74:	dc 01       	movw	r26, r24
    4c76:	cb 01       	movw	r24, r22
    4c78:	f8 01       	movw	r30, r16
    4c7a:	91 83       	std	Z+1, r25	; 0x01
    4c7c:	80 83       	st	Z, r24
    4c7e:	de 01       	movw	r26, r28
    4c80:	ad 59       	subi	r26, 0x9D	; 157
    4c82:	bf 4f       	sbci	r27, 0xFF	; 255
    4c84:	fe 01       	movw	r30, r28
    4c86:	e9 59       	subi	r30, 0x99	; 153
    4c88:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8a:	80 81       	ld	r24, Z
    4c8c:	91 81       	ldd	r25, Z+1	; 0x01
    4c8e:	11 96       	adiw	r26, 0x01	; 1
    4c90:	9c 93       	st	X, r25
    4c92:	8e 93       	st	-X, r24
    4c94:	fe 01       	movw	r30, r28
    4c96:	ed 59       	subi	r30, 0x9D	; 157
    4c98:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9a:	80 81       	ld	r24, Z
    4c9c:	91 81       	ldd	r25, Z+1	; 0x01
    4c9e:	01 97       	sbiw	r24, 0x01	; 1
    4ca0:	f1 f7       	brne	.-4      	; 0x4c9e <Converter+0x1c12>
    4ca2:	fe 01       	movw	r30, r28
    4ca4:	ed 59       	subi	r30, 0x9D	; 157
    4ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca8:	91 83       	std	Z+1, r25	; 0x01
    4caa:	80 83       	st	Z, r24
    4cac:	f2 c4       	rjmp	.+2532   	; 0x5692 <Converter+0x2606>

				break;

				/*octal case*/
				case 4:
					LCD_clearScreen();
    4cae:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"1-to dec  2-to bin");
    4cb2:	22 e5       	ldi	r18, 0x52	; 82
    4cb4:	31 e0       	ldi	r19, 0x01	; 1
    4cb6:	80 e0       	ldi	r24, 0x00	; 0
    4cb8:	60 e0       	ldi	r22, 0x00	; 0
    4cba:	a9 01       	movw	r20, r18
    4cbc:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "3-to hex");
    4cc0:	2b e7       	ldi	r18, 0x7B	; 123
    4cc2:	31 e0       	ldi	r19, 0x01	; 1
    4cc4:	81 e0       	ldi	r24, 0x01	; 1
    4cc6:	60 e0       	ldi	r22, 0x00	; 0
    4cc8:	a9 01       	movw	r20, r18
    4cca:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
					option=KEYPAD_getPressedKey();
    4cce:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    4cd2:	fe 01       	movw	r30, r28
    4cd4:	eb 5b       	subi	r30, 0xBB	; 187
    4cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    4cd8:	80 83       	st	Z, r24
    4cda:	fe 01       	movw	r30, r28
    4cdc:	e1 5a       	subi	r30, 0xA1	; 161
    4cde:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce0:	80 e0       	ldi	r24, 0x00	; 0
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	af ea       	ldi	r26, 0xAF	; 175
    4ce6:	b3 e4       	ldi	r27, 0x43	; 67
    4ce8:	80 83       	st	Z, r24
    4cea:	91 83       	std	Z+1, r25	; 0x01
    4cec:	a2 83       	std	Z+2, r26	; 0x02
    4cee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cf0:	8e 01       	movw	r16, r28
    4cf2:	05 5a       	subi	r16, 0xA5	; 165
    4cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    4cf6:	fe 01       	movw	r30, r28
    4cf8:	e1 5a       	subi	r30, 0xA1	; 161
    4cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfc:	60 81       	ld	r22, Z
    4cfe:	71 81       	ldd	r23, Z+1	; 0x01
    4d00:	82 81       	ldd	r24, Z+2	; 0x02
    4d02:	93 81       	ldd	r25, Z+3	; 0x03
    4d04:	20 e0       	ldi	r18, 0x00	; 0
    4d06:	30 e0       	ldi	r19, 0x00	; 0
    4d08:	4a e7       	ldi	r20, 0x7A	; 122
    4d0a:	53 e4       	ldi	r21, 0x43	; 67
    4d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d10:	dc 01       	movw	r26, r24
    4d12:	cb 01       	movw	r24, r22
    4d14:	f8 01       	movw	r30, r16
    4d16:	80 83       	st	Z, r24
    4d18:	91 83       	std	Z+1, r25	; 0x01
    4d1a:	a2 83       	std	Z+2, r26	; 0x02
    4d1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d1e:	fe 01       	movw	r30, r28
    4d20:	e5 5a       	subi	r30, 0xA5	; 165
    4d22:	ff 4f       	sbci	r31, 0xFF	; 255
    4d24:	60 81       	ld	r22, Z
    4d26:	71 81       	ldd	r23, Z+1	; 0x01
    4d28:	82 81       	ldd	r24, Z+2	; 0x02
    4d2a:	93 81       	ldd	r25, Z+3	; 0x03
    4d2c:	20 e0       	ldi	r18, 0x00	; 0
    4d2e:	30 e0       	ldi	r19, 0x00	; 0
    4d30:	40 e8       	ldi	r20, 0x80	; 128
    4d32:	5f e3       	ldi	r21, 0x3F	; 63
    4d34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d38:	88 23       	and	r24, r24
    4d3a:	44 f4       	brge	.+16     	; 0x4d4c <Converter+0x1cc0>
		__ticks = 1;
    4d3c:	fe 01       	movw	r30, r28
    4d3e:	e7 5a       	subi	r30, 0xA7	; 167
    4d40:	ff 4f       	sbci	r31, 0xFF	; 255
    4d42:	81 e0       	ldi	r24, 0x01	; 1
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	91 83       	std	Z+1, r25	; 0x01
    4d48:	80 83       	st	Z, r24
    4d4a:	64 c0       	rjmp	.+200    	; 0x4e14 <Converter+0x1d88>
	else if (__tmp > 65535)
    4d4c:	fe 01       	movw	r30, r28
    4d4e:	e5 5a       	subi	r30, 0xA5	; 165
    4d50:	ff 4f       	sbci	r31, 0xFF	; 255
    4d52:	60 81       	ld	r22, Z
    4d54:	71 81       	ldd	r23, Z+1	; 0x01
    4d56:	82 81       	ldd	r24, Z+2	; 0x02
    4d58:	93 81       	ldd	r25, Z+3	; 0x03
    4d5a:	20 e0       	ldi	r18, 0x00	; 0
    4d5c:	3f ef       	ldi	r19, 0xFF	; 255
    4d5e:	4f e7       	ldi	r20, 0x7F	; 127
    4d60:	57 e4       	ldi	r21, 0x47	; 71
    4d62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d66:	18 16       	cp	r1, r24
    4d68:	0c f0       	brlt	.+2      	; 0x4d6c <Converter+0x1ce0>
    4d6a:	43 c0       	rjmp	.+134    	; 0x4df2 <Converter+0x1d66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d6c:	fe 01       	movw	r30, r28
    4d6e:	e1 5a       	subi	r30, 0xA1	; 161
    4d70:	ff 4f       	sbci	r31, 0xFF	; 255
    4d72:	60 81       	ld	r22, Z
    4d74:	71 81       	ldd	r23, Z+1	; 0x01
    4d76:	82 81       	ldd	r24, Z+2	; 0x02
    4d78:	93 81       	ldd	r25, Z+3	; 0x03
    4d7a:	20 e0       	ldi	r18, 0x00	; 0
    4d7c:	30 e0       	ldi	r19, 0x00	; 0
    4d7e:	40 e2       	ldi	r20, 0x20	; 32
    4d80:	51 e4       	ldi	r21, 0x41	; 65
    4d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d86:	dc 01       	movw	r26, r24
    4d88:	cb 01       	movw	r24, r22
    4d8a:	8e 01       	movw	r16, r28
    4d8c:	07 5a       	subi	r16, 0xA7	; 167
    4d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d90:	bc 01       	movw	r22, r24
    4d92:	cd 01       	movw	r24, r26
    4d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d98:	dc 01       	movw	r26, r24
    4d9a:	cb 01       	movw	r24, r22
    4d9c:	f8 01       	movw	r30, r16
    4d9e:	91 83       	std	Z+1, r25	; 0x01
    4da0:	80 83       	st	Z, r24
    4da2:	1f c0       	rjmp	.+62     	; 0x4de2 <Converter+0x1d56>
    4da4:	fe 01       	movw	r30, r28
    4da6:	e9 5a       	subi	r30, 0xA9	; 169
    4da8:	ff 4f       	sbci	r31, 0xFF	; 255
    4daa:	89 e1       	ldi	r24, 0x19	; 25
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	91 83       	std	Z+1, r25	; 0x01
    4db0:	80 83       	st	Z, r24
    4db2:	fe 01       	movw	r30, r28
    4db4:	e9 5a       	subi	r30, 0xA9	; 169
    4db6:	ff 4f       	sbci	r31, 0xFF	; 255
    4db8:	80 81       	ld	r24, Z
    4dba:	91 81       	ldd	r25, Z+1	; 0x01
    4dbc:	01 97       	sbiw	r24, 0x01	; 1
    4dbe:	f1 f7       	brne	.-4      	; 0x4dbc <Converter+0x1d30>
    4dc0:	fe 01       	movw	r30, r28
    4dc2:	e9 5a       	subi	r30, 0xA9	; 169
    4dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc6:	91 83       	std	Z+1, r25	; 0x01
    4dc8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dca:	de 01       	movw	r26, r28
    4dcc:	a7 5a       	subi	r26, 0xA7	; 167
    4dce:	bf 4f       	sbci	r27, 0xFF	; 255
    4dd0:	fe 01       	movw	r30, r28
    4dd2:	e7 5a       	subi	r30, 0xA7	; 167
    4dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd6:	80 81       	ld	r24, Z
    4dd8:	91 81       	ldd	r25, Z+1	; 0x01
    4dda:	01 97       	sbiw	r24, 0x01	; 1
    4ddc:	11 96       	adiw	r26, 0x01	; 1
    4dde:	9c 93       	st	X, r25
    4de0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4de2:	fe 01       	movw	r30, r28
    4de4:	e7 5a       	subi	r30, 0xA7	; 167
    4de6:	ff 4f       	sbci	r31, 0xFF	; 255
    4de8:	80 81       	ld	r24, Z
    4dea:	91 81       	ldd	r25, Z+1	; 0x01
    4dec:	00 97       	sbiw	r24, 0x00	; 0
    4dee:	d1 f6       	brne	.-76     	; 0x4da4 <Converter+0x1d18>
    4df0:	28 c0       	rjmp	.+80     	; 0x4e42 <Converter+0x1db6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4df2:	8e 01       	movw	r16, r28
    4df4:	07 5a       	subi	r16, 0xA7	; 167
    4df6:	1f 4f       	sbci	r17, 0xFF	; 255
    4df8:	fe 01       	movw	r30, r28
    4dfa:	e5 5a       	subi	r30, 0xA5	; 165
    4dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfe:	60 81       	ld	r22, Z
    4e00:	71 81       	ldd	r23, Z+1	; 0x01
    4e02:	82 81       	ldd	r24, Z+2	; 0x02
    4e04:	93 81       	ldd	r25, Z+3	; 0x03
    4e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e0a:	dc 01       	movw	r26, r24
    4e0c:	cb 01       	movw	r24, r22
    4e0e:	f8 01       	movw	r30, r16
    4e10:	91 83       	std	Z+1, r25	; 0x01
    4e12:	80 83       	st	Z, r24
    4e14:	de 01       	movw	r26, r28
    4e16:	ab 5a       	subi	r26, 0xAB	; 171
    4e18:	bf 4f       	sbci	r27, 0xFF	; 255
    4e1a:	fe 01       	movw	r30, r28
    4e1c:	e7 5a       	subi	r30, 0xA7	; 167
    4e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e20:	80 81       	ld	r24, Z
    4e22:	91 81       	ldd	r25, Z+1	; 0x01
    4e24:	11 96       	adiw	r26, 0x01	; 1
    4e26:	9c 93       	st	X, r25
    4e28:	8e 93       	st	-X, r24
    4e2a:	fe 01       	movw	r30, r28
    4e2c:	eb 5a       	subi	r30, 0xAB	; 171
    4e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e30:	80 81       	ld	r24, Z
    4e32:	91 81       	ldd	r25, Z+1	; 0x01
    4e34:	01 97       	sbiw	r24, 0x01	; 1
    4e36:	f1 f7       	brne	.-4      	; 0x4e34 <Converter+0x1da8>
    4e38:	fe 01       	movw	r30, r28
    4e3a:	eb 5a       	subi	r30, 0xAB	; 171
    4e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3e:	91 83       	std	Z+1, r25	; 0x01
    4e40:	80 83       	st	Z, r24
					_delay_ms(KEYPAD_PRESSED_TIME);

					/*switch case for choosing the option and printing it*/
					switch(option){
    4e42:	fe 01       	movw	r30, r28
    4e44:	eb 5b       	subi	r30, 0xBB	; 187
    4e46:	fe 4f       	sbci	r31, 0xFE	; 254
    4e48:	80 81       	ld	r24, Z
    4e4a:	28 2f       	mov	r18, r24
    4e4c:	30 e0       	ldi	r19, 0x00	; 0
    4e4e:	c7 5b       	subi	r28, 0xB7	; 183
    4e50:	de 4f       	sbci	r29, 0xFE	; 254
    4e52:	39 83       	std	Y+1, r19	; 0x01
    4e54:	28 83       	st	Y, r18
    4e56:	c9 54       	subi	r28, 0x49	; 73
    4e58:	d1 40       	sbci	r29, 0x01	; 1
    4e5a:	c7 5b       	subi	r28, 0xB7	; 183
    4e5c:	de 4f       	sbci	r29, 0xFE	; 254
    4e5e:	88 81       	ld	r24, Y
    4e60:	99 81       	ldd	r25, Y+1	; 0x01
    4e62:	c9 54       	subi	r28, 0x49	; 73
    4e64:	d1 40       	sbci	r29, 0x01	; 1
    4e66:	82 30       	cpi	r24, 0x02	; 2
    4e68:	91 05       	cpc	r25, r1
    4e6a:	09 f4       	brne	.+2      	; 0x4e6e <Converter+0x1de2>
    4e6c:	ec c0       	rjmp	.+472    	; 0x5046 <Converter+0x1fba>
    4e6e:	c7 5b       	subi	r28, 0xB7	; 183
    4e70:	de 4f       	sbci	r29, 0xFE	; 254
    4e72:	e8 81       	ld	r30, Y
    4e74:	f9 81       	ldd	r31, Y+1	; 0x01
    4e76:	c9 54       	subi	r28, 0x49	; 73
    4e78:	d1 40       	sbci	r29, 0x01	; 1
    4e7a:	e3 30       	cpi	r30, 0x03	; 3
    4e7c:	f1 05       	cpc	r31, r1
    4e7e:	09 f4       	brne	.+2      	; 0x4e82 <Converter+0x1df6>
    4e80:	ab c1       	rjmp	.+854    	; 0x51d8 <Converter+0x214c>
    4e82:	c7 5b       	subi	r28, 0xB7	; 183
    4e84:	de 4f       	sbci	r29, 0xFE	; 254
    4e86:	28 81       	ld	r18, Y
    4e88:	39 81       	ldd	r19, Y+1	; 0x01
    4e8a:	c9 54       	subi	r28, 0x49	; 73
    4e8c:	d1 40       	sbci	r29, 0x01	; 1
    4e8e:	21 30       	cpi	r18, 0x01	; 1
    4e90:	31 05       	cpc	r19, r1
    4e92:	09 f0       	breq	.+2      	; 0x4e96 <Converter+0x1e0a>
    4e94:	75 c2       	rjmp	.+1258   	; 0x5380 <Converter+0x22f4>
					case 1:
						decimal_number=get_the_decimal_number();
    4e96:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <get_the_decimal_number>
    4e9a:	fe 01       	movw	r30, r28
    4e9c:	ea 5b       	subi	r30, 0xBA	; 186
    4e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4ea0:	91 83       	std	Z+1, r25	; 0x01
    4ea2:	80 83       	st	Z, r24
						LCD_clearScreen();
    4ea4:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
						decimal_number = Oct_to_dec(decimal_number);
    4ea8:	fe 01       	movw	r30, r28
    4eaa:	ea 5b       	subi	r30, 0xBA	; 186
    4eac:	fe 4f       	sbci	r31, 0xFE	; 254
    4eae:	80 81       	ld	r24, Z
    4eb0:	91 81       	ldd	r25, Z+1	; 0x01
    4eb2:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <Oct_to_dec>
    4eb6:	fe 01       	movw	r30, r28
    4eb8:	ea 5b       	subi	r30, 0xBA	; 186
    4eba:	fe 4f       	sbci	r31, 0xFE	; 254
    4ebc:	91 83       	std	Z+1, r25	; 0x01
    4ebe:	80 83       	st	Z, r24
						LCD_displayStringRowColumn(0, 0, "Dec: ");
    4ec0:	25 e6       	ldi	r18, 0x65	; 101
    4ec2:	31 e0       	ldi	r19, 0x01	; 1
    4ec4:	80 e0       	ldi	r24, 0x00	; 0
    4ec6:	60 e0       	ldi	r22, 0x00	; 0
    4ec8:	a9 01       	movw	r20, r18
    4eca:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
						LCD_intgerToString(decimal_number);
    4ece:	fe 01       	movw	r30, r28
    4ed0:	ea 5b       	subi	r30, 0xBA	; 186
    4ed2:	fe 4f       	sbci	r31, 0xFE	; 254
    4ed4:	80 81       	ld	r24, Z
    4ed6:	91 81       	ldd	r25, Z+1	; 0x01
    4ed8:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>
    4edc:	fe 01       	movw	r30, r28
    4ede:	ef 5a       	subi	r30, 0xAF	; 175
    4ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee2:	80 e0       	ldi	r24, 0x00	; 0
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	aa ef       	ldi	r26, 0xFA	; 250
    4ee8:	b3 e4       	ldi	r27, 0x43	; 67
    4eea:	80 83       	st	Z, r24
    4eec:	91 83       	std	Z+1, r25	; 0x01
    4eee:	a2 83       	std	Z+2, r26	; 0x02
    4ef0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ef2:	8e 01       	movw	r16, r28
    4ef4:	03 5b       	subi	r16, 0xB3	; 179
    4ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ef8:	fe 01       	movw	r30, r28
    4efa:	ef 5a       	subi	r30, 0xAF	; 175
    4efc:	ff 4f       	sbci	r31, 0xFF	; 255
    4efe:	60 81       	ld	r22, Z
    4f00:	71 81       	ldd	r23, Z+1	; 0x01
    4f02:	82 81       	ldd	r24, Z+2	; 0x02
    4f04:	93 81       	ldd	r25, Z+3	; 0x03
    4f06:	20 e0       	ldi	r18, 0x00	; 0
    4f08:	30 e0       	ldi	r19, 0x00	; 0
    4f0a:	4a e7       	ldi	r20, 0x7A	; 122
    4f0c:	53 e4       	ldi	r21, 0x43	; 67
    4f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f12:	dc 01       	movw	r26, r24
    4f14:	cb 01       	movw	r24, r22
    4f16:	f8 01       	movw	r30, r16
    4f18:	80 83       	st	Z, r24
    4f1a:	91 83       	std	Z+1, r25	; 0x01
    4f1c:	a2 83       	std	Z+2, r26	; 0x02
    4f1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f20:	fe 01       	movw	r30, r28
    4f22:	e3 5b       	subi	r30, 0xB3	; 179
    4f24:	ff 4f       	sbci	r31, 0xFF	; 255
    4f26:	60 81       	ld	r22, Z
    4f28:	71 81       	ldd	r23, Z+1	; 0x01
    4f2a:	82 81       	ldd	r24, Z+2	; 0x02
    4f2c:	93 81       	ldd	r25, Z+3	; 0x03
    4f2e:	20 e0       	ldi	r18, 0x00	; 0
    4f30:	30 e0       	ldi	r19, 0x00	; 0
    4f32:	40 e8       	ldi	r20, 0x80	; 128
    4f34:	5f e3       	ldi	r21, 0x3F	; 63
    4f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f3a:	88 23       	and	r24, r24
    4f3c:	44 f4       	brge	.+16     	; 0x4f4e <Converter+0x1ec2>
		__ticks = 1;
    4f3e:	fe 01       	movw	r30, r28
    4f40:	e5 5b       	subi	r30, 0xB5	; 181
    4f42:	ff 4f       	sbci	r31, 0xFF	; 255
    4f44:	81 e0       	ldi	r24, 0x01	; 1
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	91 83       	std	Z+1, r25	; 0x01
    4f4a:	80 83       	st	Z, r24
    4f4c:	64 c0       	rjmp	.+200    	; 0x5016 <Converter+0x1f8a>
	else if (__tmp > 65535)
    4f4e:	fe 01       	movw	r30, r28
    4f50:	e3 5b       	subi	r30, 0xB3	; 179
    4f52:	ff 4f       	sbci	r31, 0xFF	; 255
    4f54:	60 81       	ld	r22, Z
    4f56:	71 81       	ldd	r23, Z+1	; 0x01
    4f58:	82 81       	ldd	r24, Z+2	; 0x02
    4f5a:	93 81       	ldd	r25, Z+3	; 0x03
    4f5c:	20 e0       	ldi	r18, 0x00	; 0
    4f5e:	3f ef       	ldi	r19, 0xFF	; 255
    4f60:	4f e7       	ldi	r20, 0x7F	; 127
    4f62:	57 e4       	ldi	r21, 0x47	; 71
    4f64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f68:	18 16       	cp	r1, r24
    4f6a:	0c f0       	brlt	.+2      	; 0x4f6e <Converter+0x1ee2>
    4f6c:	43 c0       	rjmp	.+134    	; 0x4ff4 <Converter+0x1f68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f6e:	fe 01       	movw	r30, r28
    4f70:	ef 5a       	subi	r30, 0xAF	; 175
    4f72:	ff 4f       	sbci	r31, 0xFF	; 255
    4f74:	60 81       	ld	r22, Z
    4f76:	71 81       	ldd	r23, Z+1	; 0x01
    4f78:	82 81       	ldd	r24, Z+2	; 0x02
    4f7a:	93 81       	ldd	r25, Z+3	; 0x03
    4f7c:	20 e0       	ldi	r18, 0x00	; 0
    4f7e:	30 e0       	ldi	r19, 0x00	; 0
    4f80:	40 e2       	ldi	r20, 0x20	; 32
    4f82:	51 e4       	ldi	r21, 0x41	; 65
    4f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f88:	dc 01       	movw	r26, r24
    4f8a:	cb 01       	movw	r24, r22
    4f8c:	8e 01       	movw	r16, r28
    4f8e:	05 5b       	subi	r16, 0xB5	; 181
    4f90:	1f 4f       	sbci	r17, 0xFF	; 255
    4f92:	bc 01       	movw	r22, r24
    4f94:	cd 01       	movw	r24, r26
    4f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f9a:	dc 01       	movw	r26, r24
    4f9c:	cb 01       	movw	r24, r22
    4f9e:	f8 01       	movw	r30, r16
    4fa0:	91 83       	std	Z+1, r25	; 0x01
    4fa2:	80 83       	st	Z, r24
    4fa4:	1f c0       	rjmp	.+62     	; 0x4fe4 <Converter+0x1f58>
    4fa6:	fe 01       	movw	r30, r28
    4fa8:	e7 5b       	subi	r30, 0xB7	; 183
    4faa:	ff 4f       	sbci	r31, 0xFF	; 255
    4fac:	89 e1       	ldi	r24, 0x19	; 25
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	91 83       	std	Z+1, r25	; 0x01
    4fb2:	80 83       	st	Z, r24
    4fb4:	fe 01       	movw	r30, r28
    4fb6:	e7 5b       	subi	r30, 0xB7	; 183
    4fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fba:	80 81       	ld	r24, Z
    4fbc:	91 81       	ldd	r25, Z+1	; 0x01
    4fbe:	01 97       	sbiw	r24, 0x01	; 1
    4fc0:	f1 f7       	brne	.-4      	; 0x4fbe <Converter+0x1f32>
    4fc2:	fe 01       	movw	r30, r28
    4fc4:	e7 5b       	subi	r30, 0xB7	; 183
    4fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc8:	91 83       	std	Z+1, r25	; 0x01
    4fca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fcc:	de 01       	movw	r26, r28
    4fce:	a5 5b       	subi	r26, 0xB5	; 181
    4fd0:	bf 4f       	sbci	r27, 0xFF	; 255
    4fd2:	fe 01       	movw	r30, r28
    4fd4:	e5 5b       	subi	r30, 0xB5	; 181
    4fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd8:	80 81       	ld	r24, Z
    4fda:	91 81       	ldd	r25, Z+1	; 0x01
    4fdc:	01 97       	sbiw	r24, 0x01	; 1
    4fde:	11 96       	adiw	r26, 0x01	; 1
    4fe0:	9c 93       	st	X, r25
    4fe2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fe4:	fe 01       	movw	r30, r28
    4fe6:	e5 5b       	subi	r30, 0xB5	; 181
    4fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fea:	80 81       	ld	r24, Z
    4fec:	91 81       	ldd	r25, Z+1	; 0x01
    4fee:	00 97       	sbiw	r24, 0x00	; 0
    4ff0:	d1 f6       	brne	.-76     	; 0x4fa6 <Converter+0x1f1a>
    4ff2:	4f c3       	rjmp	.+1694   	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ff4:	8e 01       	movw	r16, r28
    4ff6:	05 5b       	subi	r16, 0xB5	; 181
    4ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    4ffa:	fe 01       	movw	r30, r28
    4ffc:	e3 5b       	subi	r30, 0xB3	; 179
    4ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    5000:	60 81       	ld	r22, Z
    5002:	71 81       	ldd	r23, Z+1	; 0x01
    5004:	82 81       	ldd	r24, Z+2	; 0x02
    5006:	93 81       	ldd	r25, Z+3	; 0x03
    5008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    500c:	dc 01       	movw	r26, r24
    500e:	cb 01       	movw	r24, r22
    5010:	f8 01       	movw	r30, r16
    5012:	91 83       	std	Z+1, r25	; 0x01
    5014:	80 83       	st	Z, r24
    5016:	de 01       	movw	r26, r28
    5018:	a9 5b       	subi	r26, 0xB9	; 185
    501a:	bf 4f       	sbci	r27, 0xFF	; 255
    501c:	fe 01       	movw	r30, r28
    501e:	e5 5b       	subi	r30, 0xB5	; 181
    5020:	ff 4f       	sbci	r31, 0xFF	; 255
    5022:	80 81       	ld	r24, Z
    5024:	91 81       	ldd	r25, Z+1	; 0x01
    5026:	11 96       	adiw	r26, 0x01	; 1
    5028:	9c 93       	st	X, r25
    502a:	8e 93       	st	-X, r24
    502c:	fe 01       	movw	r30, r28
    502e:	e9 5b       	subi	r30, 0xB9	; 185
    5030:	ff 4f       	sbci	r31, 0xFF	; 255
    5032:	80 81       	ld	r24, Z
    5034:	91 81       	ldd	r25, Z+1	; 0x01
    5036:	01 97       	sbiw	r24, 0x01	; 1
    5038:	f1 f7       	brne	.-4      	; 0x5036 <Converter+0x1faa>
    503a:	fe 01       	movw	r30, r28
    503c:	e9 5b       	subi	r30, 0xB9	; 185
    503e:	ff 4f       	sbci	r31, 0xFF	; 255
    5040:	91 83       	std	Z+1, r25	; 0x01
    5042:	80 83       	st	Z, r24
    5044:	26 c3       	rjmp	.+1612   	; 0x5692 <Converter+0x2606>
						_delay_ms(show_time);
						break;
					case 2:
						decimal_number=get_the_decimal_number();
    5046:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <get_the_decimal_number>
    504a:	fe 01       	movw	r30, r28
    504c:	ea 5b       	subi	r30, 0xBA	; 186
    504e:	fe 4f       	sbci	r31, 0xFE	; 254
    5050:	91 83       	std	Z+1, r25	; 0x01
    5052:	80 83       	st	Z, r24
						LCD_clearScreen();
    5054:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
						oct_to_bin(decimal_number);
    5058:	fe 01       	movw	r30, r28
    505a:	ea 5b       	subi	r30, 0xBA	; 186
    505c:	fe 4f       	sbci	r31, 0xFE	; 254
    505e:	80 81       	ld	r24, Z
    5060:	91 81       	ldd	r25, Z+1	; 0x01
    5062:	0e 94 55 2c 	call	0x58aa	; 0x58aa <oct_to_bin>
						LCD_displayStringRowColumn(0, 0, "Bin: ");
    5066:	24 e8       	ldi	r18, 0x84	; 132
    5068:	31 e0       	ldi	r19, 0x01	; 1
    506a:	80 e0       	ldi	r24, 0x00	; 0
    506c:	60 e0       	ldi	r22, 0x00	; 0
    506e:	a9 01       	movw	r20, r18
    5070:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
						for(int i =index_of_binary_num-1; i>=0;i--){
    5074:	80 91 f3 01 	lds	r24, 0x01F3
    5078:	88 2f       	mov	r24, r24
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	fe 01       	movw	r30, r28
    507e:	e9 5c       	subi	r30, 0xC9	; 201
    5080:	fe 4f       	sbci	r31, 0xFE	; 254
    5082:	01 97       	sbiw	r24, 0x01	; 1
    5084:	91 83       	std	Z+1, r25	; 0x01
    5086:	80 83       	st	Z, r24
    5088:	1a c0       	rjmp	.+52     	; 0x50be <Converter+0x2032>

							LCD_intgerToString(bin[i]);
    508a:	fe 01       	movw	r30, r28
    508c:	e9 5c       	subi	r30, 0xC9	; 201
    508e:	fe 4f       	sbci	r31, 0xFE	; 254
    5090:	80 81       	ld	r24, Z
    5092:	91 81       	ldd	r25, Z+1	; 0x01
    5094:	88 0f       	add	r24, r24
    5096:	99 1f       	adc	r25, r25
    5098:	fc 01       	movw	r30, r24
    509a:	ed 52       	subi	r30, 0x2D	; 45
    509c:	fe 4f       	sbci	r31, 0xFE	; 254
    509e:	80 81       	ld	r24, Z
    50a0:	91 81       	ldd	r25, Z+1	; 0x01
    50a2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>
					case 2:
						decimal_number=get_the_decimal_number();
						LCD_clearScreen();
						oct_to_bin(decimal_number);
						LCD_displayStringRowColumn(0, 0, "Bin: ");
						for(int i =index_of_binary_num-1; i>=0;i--){
    50a6:	de 01       	movw	r26, r28
    50a8:	a9 5c       	subi	r26, 0xC9	; 201
    50aa:	be 4f       	sbci	r27, 0xFE	; 254
    50ac:	fe 01       	movw	r30, r28
    50ae:	e9 5c       	subi	r30, 0xC9	; 201
    50b0:	fe 4f       	sbci	r31, 0xFE	; 254
    50b2:	80 81       	ld	r24, Z
    50b4:	91 81       	ldd	r25, Z+1	; 0x01
    50b6:	01 97       	sbiw	r24, 0x01	; 1
    50b8:	11 96       	adiw	r26, 0x01	; 1
    50ba:	9c 93       	st	X, r25
    50bc:	8e 93       	st	-X, r24
    50be:	fe 01       	movw	r30, r28
    50c0:	e9 5c       	subi	r30, 0xC9	; 201
    50c2:	fe 4f       	sbci	r31, 0xFE	; 254
    50c4:	80 81       	ld	r24, Z
    50c6:	91 81       	ldd	r25, Z+1	; 0x01
    50c8:	99 23       	and	r25, r25
    50ca:	fc f6       	brge	.-66     	; 0x508a <Converter+0x1ffe>
    50cc:	fe 01       	movw	r30, r28
    50ce:	ed 5b       	subi	r30, 0xBD	; 189
    50d0:	ff 4f       	sbci	r31, 0xFF	; 255
    50d2:	80 e0       	ldi	r24, 0x00	; 0
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	aa ef       	ldi	r26, 0xFA	; 250
    50d8:	b3 e4       	ldi	r27, 0x43	; 67
    50da:	80 83       	st	Z, r24
    50dc:	91 83       	std	Z+1, r25	; 0x01
    50de:	a2 83       	std	Z+2, r26	; 0x02
    50e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50e2:	8e 01       	movw	r16, r28
    50e4:	01 5c       	subi	r16, 0xC1	; 193
    50e6:	1f 4f       	sbci	r17, 0xFF	; 255
    50e8:	fe 01       	movw	r30, r28
    50ea:	ed 5b       	subi	r30, 0xBD	; 189
    50ec:	ff 4f       	sbci	r31, 0xFF	; 255
    50ee:	60 81       	ld	r22, Z
    50f0:	71 81       	ldd	r23, Z+1	; 0x01
    50f2:	82 81       	ldd	r24, Z+2	; 0x02
    50f4:	93 81       	ldd	r25, Z+3	; 0x03
    50f6:	20 e0       	ldi	r18, 0x00	; 0
    50f8:	30 e0       	ldi	r19, 0x00	; 0
    50fa:	4a e7       	ldi	r20, 0x7A	; 122
    50fc:	53 e4       	ldi	r21, 0x43	; 67
    50fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5102:	dc 01       	movw	r26, r24
    5104:	cb 01       	movw	r24, r22
    5106:	f8 01       	movw	r30, r16
    5108:	80 83       	st	Z, r24
    510a:	91 83       	std	Z+1, r25	; 0x01
    510c:	a2 83       	std	Z+2, r26	; 0x02
    510e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5110:	fe 01       	movw	r30, r28
    5112:	ff 96       	adiw	r30, 0x3f	; 63
    5114:	60 81       	ld	r22, Z
    5116:	71 81       	ldd	r23, Z+1	; 0x01
    5118:	82 81       	ldd	r24, Z+2	; 0x02
    511a:	93 81       	ldd	r25, Z+3	; 0x03
    511c:	20 e0       	ldi	r18, 0x00	; 0
    511e:	30 e0       	ldi	r19, 0x00	; 0
    5120:	40 e8       	ldi	r20, 0x80	; 128
    5122:	5f e3       	ldi	r21, 0x3F	; 63
    5124:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5128:	88 23       	and	r24, r24
    512a:	2c f4       	brge	.+10     	; 0x5136 <Converter+0x20aa>
		__ticks = 1;
    512c:	81 e0       	ldi	r24, 0x01	; 1
    512e:	90 e0       	ldi	r25, 0x00	; 0
    5130:	9e af       	std	Y+62, r25	; 0x3e
    5132:	8d af       	std	Y+61, r24	; 0x3d
    5134:	46 c0       	rjmp	.+140    	; 0x51c2 <Converter+0x2136>
	else if (__tmp > 65535)
    5136:	fe 01       	movw	r30, r28
    5138:	ff 96       	adiw	r30, 0x3f	; 63
    513a:	60 81       	ld	r22, Z
    513c:	71 81       	ldd	r23, Z+1	; 0x01
    513e:	82 81       	ldd	r24, Z+2	; 0x02
    5140:	93 81       	ldd	r25, Z+3	; 0x03
    5142:	20 e0       	ldi	r18, 0x00	; 0
    5144:	3f ef       	ldi	r19, 0xFF	; 255
    5146:	4f e7       	ldi	r20, 0x7F	; 127
    5148:	57 e4       	ldi	r21, 0x47	; 71
    514a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    514e:	18 16       	cp	r1, r24
    5150:	64 f5       	brge	.+88     	; 0x51aa <Converter+0x211e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5152:	fe 01       	movw	r30, r28
    5154:	ed 5b       	subi	r30, 0xBD	; 189
    5156:	ff 4f       	sbci	r31, 0xFF	; 255
    5158:	60 81       	ld	r22, Z
    515a:	71 81       	ldd	r23, Z+1	; 0x01
    515c:	82 81       	ldd	r24, Z+2	; 0x02
    515e:	93 81       	ldd	r25, Z+3	; 0x03
    5160:	20 e0       	ldi	r18, 0x00	; 0
    5162:	30 e0       	ldi	r19, 0x00	; 0
    5164:	40 e2       	ldi	r20, 0x20	; 32
    5166:	51 e4       	ldi	r21, 0x41	; 65
    5168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    516c:	dc 01       	movw	r26, r24
    516e:	cb 01       	movw	r24, r22
    5170:	bc 01       	movw	r22, r24
    5172:	cd 01       	movw	r24, r26
    5174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5178:	dc 01       	movw	r26, r24
    517a:	cb 01       	movw	r24, r22
    517c:	9e af       	std	Y+62, r25	; 0x3e
    517e:	8d af       	std	Y+61, r24	; 0x3d
    5180:	0f c0       	rjmp	.+30     	; 0x51a0 <Converter+0x2114>
    5182:	89 e1       	ldi	r24, 0x19	; 25
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	9c af       	std	Y+60, r25	; 0x3c
    5188:	8b af       	std	Y+59, r24	; 0x3b
    518a:	8b ad       	ldd	r24, Y+59	; 0x3b
    518c:	9c ad       	ldd	r25, Y+60	; 0x3c
    518e:	01 97       	sbiw	r24, 0x01	; 1
    5190:	f1 f7       	brne	.-4      	; 0x518e <Converter+0x2102>
    5192:	9c af       	std	Y+60, r25	; 0x3c
    5194:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5196:	8d ad       	ldd	r24, Y+61	; 0x3d
    5198:	9e ad       	ldd	r25, Y+62	; 0x3e
    519a:	01 97       	sbiw	r24, 0x01	; 1
    519c:	9e af       	std	Y+62, r25	; 0x3e
    519e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    51a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    51a4:	00 97       	sbiw	r24, 0x00	; 0
    51a6:	69 f7       	brne	.-38     	; 0x5182 <Converter+0x20f6>
    51a8:	74 c2       	rjmp	.+1256   	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51aa:	fe 01       	movw	r30, r28
    51ac:	ff 96       	adiw	r30, 0x3f	; 63
    51ae:	60 81       	ld	r22, Z
    51b0:	71 81       	ldd	r23, Z+1	; 0x01
    51b2:	82 81       	ldd	r24, Z+2	; 0x02
    51b4:	93 81       	ldd	r25, Z+3	; 0x03
    51b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51ba:	dc 01       	movw	r26, r24
    51bc:	cb 01       	movw	r24, r22
    51be:	9e af       	std	Y+62, r25	; 0x3e
    51c0:	8d af       	std	Y+61, r24	; 0x3d
    51c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    51c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    51c6:	9a af       	std	Y+58, r25	; 0x3a
    51c8:	89 af       	std	Y+57, r24	; 0x39
    51ca:	89 ad       	ldd	r24, Y+57	; 0x39
    51cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    51ce:	01 97       	sbiw	r24, 0x01	; 1
    51d0:	f1 f7       	brne	.-4      	; 0x51ce <Converter+0x2142>
    51d2:	9a af       	std	Y+58, r25	; 0x3a
    51d4:	89 af       	std	Y+57, r24	; 0x39
    51d6:	5d c2       	rjmp	.+1210   	; 0x5692 <Converter+0x2606>
							LCD_intgerToString(bin[i]);
						}
						_delay_ms(show_time);
						break;
					case 3:
						decimal_number=get_the_decimal_number();
    51d8:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <get_the_decimal_number>
    51dc:	fe 01       	movw	r30, r28
    51de:	ea 5b       	subi	r30, 0xBA	; 186
    51e0:	fe 4f       	sbci	r31, 0xFE	; 254
    51e2:	91 83       	std	Z+1, r25	; 0x01
    51e4:	80 83       	st	Z, r24
						LCD_clearScreen();
    51e6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
						oct_to_hex(decimal_number);
    51ea:	fe 01       	movw	r30, r28
    51ec:	ea 5b       	subi	r30, 0xBA	; 186
    51ee:	fe 4f       	sbci	r31, 0xFE	; 254
    51f0:	80 81       	ld	r24, Z
    51f2:	91 81       	ldd	r25, Z+1	; 0x01
    51f4:	0e 94 3a 2c 	call	0x5874	; 0x5874 <oct_to_hex>
						LCD_displayStringRowColumn(0, 0, "Hex: ");
    51f8:	2a e8       	ldi	r18, 0x8A	; 138
    51fa:	31 e0       	ldi	r19, 0x01	; 1
    51fc:	80 e0       	ldi	r24, 0x00	; 0
    51fe:	60 e0       	ldi	r22, 0x00	; 0
    5200:	a9 01       	movw	r20, r18
    5202:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>

						for(int i =index_of_hex_number-1; i>=0;i--){
    5206:	80 91 b2 01 	lds	r24, 0x01B2
    520a:	88 2f       	mov	r24, r24
    520c:	90 e0       	ldi	r25, 0x00	; 0
    520e:	fe 01       	movw	r30, r28
    5210:	eb 5c       	subi	r30, 0xCB	; 203
    5212:	fe 4f       	sbci	r31, 0xFE	; 254
    5214:	01 97       	sbiw	r24, 0x01	; 1
    5216:	91 83       	std	Z+1, r25	; 0x01
    5218:	80 83       	st	Z, r24
    521a:	38 c0       	rjmp	.+112    	; 0x528c <Converter+0x2200>
							if(hex[i] >= 0 && hex[i] <= 9){
    521c:	fe 01       	movw	r30, r28
    521e:	eb 5c       	subi	r30, 0xCB	; 203
    5220:	fe 4f       	sbci	r31, 0xFE	; 254
    5222:	80 81       	ld	r24, Z
    5224:	91 81       	ldd	r25, Z+1	; 0x01
    5226:	88 0f       	add	r24, r24
    5228:	99 1f       	adc	r25, r25
    522a:	fc 01       	movw	r30, r24
    522c:	ed 54       	subi	r30, 0x4D	; 77
    522e:	fe 4f       	sbci	r31, 0xFE	; 254
    5230:	80 81       	ld	r24, Z
    5232:	91 81       	ldd	r25, Z+1	; 0x01
    5234:	8a 30       	cpi	r24, 0x0A	; 10
    5236:	91 05       	cpc	r25, r1
    5238:	78 f4       	brcc	.+30     	; 0x5258 <Converter+0x21cc>

								LCD_intgerToString(hex[i]);
    523a:	fe 01       	movw	r30, r28
    523c:	eb 5c       	subi	r30, 0xCB	; 203
    523e:	fe 4f       	sbci	r31, 0xFE	; 254
    5240:	80 81       	ld	r24, Z
    5242:	91 81       	ldd	r25, Z+1	; 0x01
    5244:	88 0f       	add	r24, r24
    5246:	99 1f       	adc	r25, r25
    5248:	fc 01       	movw	r30, r24
    524a:	ed 54       	subi	r30, 0x4D	; 77
    524c:	fe 4f       	sbci	r31, 0xFE	; 254
    524e:	80 81       	ld	r24, Z
    5250:	91 81       	ldd	r25, Z+1	; 0x01
    5252:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>
    5256:	0e c0       	rjmp	.+28     	; 0x5274 <Converter+0x21e8>
							}
							else{
								LCD_displayCharacter(hex[i]);
    5258:	fe 01       	movw	r30, r28
    525a:	eb 5c       	subi	r30, 0xCB	; 203
    525c:	fe 4f       	sbci	r31, 0xFE	; 254
    525e:	80 81       	ld	r24, Z
    5260:	91 81       	ldd	r25, Z+1	; 0x01
    5262:	88 0f       	add	r24, r24
    5264:	99 1f       	adc	r25, r25
    5266:	fc 01       	movw	r30, r24
    5268:	ed 54       	subi	r30, 0x4D	; 77
    526a:	fe 4f       	sbci	r31, 0xFE	; 254
    526c:	80 81       	ld	r24, Z
    526e:	91 81       	ldd	r25, Z+1	; 0x01
    5270:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <LCD_displayCharacter>
						decimal_number=get_the_decimal_number();
						LCD_clearScreen();
						oct_to_hex(decimal_number);
						LCD_displayStringRowColumn(0, 0, "Hex: ");

						for(int i =index_of_hex_number-1; i>=0;i--){
    5274:	de 01       	movw	r26, r28
    5276:	ab 5c       	subi	r26, 0xCB	; 203
    5278:	be 4f       	sbci	r27, 0xFE	; 254
    527a:	fe 01       	movw	r30, r28
    527c:	eb 5c       	subi	r30, 0xCB	; 203
    527e:	fe 4f       	sbci	r31, 0xFE	; 254
    5280:	80 81       	ld	r24, Z
    5282:	91 81       	ldd	r25, Z+1	; 0x01
    5284:	01 97       	sbiw	r24, 0x01	; 1
    5286:	11 96       	adiw	r26, 0x01	; 1
    5288:	9c 93       	st	X, r25
    528a:	8e 93       	st	-X, r24
    528c:	fe 01       	movw	r30, r28
    528e:	eb 5c       	subi	r30, 0xCB	; 203
    5290:	fe 4f       	sbci	r31, 0xFE	; 254
    5292:	80 81       	ld	r24, Z
    5294:	91 81       	ldd	r25, Z+1	; 0x01
    5296:	99 23       	and	r25, r25
    5298:	0c f6       	brge	.-126    	; 0x521c <Converter+0x2190>
    529a:	80 e0       	ldi	r24, 0x00	; 0
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	aa ef       	ldi	r26, 0xFA	; 250
    52a0:	b3 e4       	ldi	r27, 0x43	; 67
    52a2:	8d ab       	std	Y+53, r24	; 0x35
    52a4:	9e ab       	std	Y+54, r25	; 0x36
    52a6:	af ab       	std	Y+55, r26	; 0x37
    52a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52aa:	6d a9       	ldd	r22, Y+53	; 0x35
    52ac:	7e a9       	ldd	r23, Y+54	; 0x36
    52ae:	8f a9       	ldd	r24, Y+55	; 0x37
    52b0:	98 ad       	ldd	r25, Y+56	; 0x38
    52b2:	20 e0       	ldi	r18, 0x00	; 0
    52b4:	30 e0       	ldi	r19, 0x00	; 0
    52b6:	4a e7       	ldi	r20, 0x7A	; 122
    52b8:	53 e4       	ldi	r21, 0x43	; 67
    52ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52be:	dc 01       	movw	r26, r24
    52c0:	cb 01       	movw	r24, r22
    52c2:	89 ab       	std	Y+49, r24	; 0x31
    52c4:	9a ab       	std	Y+50, r25	; 0x32
    52c6:	ab ab       	std	Y+51, r26	; 0x33
    52c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    52ca:	69 a9       	ldd	r22, Y+49	; 0x31
    52cc:	7a a9       	ldd	r23, Y+50	; 0x32
    52ce:	8b a9       	ldd	r24, Y+51	; 0x33
    52d0:	9c a9       	ldd	r25, Y+52	; 0x34
    52d2:	20 e0       	ldi	r18, 0x00	; 0
    52d4:	30 e0       	ldi	r19, 0x00	; 0
    52d6:	40 e8       	ldi	r20, 0x80	; 128
    52d8:	5f e3       	ldi	r21, 0x3F	; 63
    52da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    52de:	88 23       	and	r24, r24
    52e0:	2c f4       	brge	.+10     	; 0x52ec <Converter+0x2260>
		__ticks = 1;
    52e2:	81 e0       	ldi	r24, 0x01	; 1
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	98 ab       	std	Y+48, r25	; 0x30
    52e8:	8f a7       	std	Y+47, r24	; 0x2f
    52ea:	3f c0       	rjmp	.+126    	; 0x536a <Converter+0x22de>
	else if (__tmp > 65535)
    52ec:	69 a9       	ldd	r22, Y+49	; 0x31
    52ee:	7a a9       	ldd	r23, Y+50	; 0x32
    52f0:	8b a9       	ldd	r24, Y+51	; 0x33
    52f2:	9c a9       	ldd	r25, Y+52	; 0x34
    52f4:	20 e0       	ldi	r18, 0x00	; 0
    52f6:	3f ef       	ldi	r19, 0xFF	; 255
    52f8:	4f e7       	ldi	r20, 0x7F	; 127
    52fa:	57 e4       	ldi	r21, 0x47	; 71
    52fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5300:	18 16       	cp	r1, r24
    5302:	4c f5       	brge	.+82     	; 0x5356 <Converter+0x22ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5304:	6d a9       	ldd	r22, Y+53	; 0x35
    5306:	7e a9       	ldd	r23, Y+54	; 0x36
    5308:	8f a9       	ldd	r24, Y+55	; 0x37
    530a:	98 ad       	ldd	r25, Y+56	; 0x38
    530c:	20 e0       	ldi	r18, 0x00	; 0
    530e:	30 e0       	ldi	r19, 0x00	; 0
    5310:	40 e2       	ldi	r20, 0x20	; 32
    5312:	51 e4       	ldi	r21, 0x41	; 65
    5314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5318:	dc 01       	movw	r26, r24
    531a:	cb 01       	movw	r24, r22
    531c:	bc 01       	movw	r22, r24
    531e:	cd 01       	movw	r24, r26
    5320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5324:	dc 01       	movw	r26, r24
    5326:	cb 01       	movw	r24, r22
    5328:	98 ab       	std	Y+48, r25	; 0x30
    532a:	8f a7       	std	Y+47, r24	; 0x2f
    532c:	0f c0       	rjmp	.+30     	; 0x534c <Converter+0x22c0>
    532e:	89 e1       	ldi	r24, 0x19	; 25
    5330:	90 e0       	ldi	r25, 0x00	; 0
    5332:	9e a7       	std	Y+46, r25	; 0x2e
    5334:	8d a7       	std	Y+45, r24	; 0x2d
    5336:	8d a5       	ldd	r24, Y+45	; 0x2d
    5338:	9e a5       	ldd	r25, Y+46	; 0x2e
    533a:	01 97       	sbiw	r24, 0x01	; 1
    533c:	f1 f7       	brne	.-4      	; 0x533a <Converter+0x22ae>
    533e:	9e a7       	std	Y+46, r25	; 0x2e
    5340:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5342:	8f a5       	ldd	r24, Y+47	; 0x2f
    5344:	98 a9       	ldd	r25, Y+48	; 0x30
    5346:	01 97       	sbiw	r24, 0x01	; 1
    5348:	98 ab       	std	Y+48, r25	; 0x30
    534a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    534c:	8f a5       	ldd	r24, Y+47	; 0x2f
    534e:	98 a9       	ldd	r25, Y+48	; 0x30
    5350:	00 97       	sbiw	r24, 0x00	; 0
    5352:	69 f7       	brne	.-38     	; 0x532e <Converter+0x22a2>
    5354:	9e c1       	rjmp	.+828    	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5356:	69 a9       	ldd	r22, Y+49	; 0x31
    5358:	7a a9       	ldd	r23, Y+50	; 0x32
    535a:	8b a9       	ldd	r24, Y+51	; 0x33
    535c:	9c a9       	ldd	r25, Y+52	; 0x34
    535e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5362:	dc 01       	movw	r26, r24
    5364:	cb 01       	movw	r24, r22
    5366:	98 ab       	std	Y+48, r25	; 0x30
    5368:	8f a7       	std	Y+47, r24	; 0x2f
    536a:	8f a5       	ldd	r24, Y+47	; 0x2f
    536c:	98 a9       	ldd	r25, Y+48	; 0x30
    536e:	9c a7       	std	Y+44, r25	; 0x2c
    5370:	8b a7       	std	Y+43, r24	; 0x2b
    5372:	8b a5       	ldd	r24, Y+43	; 0x2b
    5374:	9c a5       	ldd	r25, Y+44	; 0x2c
    5376:	01 97       	sbiw	r24, 0x01	; 1
    5378:	f1 f7       	brne	.-4      	; 0x5376 <Converter+0x22ea>
    537a:	9c a7       	std	Y+44, r25	; 0x2c
    537c:	8b a7       	std	Y+43, r24	; 0x2b
    537e:	89 c1       	rjmp	.+786    	; 0x5692 <Converter+0x2606>
						}

						_delay_ms(show_time);
						break;
					default:
						LCD_clearScreen();
    5380:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "plz enter valid");
    5384:	2b e1       	ldi	r18, 0x1B	; 27
    5386:	31 e0       	ldi	r19, 0x01	; 1
    5388:	80 e0       	ldi	r24, 0x00	; 0
    538a:	60 e0       	ldi	r22, 0x00	; 0
    538c:	a9 01       	movw	r20, r18
    538e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 0, "option.");
    5392:	2b e2       	ldi	r18, 0x2B	; 43
    5394:	31 e0       	ldi	r19, 0x01	; 1
    5396:	81 e0       	ldi	r24, 0x01	; 1
    5398:	60 e0       	ldi	r22, 0x00	; 0
    539a:	a9 01       	movw	r20, r18
    539c:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
    53a0:	80 e0       	ldi	r24, 0x00	; 0
    53a2:	90 e0       	ldi	r25, 0x00	; 0
    53a4:	af ea       	ldi	r26, 0xAF	; 175
    53a6:	b3 e4       	ldi	r27, 0x43	; 67
    53a8:	8f a3       	std	Y+39, r24	; 0x27
    53aa:	98 a7       	std	Y+40, r25	; 0x28
    53ac:	a9 a7       	std	Y+41, r26	; 0x29
    53ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53b0:	6f a1       	ldd	r22, Y+39	; 0x27
    53b2:	78 a5       	ldd	r23, Y+40	; 0x28
    53b4:	89 a5       	ldd	r24, Y+41	; 0x29
    53b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    53b8:	20 e0       	ldi	r18, 0x00	; 0
    53ba:	30 e0       	ldi	r19, 0x00	; 0
    53bc:	4a e7       	ldi	r20, 0x7A	; 122
    53be:	53 e4       	ldi	r21, 0x43	; 67
    53c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53c4:	dc 01       	movw	r26, r24
    53c6:	cb 01       	movw	r24, r22
    53c8:	8b a3       	std	Y+35, r24	; 0x23
    53ca:	9c a3       	std	Y+36, r25	; 0x24
    53cc:	ad a3       	std	Y+37, r26	; 0x25
    53ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    53d0:	6b a1       	ldd	r22, Y+35	; 0x23
    53d2:	7c a1       	ldd	r23, Y+36	; 0x24
    53d4:	8d a1       	ldd	r24, Y+37	; 0x25
    53d6:	9e a1       	ldd	r25, Y+38	; 0x26
    53d8:	20 e0       	ldi	r18, 0x00	; 0
    53da:	30 e0       	ldi	r19, 0x00	; 0
    53dc:	40 e8       	ldi	r20, 0x80	; 128
    53de:	5f e3       	ldi	r21, 0x3F	; 63
    53e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    53e4:	88 23       	and	r24, r24
    53e6:	2c f4       	brge	.+10     	; 0x53f2 <Converter+0x2366>
		__ticks = 1;
    53e8:	81 e0       	ldi	r24, 0x01	; 1
    53ea:	90 e0       	ldi	r25, 0x00	; 0
    53ec:	9a a3       	std	Y+34, r25	; 0x22
    53ee:	89 a3       	std	Y+33, r24	; 0x21
    53f0:	3f c0       	rjmp	.+126    	; 0x5470 <Converter+0x23e4>
	else if (__tmp > 65535)
    53f2:	6b a1       	ldd	r22, Y+35	; 0x23
    53f4:	7c a1       	ldd	r23, Y+36	; 0x24
    53f6:	8d a1       	ldd	r24, Y+37	; 0x25
    53f8:	9e a1       	ldd	r25, Y+38	; 0x26
    53fa:	20 e0       	ldi	r18, 0x00	; 0
    53fc:	3f ef       	ldi	r19, 0xFF	; 255
    53fe:	4f e7       	ldi	r20, 0x7F	; 127
    5400:	57 e4       	ldi	r21, 0x47	; 71
    5402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5406:	18 16       	cp	r1, r24
    5408:	4c f5       	brge	.+82     	; 0x545c <Converter+0x23d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    540a:	6f a1       	ldd	r22, Y+39	; 0x27
    540c:	78 a5       	ldd	r23, Y+40	; 0x28
    540e:	89 a5       	ldd	r24, Y+41	; 0x29
    5410:	9a a5       	ldd	r25, Y+42	; 0x2a
    5412:	20 e0       	ldi	r18, 0x00	; 0
    5414:	30 e0       	ldi	r19, 0x00	; 0
    5416:	40 e2       	ldi	r20, 0x20	; 32
    5418:	51 e4       	ldi	r21, 0x41	; 65
    541a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    541e:	dc 01       	movw	r26, r24
    5420:	cb 01       	movw	r24, r22
    5422:	bc 01       	movw	r22, r24
    5424:	cd 01       	movw	r24, r26
    5426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    542a:	dc 01       	movw	r26, r24
    542c:	cb 01       	movw	r24, r22
    542e:	9a a3       	std	Y+34, r25	; 0x22
    5430:	89 a3       	std	Y+33, r24	; 0x21
    5432:	0f c0       	rjmp	.+30     	; 0x5452 <Converter+0x23c6>
    5434:	89 e1       	ldi	r24, 0x19	; 25
    5436:	90 e0       	ldi	r25, 0x00	; 0
    5438:	98 a3       	std	Y+32, r25	; 0x20
    543a:	8f 8f       	std	Y+31, r24	; 0x1f
    543c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    543e:	98 a1       	ldd	r25, Y+32	; 0x20
    5440:	01 97       	sbiw	r24, 0x01	; 1
    5442:	f1 f7       	brne	.-4      	; 0x5440 <Converter+0x23b4>
    5444:	98 a3       	std	Y+32, r25	; 0x20
    5446:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5448:	89 a1       	ldd	r24, Y+33	; 0x21
    544a:	9a a1       	ldd	r25, Y+34	; 0x22
    544c:	01 97       	sbiw	r24, 0x01	; 1
    544e:	9a a3       	std	Y+34, r25	; 0x22
    5450:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5452:	89 a1       	ldd	r24, Y+33	; 0x21
    5454:	9a a1       	ldd	r25, Y+34	; 0x22
    5456:	00 97       	sbiw	r24, 0x00	; 0
    5458:	69 f7       	brne	.-38     	; 0x5434 <Converter+0x23a8>
    545a:	1b c1       	rjmp	.+566    	; 0x5692 <Converter+0x2606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    545c:	6b a1       	ldd	r22, Y+35	; 0x23
    545e:	7c a1       	ldd	r23, Y+36	; 0x24
    5460:	8d a1       	ldd	r24, Y+37	; 0x25
    5462:	9e a1       	ldd	r25, Y+38	; 0x26
    5464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5468:	dc 01       	movw	r26, r24
    546a:	cb 01       	movw	r24, r22
    546c:	9a a3       	std	Y+34, r25	; 0x22
    546e:	89 a3       	std	Y+33, r24	; 0x21
    5470:	89 a1       	ldd	r24, Y+33	; 0x21
    5472:	9a a1       	ldd	r25, Y+34	; 0x22
    5474:	9e 8f       	std	Y+30, r25	; 0x1e
    5476:	8d 8f       	std	Y+29, r24	; 0x1d
    5478:	8d 8d       	ldd	r24, Y+29	; 0x1d
    547a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    547c:	01 97       	sbiw	r24, 0x01	; 1
    547e:	f1 f7       	brne	.-4      	; 0x547c <Converter+0x23f0>
    5480:	9e 8f       	std	Y+30, r25	; 0x1e
    5482:	8d 8f       	std	Y+29, r24	; 0x1d
    5484:	06 c1       	rjmp	.+524    	; 0x5692 <Converter+0x2606>
					}


					break;
					default:
						LCD_clearScreen();
    5486:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "plz enter valid");
    548a:	2b e1       	ldi	r18, 0x1B	; 27
    548c:	31 e0       	ldi	r19, 0x01	; 1
    548e:	80 e0       	ldi	r24, 0x00	; 0
    5490:	60 e0       	ldi	r22, 0x00	; 0
    5492:	a9 01       	movw	r20, r18
    5494:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 0, "option.");
    5498:	2b e2       	ldi	r18, 0x2B	; 43
    549a:	31 e0       	ldi	r19, 0x01	; 1
    549c:	81 e0       	ldi	r24, 0x01	; 1
    549e:	60 e0       	ldi	r22, 0x00	; 0
    54a0:	a9 01       	movw	r20, r18
    54a2:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
    54a6:	80 e0       	ldi	r24, 0x00	; 0
    54a8:	90 e0       	ldi	r25, 0x00	; 0
    54aa:	a8 ec       	ldi	r26, 0xC8	; 200
    54ac:	b3 e4       	ldi	r27, 0x43	; 67
    54ae:	89 8f       	std	Y+25, r24	; 0x19
    54b0:	9a 8f       	std	Y+26, r25	; 0x1a
    54b2:	ab 8f       	std	Y+27, r26	; 0x1b
    54b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54b6:	69 8d       	ldd	r22, Y+25	; 0x19
    54b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54be:	20 e0       	ldi	r18, 0x00	; 0
    54c0:	30 e0       	ldi	r19, 0x00	; 0
    54c2:	4a e7       	ldi	r20, 0x7A	; 122
    54c4:	53 e4       	ldi	r21, 0x43	; 67
    54c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54ca:	dc 01       	movw	r26, r24
    54cc:	cb 01       	movw	r24, r22
    54ce:	8d 8b       	std	Y+21, r24	; 0x15
    54d0:	9e 8b       	std	Y+22, r25	; 0x16
    54d2:	af 8b       	std	Y+23, r26	; 0x17
    54d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    54d6:	6d 89       	ldd	r22, Y+21	; 0x15
    54d8:	7e 89       	ldd	r23, Y+22	; 0x16
    54da:	8f 89       	ldd	r24, Y+23	; 0x17
    54dc:	98 8d       	ldd	r25, Y+24	; 0x18
    54de:	20 e0       	ldi	r18, 0x00	; 0
    54e0:	30 e0       	ldi	r19, 0x00	; 0
    54e2:	40 e8       	ldi	r20, 0x80	; 128
    54e4:	5f e3       	ldi	r21, 0x3F	; 63
    54e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    54ea:	88 23       	and	r24, r24
    54ec:	2c f4       	brge	.+10     	; 0x54f8 <Converter+0x246c>
		__ticks = 1;
    54ee:	81 e0       	ldi	r24, 0x01	; 1
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	9c 8b       	std	Y+20, r25	; 0x14
    54f4:	8b 8b       	std	Y+19, r24	; 0x13
    54f6:	3f c0       	rjmp	.+126    	; 0x5576 <Converter+0x24ea>
	else if (__tmp > 65535)
    54f8:	6d 89       	ldd	r22, Y+21	; 0x15
    54fa:	7e 89       	ldd	r23, Y+22	; 0x16
    54fc:	8f 89       	ldd	r24, Y+23	; 0x17
    54fe:	98 8d       	ldd	r25, Y+24	; 0x18
    5500:	20 e0       	ldi	r18, 0x00	; 0
    5502:	3f ef       	ldi	r19, 0xFF	; 255
    5504:	4f e7       	ldi	r20, 0x7F	; 127
    5506:	57 e4       	ldi	r21, 0x47	; 71
    5508:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    550c:	18 16       	cp	r1, r24
    550e:	4c f5       	brge	.+82     	; 0x5562 <Converter+0x24d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5510:	69 8d       	ldd	r22, Y+25	; 0x19
    5512:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5514:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5516:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5518:	20 e0       	ldi	r18, 0x00	; 0
    551a:	30 e0       	ldi	r19, 0x00	; 0
    551c:	40 e2       	ldi	r20, 0x20	; 32
    551e:	51 e4       	ldi	r21, 0x41	; 65
    5520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5524:	dc 01       	movw	r26, r24
    5526:	cb 01       	movw	r24, r22
    5528:	bc 01       	movw	r22, r24
    552a:	cd 01       	movw	r24, r26
    552c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5530:	dc 01       	movw	r26, r24
    5532:	cb 01       	movw	r24, r22
    5534:	9c 8b       	std	Y+20, r25	; 0x14
    5536:	8b 8b       	std	Y+19, r24	; 0x13
    5538:	0f c0       	rjmp	.+30     	; 0x5558 <Converter+0x24cc>
    553a:	89 e1       	ldi	r24, 0x19	; 25
    553c:	90 e0       	ldi	r25, 0x00	; 0
    553e:	9a 8b       	std	Y+18, r25	; 0x12
    5540:	89 8b       	std	Y+17, r24	; 0x11
    5542:	89 89       	ldd	r24, Y+17	; 0x11
    5544:	9a 89       	ldd	r25, Y+18	; 0x12
    5546:	01 97       	sbiw	r24, 0x01	; 1
    5548:	f1 f7       	brne	.-4      	; 0x5546 <Converter+0x24ba>
    554a:	9a 8b       	std	Y+18, r25	; 0x12
    554c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    554e:	8b 89       	ldd	r24, Y+19	; 0x13
    5550:	9c 89       	ldd	r25, Y+20	; 0x14
    5552:	01 97       	sbiw	r24, 0x01	; 1
    5554:	9c 8b       	std	Y+20, r25	; 0x14
    5556:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5558:	8b 89       	ldd	r24, Y+19	; 0x13
    555a:	9c 89       	ldd	r25, Y+20	; 0x14
    555c:	00 97       	sbiw	r24, 0x00	; 0
    555e:	69 f7       	brne	.-38     	; 0x553a <Converter+0x24ae>
    5560:	14 c0       	rjmp	.+40     	; 0x558a <Converter+0x24fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5562:	6d 89       	ldd	r22, Y+21	; 0x15
    5564:	7e 89       	ldd	r23, Y+22	; 0x16
    5566:	8f 89       	ldd	r24, Y+23	; 0x17
    5568:	98 8d       	ldd	r25, Y+24	; 0x18
    556a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    556e:	dc 01       	movw	r26, r24
    5570:	cb 01       	movw	r24, r22
    5572:	9c 8b       	std	Y+20, r25	; 0x14
    5574:	8b 8b       	std	Y+19, r24	; 0x13
    5576:	8b 89       	ldd	r24, Y+19	; 0x13
    5578:	9c 89       	ldd	r25, Y+20	; 0x14
    557a:	98 8b       	std	Y+16, r25	; 0x10
    557c:	8f 87       	std	Y+15, r24	; 0x0f
    557e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5580:	98 89       	ldd	r25, Y+16	; 0x10
    5582:	01 97       	sbiw	r24, 0x01	; 1
    5584:	f1 f7       	brne	.-4      	; 0x5582 <Converter+0x24f6>
    5586:	98 8b       	std	Y+16, r25	; 0x10
    5588:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(400);
						LCD_clearScreen();
    558a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "back to Main");
    558e:	20 e9       	ldi	r18, 0x90	; 144
    5590:	31 e0       	ldi	r19, 0x01	; 1
    5592:	80 e0       	ldi	r24, 0x00	; 0
    5594:	60 e0       	ldi	r22, 0x00	; 0
    5596:	a9 01       	movw	r20, r18
    5598:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 0, "Menu...");
    559c:	2d e9       	ldi	r18, 0x9D	; 157
    559e:	31 e0       	ldi	r19, 0x01	; 1
    55a0:	81 e0       	ldi	r24, 0x01	; 1
    55a2:	60 e0       	ldi	r22, 0x00	; 0
    55a4:	a9 01       	movw	r20, r18
    55a6:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
    55aa:	80 e0       	ldi	r24, 0x00	; 0
    55ac:	90 e0       	ldi	r25, 0x00	; 0
    55ae:	a8 ec       	ldi	r26, 0xC8	; 200
    55b0:	b3 e4       	ldi	r27, 0x43	; 67
    55b2:	8b 87       	std	Y+11, r24	; 0x0b
    55b4:	9c 87       	std	Y+12, r25	; 0x0c
    55b6:	ad 87       	std	Y+13, r26	; 0x0d
    55b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    55bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    55be:	8d 85       	ldd	r24, Y+13	; 0x0d
    55c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    55c2:	20 e0       	ldi	r18, 0x00	; 0
    55c4:	30 e0       	ldi	r19, 0x00	; 0
    55c6:	4a e7       	ldi	r20, 0x7A	; 122
    55c8:	53 e4       	ldi	r21, 0x43	; 67
    55ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55ce:	dc 01       	movw	r26, r24
    55d0:	cb 01       	movw	r24, r22
    55d2:	8f 83       	std	Y+7, r24	; 0x07
    55d4:	98 87       	std	Y+8, r25	; 0x08
    55d6:	a9 87       	std	Y+9, r26	; 0x09
    55d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    55da:	6f 81       	ldd	r22, Y+7	; 0x07
    55dc:	78 85       	ldd	r23, Y+8	; 0x08
    55de:	89 85       	ldd	r24, Y+9	; 0x09
    55e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    55e2:	20 e0       	ldi	r18, 0x00	; 0
    55e4:	30 e0       	ldi	r19, 0x00	; 0
    55e6:	40 e8       	ldi	r20, 0x80	; 128
    55e8:	5f e3       	ldi	r21, 0x3F	; 63
    55ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55ee:	88 23       	and	r24, r24
    55f0:	2c f4       	brge	.+10     	; 0x55fc <Converter+0x2570>
		__ticks = 1;
    55f2:	81 e0       	ldi	r24, 0x01	; 1
    55f4:	90 e0       	ldi	r25, 0x00	; 0
    55f6:	9e 83       	std	Y+6, r25	; 0x06
    55f8:	8d 83       	std	Y+5, r24	; 0x05
    55fa:	3f c0       	rjmp	.+126    	; 0x567a <Converter+0x25ee>
	else if (__tmp > 65535)
    55fc:	6f 81       	ldd	r22, Y+7	; 0x07
    55fe:	78 85       	ldd	r23, Y+8	; 0x08
    5600:	89 85       	ldd	r24, Y+9	; 0x09
    5602:	9a 85       	ldd	r25, Y+10	; 0x0a
    5604:	20 e0       	ldi	r18, 0x00	; 0
    5606:	3f ef       	ldi	r19, 0xFF	; 255
    5608:	4f e7       	ldi	r20, 0x7F	; 127
    560a:	57 e4       	ldi	r21, 0x47	; 71
    560c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5610:	18 16       	cp	r1, r24
    5612:	4c f5       	brge	.+82     	; 0x5666 <Converter+0x25da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5614:	6b 85       	ldd	r22, Y+11	; 0x0b
    5616:	7c 85       	ldd	r23, Y+12	; 0x0c
    5618:	8d 85       	ldd	r24, Y+13	; 0x0d
    561a:	9e 85       	ldd	r25, Y+14	; 0x0e
    561c:	20 e0       	ldi	r18, 0x00	; 0
    561e:	30 e0       	ldi	r19, 0x00	; 0
    5620:	40 e2       	ldi	r20, 0x20	; 32
    5622:	51 e4       	ldi	r21, 0x41	; 65
    5624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5628:	dc 01       	movw	r26, r24
    562a:	cb 01       	movw	r24, r22
    562c:	bc 01       	movw	r22, r24
    562e:	cd 01       	movw	r24, r26
    5630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5634:	dc 01       	movw	r26, r24
    5636:	cb 01       	movw	r24, r22
    5638:	9e 83       	std	Y+6, r25	; 0x06
    563a:	8d 83       	std	Y+5, r24	; 0x05
    563c:	0f c0       	rjmp	.+30     	; 0x565c <Converter+0x25d0>
    563e:	89 e1       	ldi	r24, 0x19	; 25
    5640:	90 e0       	ldi	r25, 0x00	; 0
    5642:	9c 83       	std	Y+4, r25	; 0x04
    5644:	8b 83       	std	Y+3, r24	; 0x03
    5646:	8b 81       	ldd	r24, Y+3	; 0x03
    5648:	9c 81       	ldd	r25, Y+4	; 0x04
    564a:	01 97       	sbiw	r24, 0x01	; 1
    564c:	f1 f7       	brne	.-4      	; 0x564a <Converter+0x25be>
    564e:	9c 83       	std	Y+4, r25	; 0x04
    5650:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5652:	8d 81       	ldd	r24, Y+5	; 0x05
    5654:	9e 81       	ldd	r25, Y+6	; 0x06
    5656:	01 97       	sbiw	r24, 0x01	; 1
    5658:	9e 83       	std	Y+6, r25	; 0x06
    565a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    565c:	8d 81       	ldd	r24, Y+5	; 0x05
    565e:	9e 81       	ldd	r25, Y+6	; 0x06
    5660:	00 97       	sbiw	r24, 0x00	; 0
    5662:	69 f7       	brne	.-38     	; 0x563e <Converter+0x25b2>
    5664:	14 c0       	rjmp	.+40     	; 0x568e <Converter+0x2602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5666:	6f 81       	ldd	r22, Y+7	; 0x07
    5668:	78 85       	ldd	r23, Y+8	; 0x08
    566a:	89 85       	ldd	r24, Y+9	; 0x09
    566c:	9a 85       	ldd	r25, Y+10	; 0x0a
    566e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5672:	dc 01       	movw	r26, r24
    5674:	cb 01       	movw	r24, r22
    5676:	9e 83       	std	Y+6, r25	; 0x06
    5678:	8d 83       	std	Y+5, r24	; 0x05
    567a:	8d 81       	ldd	r24, Y+5	; 0x05
    567c:	9e 81       	ldd	r25, Y+6	; 0x06
    567e:	9a 83       	std	Y+2, r25	; 0x02
    5680:	89 83       	std	Y+1, r24	; 0x01
    5682:	89 81       	ldd	r24, Y+1	; 0x01
    5684:	9a 81       	ldd	r25, Y+2	; 0x02
    5686:	01 97       	sbiw	r24, 0x01	; 1
    5688:	f1 f7       	brne	.-4      	; 0x5686 <Converter+0x25fa>
    568a:	9a 83       	std	Y+2, r25	; 0x02
    568c:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(400);
						main();
    568e:	0e 94 77 13 	call	0x26ee	; 0x26ee <main>
						break;
	}
}
    5692:	ce 5a       	subi	r28, 0xAE	; 174
    5694:	de 4f       	sbci	r29, 0xFE	; 254
    5696:	0f b6       	in	r0, 0x3f	; 63
    5698:	f8 94       	cli
    569a:	de bf       	out	0x3e, r29	; 62
    569c:	0f be       	out	0x3f, r0	; 63
    569e:	cd bf       	out	0x3d, r28	; 61
    56a0:	cf 91       	pop	r28
    56a2:	df 91       	pop	r29
    56a4:	1f 91       	pop	r17
    56a6:	0f 91       	pop	r16
    56a8:	08 95       	ret

000056aa <getHexNumber>:
void getHexNumber(void){
    56aa:	0f 93       	push	r16
    56ac:	1f 93       	push	r17
    56ae:	df 93       	push	r29
    56b0:	cf 93       	push	r28
    56b2:	cd b7       	in	r28, 0x3d	; 61
    56b4:	de b7       	in	r29, 0x3e	; 62
    56b6:	2e 97       	sbiw	r28, 0x0e	; 14
    56b8:	0f b6       	in	r0, 0x3f	; 63
    56ba:	f8 94       	cli
    56bc:	de bf       	out	0x3e, r29	; 62
    56be:	0f be       	out	0x3f, r0	; 63
    56c0:	cd bf       	out	0x3d, r28	; 61
	//	uint16 decimal_number;
	LCD_clearScreen();
    56c2:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Hex:");
    56c6:	25 ea       	ldi	r18, 0xA5	; 165
    56c8:	31 e0       	ldi	r19, 0x01	; 1
    56ca:	80 e0       	ldi	r24, 0x00	; 0
    56cc:	60 e0       	ldi	r22, 0x00	; 0
    56ce:	a9 01       	movw	r20, r18
    56d0:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_displayStringRowColumn>
	index_of_hex_number=0;
    56d4:	10 92 b2 01 	sts	0x01B2, r1
    56d8:	b0 c0       	rjmp	.+352    	; 0x583a <getHexNumber+0x190>
	while(KEYPAD_getPressedKey() != '=')
	{
		hex[index_of_hex_number] = KEYPAD_getPressedKey();
    56da:	80 91 b2 01 	lds	r24, 0x01B2
    56de:	08 2f       	mov	r16, r24
    56e0:	10 e0       	ldi	r17, 0x00	; 0
    56e2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    56e6:	28 2f       	mov	r18, r24
    56e8:	30 e0       	ldi	r19, 0x00	; 0
    56ea:	c8 01       	movw	r24, r16
    56ec:	88 0f       	add	r24, r24
    56ee:	99 1f       	adc	r25, r25
    56f0:	fc 01       	movw	r30, r24
    56f2:	ed 54       	subi	r30, 0x4D	; 77
    56f4:	fe 4f       	sbci	r31, 0xFE	; 254
    56f6:	31 83       	std	Z+1, r19	; 0x01
    56f8:	20 83       	st	Z, r18
    56fa:	80 e0       	ldi	r24, 0x00	; 0
    56fc:	90 e0       	ldi	r25, 0x00	; 0
    56fe:	af ea       	ldi	r26, 0xAF	; 175
    5700:	b3 e4       	ldi	r27, 0x43	; 67
    5702:	8b 87       	std	Y+11, r24	; 0x0b
    5704:	9c 87       	std	Y+12, r25	; 0x0c
    5706:	ad 87       	std	Y+13, r26	; 0x0d
    5708:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    570a:	6b 85       	ldd	r22, Y+11	; 0x0b
    570c:	7c 85       	ldd	r23, Y+12	; 0x0c
    570e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5710:	9e 85       	ldd	r25, Y+14	; 0x0e
    5712:	20 e0       	ldi	r18, 0x00	; 0
    5714:	30 e0       	ldi	r19, 0x00	; 0
    5716:	4a e7       	ldi	r20, 0x7A	; 122
    5718:	53 e4       	ldi	r21, 0x43	; 67
    571a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    571e:	dc 01       	movw	r26, r24
    5720:	cb 01       	movw	r24, r22
    5722:	8f 83       	std	Y+7, r24	; 0x07
    5724:	98 87       	std	Y+8, r25	; 0x08
    5726:	a9 87       	std	Y+9, r26	; 0x09
    5728:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    572a:	6f 81       	ldd	r22, Y+7	; 0x07
    572c:	78 85       	ldd	r23, Y+8	; 0x08
    572e:	89 85       	ldd	r24, Y+9	; 0x09
    5730:	9a 85       	ldd	r25, Y+10	; 0x0a
    5732:	20 e0       	ldi	r18, 0x00	; 0
    5734:	30 e0       	ldi	r19, 0x00	; 0
    5736:	40 e8       	ldi	r20, 0x80	; 128
    5738:	5f e3       	ldi	r21, 0x3F	; 63
    573a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    573e:	88 23       	and	r24, r24
    5740:	2c f4       	brge	.+10     	; 0x574c <getHexNumber+0xa2>
		__ticks = 1;
    5742:	81 e0       	ldi	r24, 0x01	; 1
    5744:	90 e0       	ldi	r25, 0x00	; 0
    5746:	9e 83       	std	Y+6, r25	; 0x06
    5748:	8d 83       	std	Y+5, r24	; 0x05
    574a:	3f c0       	rjmp	.+126    	; 0x57ca <getHexNumber+0x120>
	else if (__tmp > 65535)
    574c:	6f 81       	ldd	r22, Y+7	; 0x07
    574e:	78 85       	ldd	r23, Y+8	; 0x08
    5750:	89 85       	ldd	r24, Y+9	; 0x09
    5752:	9a 85       	ldd	r25, Y+10	; 0x0a
    5754:	20 e0       	ldi	r18, 0x00	; 0
    5756:	3f ef       	ldi	r19, 0xFF	; 255
    5758:	4f e7       	ldi	r20, 0x7F	; 127
    575a:	57 e4       	ldi	r21, 0x47	; 71
    575c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5760:	18 16       	cp	r1, r24
    5762:	4c f5       	brge	.+82     	; 0x57b6 <getHexNumber+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5764:	6b 85       	ldd	r22, Y+11	; 0x0b
    5766:	7c 85       	ldd	r23, Y+12	; 0x0c
    5768:	8d 85       	ldd	r24, Y+13	; 0x0d
    576a:	9e 85       	ldd	r25, Y+14	; 0x0e
    576c:	20 e0       	ldi	r18, 0x00	; 0
    576e:	30 e0       	ldi	r19, 0x00	; 0
    5770:	40 e2       	ldi	r20, 0x20	; 32
    5772:	51 e4       	ldi	r21, 0x41	; 65
    5774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5778:	dc 01       	movw	r26, r24
    577a:	cb 01       	movw	r24, r22
    577c:	bc 01       	movw	r22, r24
    577e:	cd 01       	movw	r24, r26
    5780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5784:	dc 01       	movw	r26, r24
    5786:	cb 01       	movw	r24, r22
    5788:	9e 83       	std	Y+6, r25	; 0x06
    578a:	8d 83       	std	Y+5, r24	; 0x05
    578c:	0f c0       	rjmp	.+30     	; 0x57ac <getHexNumber+0x102>
    578e:	89 e1       	ldi	r24, 0x19	; 25
    5790:	90 e0       	ldi	r25, 0x00	; 0
    5792:	9c 83       	std	Y+4, r25	; 0x04
    5794:	8b 83       	std	Y+3, r24	; 0x03
    5796:	8b 81       	ldd	r24, Y+3	; 0x03
    5798:	9c 81       	ldd	r25, Y+4	; 0x04
    579a:	01 97       	sbiw	r24, 0x01	; 1
    579c:	f1 f7       	brne	.-4      	; 0x579a <getHexNumber+0xf0>
    579e:	9c 83       	std	Y+4, r25	; 0x04
    57a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57a2:	8d 81       	ldd	r24, Y+5	; 0x05
    57a4:	9e 81       	ldd	r25, Y+6	; 0x06
    57a6:	01 97       	sbiw	r24, 0x01	; 1
    57a8:	9e 83       	std	Y+6, r25	; 0x06
    57aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57ac:	8d 81       	ldd	r24, Y+5	; 0x05
    57ae:	9e 81       	ldd	r25, Y+6	; 0x06
    57b0:	00 97       	sbiw	r24, 0x00	; 0
    57b2:	69 f7       	brne	.-38     	; 0x578e <getHexNumber+0xe4>
    57b4:	14 c0       	rjmp	.+40     	; 0x57de <getHexNumber+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57b6:	6f 81       	ldd	r22, Y+7	; 0x07
    57b8:	78 85       	ldd	r23, Y+8	; 0x08
    57ba:	89 85       	ldd	r24, Y+9	; 0x09
    57bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    57be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57c2:	dc 01       	movw	r26, r24
    57c4:	cb 01       	movw	r24, r22
    57c6:	9e 83       	std	Y+6, r25	; 0x06
    57c8:	8d 83       	std	Y+5, r24	; 0x05
    57ca:	8d 81       	ldd	r24, Y+5	; 0x05
    57cc:	9e 81       	ldd	r25, Y+6	; 0x06
    57ce:	9a 83       	std	Y+2, r25	; 0x02
    57d0:	89 83       	std	Y+1, r24	; 0x01
    57d2:	89 81       	ldd	r24, Y+1	; 0x01
    57d4:	9a 81       	ldd	r25, Y+2	; 0x02
    57d6:	01 97       	sbiw	r24, 0x01	; 1
    57d8:	f1 f7       	brne	.-4      	; 0x57d6 <getHexNumber+0x12c>
    57da:	9a 83       	std	Y+2, r25	; 0x02
    57dc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(KEYPAD_PRESSED_TIME);
		if(hex[index_of_hex_number] >= 0 && hex[index_of_hex_number] <= 9){
    57de:	80 91 b2 01 	lds	r24, 0x01B2
    57e2:	88 2f       	mov	r24, r24
    57e4:	90 e0       	ldi	r25, 0x00	; 0
    57e6:	88 0f       	add	r24, r24
    57e8:	99 1f       	adc	r25, r25
    57ea:	fc 01       	movw	r30, r24
    57ec:	ed 54       	subi	r30, 0x4D	; 77
    57ee:	fe 4f       	sbci	r31, 0xFE	; 254
    57f0:	80 81       	ld	r24, Z
    57f2:	91 81       	ldd	r25, Z+1	; 0x01
    57f4:	8a 30       	cpi	r24, 0x0A	; 10
    57f6:	91 05       	cpc	r25, r1
    57f8:	70 f4       	brcc	.+28     	; 0x5816 <getHexNumber+0x16c>

			LCD_intgerToString(hex[index_of_hex_number]);
    57fa:	80 91 b2 01 	lds	r24, 0x01B2
    57fe:	88 2f       	mov	r24, r24
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	88 0f       	add	r24, r24
    5804:	99 1f       	adc	r25, r25
    5806:	fc 01       	movw	r30, r24
    5808:	ed 54       	subi	r30, 0x4D	; 77
    580a:	fe 4f       	sbci	r31, 0xFE	; 254
    580c:	80 81       	ld	r24, Z
    580e:	91 81       	ldd	r25, Z+1	; 0x01
    5810:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_intgerToString>
    5814:	0d c0       	rjmp	.+26     	; 0x5830 <getHexNumber+0x186>
		}
		else{
			LCD_displayCharacter(hex[index_of_hex_number]);
    5816:	80 91 b2 01 	lds	r24, 0x01B2
    581a:	88 2f       	mov	r24, r24
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	88 0f       	add	r24, r24
    5820:	99 1f       	adc	r25, r25
    5822:	fc 01       	movw	r30, r24
    5824:	ed 54       	subi	r30, 0x4D	; 77
    5826:	fe 4f       	sbci	r31, 0xFE	; 254
    5828:	80 81       	ld	r24, Z
    582a:	91 81       	ldd	r25, Z+1	; 0x01
    582c:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <LCD_displayCharacter>
		}
		index_of_hex_number++;
    5830:	80 91 b2 01 	lds	r24, 0x01B2
    5834:	8f 5f       	subi	r24, 0xFF	; 255
    5836:	80 93 b2 01 	sts	0x01B2, r24
void getHexNumber(void){
	//	uint16 decimal_number;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Hex:");
	index_of_hex_number=0;
	while(KEYPAD_getPressedKey() != '=')
    583a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    583e:	8d 33       	cpi	r24, 0x3D	; 61
    5840:	09 f0       	breq	.+2      	; 0x5844 <getHexNumber+0x19a>
    5842:	4b cf       	rjmp	.-362    	; 0x56da <getHexNumber+0x30>
			LCD_displayCharacter(hex[index_of_hex_number]);
		}
		index_of_hex_number++;

	}
	hex[index_of_hex_number]='=';
    5844:	80 91 b2 01 	lds	r24, 0x01B2
    5848:	88 2f       	mov	r24, r24
    584a:	90 e0       	ldi	r25, 0x00	; 0
    584c:	88 0f       	add	r24, r24
    584e:	99 1f       	adc	r25, r25
    5850:	fc 01       	movw	r30, r24
    5852:	ed 54       	subi	r30, 0x4D	; 77
    5854:	fe 4f       	sbci	r31, 0xFE	; 254
    5856:	8d e3       	ldi	r24, 0x3D	; 61
    5858:	90 e0       	ldi	r25, 0x00	; 0
    585a:	91 83       	std	Z+1, r25	; 0x01
    585c:	80 83       	st	Z, r24



}
    585e:	2e 96       	adiw	r28, 0x0e	; 14
    5860:	0f b6       	in	r0, 0x3f	; 63
    5862:	f8 94       	cli
    5864:	de bf       	out	0x3e, r29	; 62
    5866:	0f be       	out	0x3f, r0	; 63
    5868:	cd bf       	out	0x3d, r28	; 61
    586a:	cf 91       	pop	r28
    586c:	df 91       	pop	r29
    586e:	1f 91       	pop	r17
    5870:	0f 91       	pop	r16
    5872:	08 95       	ret

00005874 <oct_to_hex>:

#include "Oct_to_Hex.h"


void oct_to_hex (uint16 oct_num)
{
    5874:	df 93       	push	r29
    5876:	cf 93       	push	r28
    5878:	00 d0       	rcall	.+0      	; 0x587a <oct_to_hex+0x6>
    587a:	00 d0       	rcall	.+0      	; 0x587c <oct_to_hex+0x8>
    587c:	cd b7       	in	r28, 0x3d	; 61
    587e:	de b7       	in	r29, 0x3e	; 62
    5880:	9c 83       	std	Y+4, r25	; 0x04
    5882:	8b 83       	std	Y+3, r24	; 0x03
	uint16  dec_num = 0;
    5884:	1a 82       	std	Y+2, r1	; 0x02
    5886:	19 82       	std	Y+1, r1	; 0x01

    dec_num = Oct_to_dec(oct_num);
    5888:	8b 81       	ldd	r24, Y+3	; 0x03
    588a:	9c 81       	ldd	r25, Y+4	; 0x04
    588c:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <Oct_to_dec>
    5890:	9a 83       	std	Y+2, r25	; 0x02
    5892:	89 83       	std	Y+1, r24	; 0x01
    Dec_to_Hex(dec_num);
    5894:	89 81       	ldd	r24, Y+1	; 0x01
    5896:	9a 81       	ldd	r25, Y+2	; 0x02
    5898:	0e 94 4a 10 	call	0x2094	; 0x2094 <Dec_to_Hex>


}
    589c:	0f 90       	pop	r0
    589e:	0f 90       	pop	r0
    58a0:	0f 90       	pop	r0
    58a2:	0f 90       	pop	r0
    58a4:	cf 91       	pop	r28
    58a6:	df 91       	pop	r29
    58a8:	08 95       	ret

000058aa <oct_to_bin>:

#include "Oct_to_bin.h"


void oct_to_bin(uint16 oct_num)
{
    58aa:	df 93       	push	r29
    58ac:	cf 93       	push	r28
    58ae:	00 d0       	rcall	.+0      	; 0x58b0 <oct_to_bin+0x6>
    58b0:	00 d0       	rcall	.+0      	; 0x58b2 <oct_to_bin+0x8>
    58b2:	cd b7       	in	r28, 0x3d	; 61
    58b4:	de b7       	in	r29, 0x3e	; 62
    58b6:	9c 83       	std	Y+4, r25	; 0x04
    58b8:	8b 83       	std	Y+3, r24	; 0x03
    uint16 dec_num = 0;
    58ba:	1a 82       	std	Y+2, r1	; 0x02
    58bc:	19 82       	std	Y+1, r1	; 0x01

    dec_num = Oct_to_dec( oct_num);
    58be:	8b 81       	ldd	r24, Y+3	; 0x03
    58c0:	9c 81       	ldd	r25, Y+4	; 0x04
    58c2:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <Oct_to_dec>
    58c6:	9a 83       	std	Y+2, r25	; 0x02
    58c8:	89 83       	std	Y+1, r24	; 0x01
	Dec_to_bin(dec_num);
    58ca:	89 81       	ldd	r24, Y+1	; 0x01
    58cc:	9a 81       	ldd	r25, Y+2	; 0x02
    58ce:	0e 94 06 11 	call	0x220c	; 0x220c <Dec_to_bin>

}
    58d2:	0f 90       	pop	r0
    58d4:	0f 90       	pop	r0
    58d6:	0f 90       	pop	r0
    58d8:	0f 90       	pop	r0
    58da:	cf 91       	pop	r28
    58dc:	df 91       	pop	r29
    58de:	08 95       	ret

000058e0 <Oct_to_dec>:
 *******************************************************************************/

#include "Oct_to_dec.h"

uint16 Oct_to_dec(uint16 oct_num)
{
    58e0:	df 93       	push	r29
    58e2:	cf 93       	push	r28
    58e4:	cd b7       	in	r28, 0x3d	; 61
    58e6:	de b7       	in	r29, 0x3e	; 62
    58e8:	28 97       	sbiw	r28, 0x08	; 8
    58ea:	0f b6       	in	r0, 0x3f	; 63
    58ec:	f8 94       	cli
    58ee:	de bf       	out	0x3e, r29	; 62
    58f0:	0f be       	out	0x3f, r0	; 63
    58f2:	cd bf       	out	0x3d, r28	; 61
    58f4:	98 87       	std	Y+8, r25	; 0x08
    58f6:	8f 83       	std	Y+7, r24	; 0x07

    uint16 dec = 0;
    58f8:	1e 82       	std	Y+6, r1	; 0x06
    58fa:	1d 82       	std	Y+5, r1	; 0x05
    // Initializing baseValue value to 1, i.e 8^0
    uint16 baseValue = 1;
    58fc:	81 e0       	ldi	r24, 0x01	; 1
    58fe:	90 e0       	ldi	r25, 0x00	; 0
    5900:	9c 83       	std	Y+4, r25	; 0x04
    5902:	8b 83       	std	Y+3, r24	; 0x03
    5904:	2f c0       	rjmp	.+94     	; 0x5964 <Oct_to_dec+0x84>
	uint16 last_digit;
	
    while (oct_num)
    {
        // Extracting last digit
         last_digit = oct_num % 10;
    5906:	8f 81       	ldd	r24, Y+7	; 0x07
    5908:	98 85       	ldd	r25, Y+8	; 0x08
    590a:	2a e0       	ldi	r18, 0x0A	; 10
    590c:	30 e0       	ldi	r19, 0x00	; 0
    590e:	b9 01       	movw	r22, r18
    5910:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <__udivmodhi4>
    5914:	9a 83       	std	Y+2, r25	; 0x02
    5916:	89 83       	std	Y+1, r24	; 0x01
        // Multiplying last digit with appropriate
        // base value and adding it to decNum
        dec += last_digit * baseValue;
    5918:	29 81       	ldd	r18, Y+1	; 0x01
    591a:	3a 81       	ldd	r19, Y+2	; 0x02
    591c:	8b 81       	ldd	r24, Y+3	; 0x03
    591e:	9c 81       	ldd	r25, Y+4	; 0x04
    5920:	a9 01       	movw	r20, r18
    5922:	48 9f       	mul	r20, r24
    5924:	90 01       	movw	r18, r0
    5926:	49 9f       	mul	r20, r25
    5928:	30 0d       	add	r19, r0
    592a:	58 9f       	mul	r21, r24
    592c:	30 0d       	add	r19, r0
    592e:	11 24       	eor	r1, r1
    5930:	8d 81       	ldd	r24, Y+5	; 0x05
    5932:	9e 81       	ldd	r25, Y+6	; 0x06
    5934:	82 0f       	add	r24, r18
    5936:	93 1f       	adc	r25, r19
    5938:	9e 83       	std	Y+6, r25	; 0x06
    593a:	8d 83       	std	Y+5, r24	; 0x05
        baseValue = baseValue * 8;
    593c:	8b 81       	ldd	r24, Y+3	; 0x03
    593e:	9c 81       	ldd	r25, Y+4	; 0x04
    5940:	88 0f       	add	r24, r24
    5942:	99 1f       	adc	r25, r25
    5944:	88 0f       	add	r24, r24
    5946:	99 1f       	adc	r25, r25
    5948:	88 0f       	add	r24, r24
    594a:	99 1f       	adc	r25, r25
    594c:	9c 83       	std	Y+4, r25	; 0x04
    594e:	8b 83       	std	Y+3, r24	; 0x03
        oct_num = oct_num / 10;
    5950:	8f 81       	ldd	r24, Y+7	; 0x07
    5952:	98 85       	ldd	r25, Y+8	; 0x08
    5954:	2a e0       	ldi	r18, 0x0A	; 10
    5956:	30 e0       	ldi	r19, 0x00	; 0
    5958:	b9 01       	movw	r22, r18
    595a:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <__udivmodhi4>
    595e:	cb 01       	movw	r24, r22
    5960:	98 87       	std	Y+8, r25	; 0x08
    5962:	8f 83       	std	Y+7, r24	; 0x07
    uint16 dec = 0;
    // Initializing baseValue value to 1, i.e 8^0
    uint16 baseValue = 1;
	uint16 last_digit;
	
    while (oct_num)
    5964:	8f 81       	ldd	r24, Y+7	; 0x07
    5966:	98 85       	ldd	r25, Y+8	; 0x08
    5968:	00 97       	sbiw	r24, 0x00	; 0
    596a:	69 f6       	brne	.-102    	; 0x5906 <Oct_to_dec+0x26>
        dec += last_digit * baseValue;
        baseValue = baseValue * 8;
        oct_num = oct_num / 10;
    }

    return dec;
    596c:	8d 81       	ldd	r24, Y+5	; 0x05
    596e:	9e 81       	ldd	r25, Y+6	; 0x06
}
    5970:	28 96       	adiw	r28, 0x08	; 8
    5972:	0f b6       	in	r0, 0x3f	; 63
    5974:	f8 94       	cli
    5976:	de bf       	out	0x3e, r29	; 62
    5978:	0f be       	out	0x3f, r0	; 63
    597a:	cd bf       	out	0x3d, r28	; 61
    597c:	cf 91       	pop	r28
    597e:	df 91       	pop	r29
    5980:	08 95       	ret

00005982 <__mulsi3>:
    5982:	62 9f       	mul	r22, r18
    5984:	d0 01       	movw	r26, r0
    5986:	73 9f       	mul	r23, r19
    5988:	f0 01       	movw	r30, r0
    598a:	82 9f       	mul	r24, r18
    598c:	e0 0d       	add	r30, r0
    598e:	f1 1d       	adc	r31, r1
    5990:	64 9f       	mul	r22, r20
    5992:	e0 0d       	add	r30, r0
    5994:	f1 1d       	adc	r31, r1
    5996:	92 9f       	mul	r25, r18
    5998:	f0 0d       	add	r31, r0
    599a:	83 9f       	mul	r24, r19
    599c:	f0 0d       	add	r31, r0
    599e:	74 9f       	mul	r23, r20
    59a0:	f0 0d       	add	r31, r0
    59a2:	65 9f       	mul	r22, r21
    59a4:	f0 0d       	add	r31, r0
    59a6:	99 27       	eor	r25, r25
    59a8:	72 9f       	mul	r23, r18
    59aa:	b0 0d       	add	r27, r0
    59ac:	e1 1d       	adc	r30, r1
    59ae:	f9 1f       	adc	r31, r25
    59b0:	63 9f       	mul	r22, r19
    59b2:	b0 0d       	add	r27, r0
    59b4:	e1 1d       	adc	r30, r1
    59b6:	f9 1f       	adc	r31, r25
    59b8:	bd 01       	movw	r22, r26
    59ba:	cf 01       	movw	r24, r30
    59bc:	11 24       	eor	r1, r1
    59be:	08 95       	ret

000059c0 <__udivmodhi4>:
    59c0:	aa 1b       	sub	r26, r26
    59c2:	bb 1b       	sub	r27, r27
    59c4:	51 e1       	ldi	r21, 0x11	; 17
    59c6:	07 c0       	rjmp	.+14     	; 0x59d6 <__udivmodhi4_ep>

000059c8 <__udivmodhi4_loop>:
    59c8:	aa 1f       	adc	r26, r26
    59ca:	bb 1f       	adc	r27, r27
    59cc:	a6 17       	cp	r26, r22
    59ce:	b7 07       	cpc	r27, r23
    59d0:	10 f0       	brcs	.+4      	; 0x59d6 <__udivmodhi4_ep>
    59d2:	a6 1b       	sub	r26, r22
    59d4:	b7 0b       	sbc	r27, r23

000059d6 <__udivmodhi4_ep>:
    59d6:	88 1f       	adc	r24, r24
    59d8:	99 1f       	adc	r25, r25
    59da:	5a 95       	dec	r21
    59dc:	a9 f7       	brne	.-22     	; 0x59c8 <__udivmodhi4_loop>
    59de:	80 95       	com	r24
    59e0:	90 95       	com	r25
    59e2:	bc 01       	movw	r22, r24
    59e4:	cd 01       	movw	r24, r26
    59e6:	08 95       	ret

000059e8 <__prologue_saves__>:
    59e8:	2f 92       	push	r2
    59ea:	3f 92       	push	r3
    59ec:	4f 92       	push	r4
    59ee:	5f 92       	push	r5
    59f0:	6f 92       	push	r6
    59f2:	7f 92       	push	r7
    59f4:	8f 92       	push	r8
    59f6:	9f 92       	push	r9
    59f8:	af 92       	push	r10
    59fa:	bf 92       	push	r11
    59fc:	cf 92       	push	r12
    59fe:	df 92       	push	r13
    5a00:	ef 92       	push	r14
    5a02:	ff 92       	push	r15
    5a04:	0f 93       	push	r16
    5a06:	1f 93       	push	r17
    5a08:	cf 93       	push	r28
    5a0a:	df 93       	push	r29
    5a0c:	cd b7       	in	r28, 0x3d	; 61
    5a0e:	de b7       	in	r29, 0x3e	; 62
    5a10:	ca 1b       	sub	r28, r26
    5a12:	db 0b       	sbc	r29, r27
    5a14:	0f b6       	in	r0, 0x3f	; 63
    5a16:	f8 94       	cli
    5a18:	de bf       	out	0x3e, r29	; 62
    5a1a:	0f be       	out	0x3f, r0	; 63
    5a1c:	cd bf       	out	0x3d, r28	; 61
    5a1e:	09 94       	ijmp

00005a20 <__epilogue_restores__>:
    5a20:	2a 88       	ldd	r2, Y+18	; 0x12
    5a22:	39 88       	ldd	r3, Y+17	; 0x11
    5a24:	48 88       	ldd	r4, Y+16	; 0x10
    5a26:	5f 84       	ldd	r5, Y+15	; 0x0f
    5a28:	6e 84       	ldd	r6, Y+14	; 0x0e
    5a2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5a2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5a2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5a30:	aa 84       	ldd	r10, Y+10	; 0x0a
    5a32:	b9 84       	ldd	r11, Y+9	; 0x09
    5a34:	c8 84       	ldd	r12, Y+8	; 0x08
    5a36:	df 80       	ldd	r13, Y+7	; 0x07
    5a38:	ee 80       	ldd	r14, Y+6	; 0x06
    5a3a:	fd 80       	ldd	r15, Y+5	; 0x05
    5a3c:	0c 81       	ldd	r16, Y+4	; 0x04
    5a3e:	1b 81       	ldd	r17, Y+3	; 0x03
    5a40:	aa 81       	ldd	r26, Y+2	; 0x02
    5a42:	b9 81       	ldd	r27, Y+1	; 0x01
    5a44:	ce 0f       	add	r28, r30
    5a46:	d1 1d       	adc	r29, r1
    5a48:	0f b6       	in	r0, 0x3f	; 63
    5a4a:	f8 94       	cli
    5a4c:	de bf       	out	0x3e, r29	; 62
    5a4e:	0f be       	out	0x3f, r0	; 63
    5a50:	cd bf       	out	0x3d, r28	; 61
    5a52:	ed 01       	movw	r28, r26
    5a54:	08 95       	ret

00005a56 <itoa>:
    5a56:	fb 01       	movw	r30, r22
    5a58:	9f 01       	movw	r18, r30
    5a5a:	e8 94       	clt
    5a5c:	42 30       	cpi	r20, 0x02	; 2
    5a5e:	c4 f0       	brlt	.+48     	; 0x5a90 <itoa+0x3a>
    5a60:	45 32       	cpi	r20, 0x25	; 37
    5a62:	b4 f4       	brge	.+44     	; 0x5a90 <itoa+0x3a>
    5a64:	4a 30       	cpi	r20, 0x0A	; 10
    5a66:	29 f4       	brne	.+10     	; 0x5a72 <itoa+0x1c>
    5a68:	97 fb       	bst	r25, 7
    5a6a:	1e f4       	brtc	.+6      	; 0x5a72 <itoa+0x1c>
    5a6c:	90 95       	com	r25
    5a6e:	81 95       	neg	r24
    5a70:	9f 4f       	sbci	r25, 0xFF	; 255
    5a72:	64 2f       	mov	r22, r20
    5a74:	77 27       	eor	r23, r23
    5a76:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <__udivmodhi4>
    5a7a:	80 5d       	subi	r24, 0xD0	; 208
    5a7c:	8a 33       	cpi	r24, 0x3A	; 58
    5a7e:	0c f0       	brlt	.+2      	; 0x5a82 <itoa+0x2c>
    5a80:	89 5d       	subi	r24, 0xD9	; 217
    5a82:	81 93       	st	Z+, r24
    5a84:	cb 01       	movw	r24, r22
    5a86:	00 97       	sbiw	r24, 0x00	; 0
    5a88:	a1 f7       	brne	.-24     	; 0x5a72 <itoa+0x1c>
    5a8a:	16 f4       	brtc	.+4      	; 0x5a90 <itoa+0x3a>
    5a8c:	5d e2       	ldi	r21, 0x2D	; 45
    5a8e:	51 93       	st	Z+, r21
    5a90:	10 82       	st	Z, r1
    5a92:	c9 01       	movw	r24, r18
    5a94:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <strrev>

00005a98 <strrev>:
    5a98:	dc 01       	movw	r26, r24
    5a9a:	fc 01       	movw	r30, r24
    5a9c:	67 2f       	mov	r22, r23
    5a9e:	71 91       	ld	r23, Z+
    5aa0:	77 23       	and	r23, r23
    5aa2:	e1 f7       	brne	.-8      	; 0x5a9c <strrev+0x4>
    5aa4:	32 97       	sbiw	r30, 0x02	; 2
    5aa6:	04 c0       	rjmp	.+8      	; 0x5ab0 <strrev+0x18>
    5aa8:	7c 91       	ld	r23, X
    5aaa:	6d 93       	st	X+, r22
    5aac:	70 83       	st	Z, r23
    5aae:	62 91       	ld	r22, -Z
    5ab0:	ae 17       	cp	r26, r30
    5ab2:	bf 07       	cpc	r27, r31
    5ab4:	c8 f3       	brcs	.-14     	; 0x5aa8 <strrev+0x10>
    5ab6:	08 95       	ret

00005ab8 <_exit>:
    5ab8:	f8 94       	cli

00005aba <__stop_program>:
    5aba:	ff cf       	rjmp	.-2      	; 0x5aba <__stop_program>
